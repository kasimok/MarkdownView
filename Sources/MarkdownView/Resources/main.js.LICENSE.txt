/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*

For the reasoning behind this please see:
https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

*/

/*

Goals:

SQL is intended to highlight basic/common SQL keywords and expressions

- If pretty much every single SQL server includes supports, then it's a canidate.
- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,
  PostgreSQL) although the list of data types is purposely a bit more expansive.
- For more specific SQL grammars please see:
  - PostgreSQL and PL/pgSQL - core
  - T-SQL - https://github.com/highlightjs/highlightjs-tsql
  - sql_more (core)

 */

/*
      *	attributes
      */

/*
      *	cdata
      */

/*
      *	comments
      */

/*
      *	declarations
      */

/*
      *	processing instructions
      */

/*
      * entities
      */

/*
      * script
      */

/*
      * special tags
      */

/*
      * style
      */

/*
      The lookahead pattern (?=...) ensures that 'begin' only matches
      '<style' as a single word, followed by a whitespace or an
      ending bracket.
      */

/*
      Why might be find ourselves here?  An potential end match that was
      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.
      (this could be because a callback requests the match be ignored, etc)
       This causes no real harm other than stopping a few times too many.
      */

/*
    Created to solve the key deficiently with MultiRegex - there is no way to
    test for multiple matches at a single location.  Why would we need to do
    that?  In the future a more dynamic engine will allow certain matches to be
    ignored.  An example: if we matched say the 3rd regex in a large group but
    decided to ignore it - we'd need to started testing again at the 4th
    regex... but MultiRegex itself gives us no real way to do that.
     So what this class creates MultiRegexs on the fly for whatever search
    position they are needed.
     NOTE: These additional MultiRegex objects are created dynamically.  For most
    grammars most of the time we will never actually need anything more than the
    first MultiRegex - so this shouldn't have too much overhead.
     Say this is our search group, and we match regex3, but wish to ignore it.
       regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0
     What we need is a new MultiRegex that only includes the remaining
    possibilities:
       regex4 | regex5                               ' ie, startAt = 3
     This class wraps all that complexity up in a simple API... `startAt` decides
    where in the array of expressions to start doing the matching. It
    auto-increments, so if a match is found at position 2, then startAt will be
    set to 3.  If the end is reached startAt will return to 0.
     MOST of the time the parser will be setting startAt manually to 0.
  */

/*
 Language: Kotlin
 Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.
 Author: Sergey Mashkov <cy6erGn0m@gmail.com>
 Website: https://kotlinlang.org
 Category: common
 */

/*
 Language: SQL
 Website: https://en.wikipedia.org/wiki/SQL
 Category: common, database
 */

/*
Language: Bash
Author: vah <vahtenberg@gmail.com>
Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
Website: https://www.gnu.org/software/bash/
Category: common
*/

/*
Language: C
Category: common, system
Website: https://en.wikipedia.org/wiki/C_(programming_language)
*/

/*
Language: C#
Author: Jason Diamond <jason@diamond.name>
Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>
Website: https://docs.microsoft.com/en-us/dotnet/csharp/
Category: common
*/

/*
Language: C++
Category: common, system
Website: https://isocpp.org
*/

/*
Language: CSS
Category: common, css, web
Website: https://developer.mozilla.org/en-US/docs/Web/CSS
*/

/*
Language: Diff
Description: Unified and context diff
Author: Vasily Polovnyov <vast@whiteants.net>
Website: https://www.gnu.org/software/diffutils/
Category: common
*/

/*
Language: Go
Author: Stephan Kountso aka StepLg <steplg@gmail.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>
Description: Google go language (golang). For info about language
Website: http://golang.org/
Category: common, system
*/

/*
Language: HTML, XML
Website: https://www.w3.org/XML/
Category: common, web
Audit: 2020
*/

/*
Language: JSON
Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: http://www.json.org
Category: common, protocols, web
*/

/*
Language: Java
Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
Category: common, enterprise
Website: https://www.java.com/
*/

/*
Language: JavaScript
Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
Category: common, scripting, web
Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
*/

/*
Language: Less
Description: It's CSS, with just a little more.
Author:   Max Mikhailov <seven.phases.max@gmail.com>
Website: http://lesscss.org
Category: common, css, web
*/

/*
Language: Lua
Description: Lua is a powerful, efficient, lightweight, embeddable scripting language.
Author: Andrew Fedorov <dmmdrs@mail.ru>
Category: common, scripting
Website: https://www.lua.org
*/

/*
Language: Makefile
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Joël Porquet <joel@porquet.org>
Website: https://www.gnu.org/software/make/manual/html_node/Introduction.html
Category: common
*/

/*
Language: Markdown
Requires: xml.js
Author: John Crepezzi <john.crepezzi@gmail.com>
Website: https://daringfireball.net/projects/markdown/
Category: common, markup
*/

/*
Language: Objective-C
Author: Valerii Hiora <valerii.hiora@gmail.com>
Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
Website: https://developer.apple.com/documentation/objectivec
Category: common
*/

/*
Language: PHP
Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: https://www.php.net
Category: common
*/

/*
Language: PHP Template
Requires: xml.js, php.js
Author: Josh Goebel <hello@joshgoebel.com>
Website: https://www.php.net
Category: common
*/

/*
Language: Perl
Author: Peter Leonov <gojpeg@yandex.ru>
Website: https://www.perl.org
Category: common
*/

/*
Language: Plain text
Author: Egor Rogov (e.rogov@postgrespro.ru)
Description: Plain text without any highlighting.
Category: common
*/

/*
Language: Python
Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
Website: https://www.python.org
Category: common
*/

/*
Language: Python REPL
Requires: python.js
Author: Josh Goebel <hello@joshgoebel.com>
Category: common
*/

/*
Language: R
Description: R is a free software environment for statistical computing and graphics.
Author: Joe Cheng <joe@rstudio.org>
Contributors: Konrad Rudolph <konrad.rudolph@gmail.com>
Website: https://www.r-project.org
Category: common,scientific
*/

/*
Language: Ruby
Description: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.
Website: https://www.ruby-lang.org/
Author: Anton Kovalyov <anton@kovalyov.net>
Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
Category: common
*/

/*
Language: Rust
Author: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>
Contributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>
Website: https://www.rust-lang.org
Category: common, system
*/

/*
Language: SCSS
Description: Scss is an extension of the syntax of CSS.
Author: Kurt Emch <kurt@kurtemch.com>
Website: https://sass-lang.com
Category: common, css, web
*/

/*
Language: Shell Session
Requires: bash.js
Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
Category: common
Audit: 2020
*/

/*
Language: Swift
Description: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
Author: Steven Van Impe <steven.vanimpe@icloud.com>
Contributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>
Website: https://swift.org
Category: common, system
*/

/*
Language: TOML, also INI
Description: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.
Contributors: Guillaume Gomez <guillaume1.gomez@gmail.com>
Category: common, config
Website: https://github.com/toml-lang/toml
*/

/*
Language: TypeScript
Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
Contributors: Ike Ku <dempfi@yahoo.com>
Description: TypeScript is a strict superset of JavaScript
Website: https://www.typescriptlang.org
Category: common, scripting
*/

/*
Language: Visual Basic .NET
Description: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.
Authors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer
Website: https://docs.microsoft.com/dotnet/visual-basic/getting-started
Category: common
*/

/*
Language: YAML
Description: Yet Another Markdown Language
Author: Stefan Wienert <stwienert@gmail.com>
Contributors: Carl Baxter <carl@cbax.tech>
Requires: ruby.js
Website: https://yaml.org
Category: common, config
*/

/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

/*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
};*/

/* ! */

/* " */

/* # */

/* $ */

/* % */

/* & */

/* ' */

/* ( */

/* ) */

/* * */

/* + */

/* , */

/* - */

/* . */

/* / */

/* 0 */

/* 9 */

/* : */

/* ; */

/* < */

/* = */

/* > */

/* ? */

/* @ */

/* Don't mix up DFA `_state` and markdown-it `state` */

/* End line of multiline row. merge forward until the marked trToken */

/* Interface definition */

/* Last data row cannot be detected. not stored to trToken outside? */

/* Line with N bounds has cells indexed from 0 to N-2 */

/* Multiline. Join the text and feed into markdown-it blockParser. */

/* Multiline. Merge trTokens as an entire multiline trToken */

/* Multiline. Scan boundaries again since it's very complicated */

/* Null is possible when disabled the option autolabel */

/* Only separator needs to check indents */

/* Pad in newline characters on last and this line */

/* Push in th/td tokens */

/* Push in thead/tbody and tr open tokens */

/* Push in tr and thead/tbody closed tokens */

/* Quoted string with variables inside */

/* Scan for valid pipe character position */

/* Start line of multiline row. mark this trToken */

/* Utility functions */

/* Variables: simple (eg $(var)) and special (eg $@) */

/* [ */

/* \ */

/* \n */

/* ] */

/* ^ */

/* _ */

/* ` */

/* a */

/* binding */

/* eslint-disable no-bitwise */

/* eslint-disable no-script-url */

/* eslint-disable-next-line brace-style */

/* eslint-enable no-script-url */

/* harmony export */

/* make \` closes the code sequence, but not open it;
             the reason is that `\` is correct code block */

/* reserved deprecated keywords */

/* space */

/* t-y */

/* tab */

/* vim: set ts=2 sw=2 et: */

/* webpack/runtime/define property getters */

/* where backslash should be */

/* z */

/* { */

/* | */

/* } */

/* ~ */

/* ’ */

/* “”‘’ */

/*#__PURE__*/

/**
     *  Process an individual match
     *
     * @param {string} textBeforeMatch - text preceding the match (since the last match)
     * @param {EnhancedMatch} [match] - the match itself
     */

/**
     * @param {CompiledMode } mode - the mode to potentially end
     * @param {RegExpMatchArray} match - the latest match
     * @param {string} matchPlusRemainder - match plus remainder of content
     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
     */

/**
     * @param {CompiledMode} mode - new mode to start
     * @param {RegExpMatchArray} match
     */

/**
     * @param {CompiledScope} scope
     * @param {RegExpMatchArray} match
     */

/**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */

/**
     * An array of attribute name/value pairs, used for quickly diffing the
     * incomming attributes to see if the DOM node's attributes need to be
     * updated.
     */

/**
     * First pass: validate and collect info into table token. IR is stored in
     * markdown-it `token.meta` to be pushed later. table/tr open tokens are
     * generated here.
     */

/**
     * Handle matching but then ignoring a sequence of text
     *
     * @param {string} lexeme - string containing full match text
     */

/**
     * Handle the potential end of mode
     *
     * @param {RegExpMatchArray} match - the current match
     */

/**
     * Handle the start of a new potential mode match
     *
     * @param {EnhancedMatch} match - the current match
     * @returns {number} how far to advance the parse cursor
     */

/**
     * Naming convention of positional variables
     * - list-item
     * ·········longtext······\n
     *   ^head  ^start  ^end  ^max
     */

/**
     * Regex pseudo code for table:
     *     caption? header+ separator (data+ empty)* data+ caption?
     *
     * We use DFA to emulate this plugin. Types with lower precedence are
     * set-minus from all the formers.  Noted that separator should have higher
     * precedence than header or data.
     *   |  state  | caption separator header data empty | --> lower precedence
     *   | 0x10100 |    1        0       1     0     0   |
     */

/**
     * Return keyword data if a match is a keyword
     * @param {CompiledMode} mode - current mode
     * @param {string} matchText - the textual match
     * @returns {KeywordData | false}
     */

/**
     * Second pass: actually push the tokens into `state.tokens`.
     * thead/tbody/th/td open tokens and all closed tokens are generated here;
     * thead/tbody are generally called tgroup; td/th are generally called tcol.
     */

/**
     * Whether or not the statics have been applied for the node yet.
     */

/**
    Stores multiple regular expressions and allows you to quickly search for
    them all in a string simultaneously - returning the first match.  It does
    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
    and joined by `|` - using match groups to track position.  When a match is
    found checking which position in the array has content allows us to figure
    out which of the original regexes / match groups triggered the match.
     The match object itself (the result of `Regex.exec`) is returned but also
    enhanced by merging in any meta-data that was registered with the regex.
    This is how we keep track of which mode matched, and what type of rule
    (`illegal`, `begin`, end, etc).
  */

/**
   *
   * @param {PluginEvent} event
   * @param {any} args
   */

/**
   *
   * @param {string|string[]} aliasList - single alias or list of aliases
   * @param {{languageName: string}} opts
   */

/**
   * @param {*} options
   */

/**
   * @param {CompiledMode} mode
   */

/**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */

/**
   * @param {HLJSPlugin} plugin
   */

/**
   * @param {HighlightedHTMLElement} block - the HTML element to determine language for
   */

/**
   * @param {Node} node
   */

/**
   * @param {Renderer} builder
   * @param {Node} node
   */

/**
   * @param {string} name - name of the language to retrieve
   * @returns {Language | undefined}
   */

/**
   * @param {string} text
   * @param {string} kind
   */

/**
   * @param {string} text
   */

/**
   * @returns {string[]} List of language internal names
   */

/**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */

/**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */

/**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */

/**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */

/**
   * Adds texts to the output stream
   *
   * @param {string} text */

/**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */

/**
   * Applies highlighting to a DOM node containing code.
   *
   * @param {HighlightedHTMLElement} element - the HTML element to highlight
  */

/**
   * Builds a regex with the case sensitivity of the current language
   *
   * @param {RegExp | string} value
   * @param {boolean} [global]
   */

/**
   * Builds a span element
   *
   * @param {string} className */

/**
   * Builds new class name for block given the language name
   *
   * @param {HTMLElement} element
   * @param {string} [currentLang]
   * @param {string} [resultLang]
   */

/**
   * Character Literal
   * Either a single character ("a"C) or an escaped double quote (""""C).
   */

/**
   * Compiles an individual list of keywords
   *
   * Ex: "for if when while|5"
   *
   * @param {string} scopeName
   * @param {Array<string>} keywordList
   */

/**
   * Compiles an individual mode
   *
   * This can raise an error if the mode contains certain detectable known logic
   * issues.
   * @param {Mode} mode
   * @param {CompiledMode | null} [parent]
   * @returns {CompiledMode | never}
   */

/**
   * Core highlighting function.
   *
   * OLD API
   * highlight(lang, code, ignoreIllegals, continuation)
   *
   * NEW API
   * highlight(code, {lang, ignoreIllegals})
   *
   * @param {string} codeOrLanguageName - the language to use for highlighting
   * @param {string | HighlightOptions} optionsOrCode - the code to highlight
   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
   *
   * @returns {HighlightResult} Result - an object that represents the result
   * @property {string} language - the language name
   * @property {number} relevance - the relevance score
   * @property {string} value - the highlighted HTML code
   * @property {string} code - the original raw code
   * @property {CompiledMode} top - top of the current mode stack
   * @property {boolean} illegal - indicates whether any illegal matches were found
  */

/**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/

/**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */

/**
   * DEPRECATED
   * @param {HighlightedHTMLElement} el
   */

/**
   * Determines if a given language has auto-detection enabled
   * @param {string} name - name of the language
   */

/**
   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
   * the content and find matches.
   *
   * @param {CompiledMode} mode
   * @returns {ResumableMultiRegex}
   */

/**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/

/**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/

/**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/

/**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/

/**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/

/**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
   **/

/**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/

/**
   * Match#index -> Number
   *
   * First position of matched string.
   **/

/**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/

/**
   * Match#raw -> String
   *
   * Matched string.
   **/

/**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/

/**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/

/**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/

/**
   * Notifies about nodes that were created during the patch operation.
   */

/**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/

/**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/

/**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/

/**
   * Register a language grammar module
   *
   * @param {string} languageName
   * @param {LanguageFn} languageDefinition
   */

/**
   * Remove a language grammar module
   *
   * @param {string} languageName
   */

/**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/

/**
   * Takes a string like "<Booger" and checks to see
   * if we can find a matching "</Booger" later in the
   * content.
   * @param {RegExpMatchArray} match
   * @param {{after:number}} param1
   */

/**
   * Tests a language name to see if highlighting should be skipped
   * @param {string} languageName
   */

/**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/

/**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/

/**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/

/**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/

/**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/

/**
   * Token#info -> String
   *
   * Additional information:
   *
   * - Info string for "fence" tokens
   * - The value "auto" for autolink "link_open" and "link_close" tokens
   * - The string value of the item marker for ordered-list "list_item_open" tokens
   **/

/**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/

/**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/

/**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/

/**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/

/**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/

/**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/

/**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/

/**
   * Updates highlight.js global options with the passed options
   *
   * @param {Partial<HLJSOptions>} userOptions
   */

/**
   * Upgrades the old highlightBlock plugins to the new
   * highlightElement API
   * @param {HLJSPlugin} plugin
   */

/**
   * auto-highlights all pre>code elements on the page
   */

/**
   * private highlight that's used internally and does not fire callbacks
   *
   * @param {string} languageName - the language to use for highlighting
   * @param {string} codeToHighlight - the code to highlight
   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
   * @param {CompiledMode?} [continuation] - current continuation mode, if any
   * @returns {HighlightResult} - result of the highlight operation
  */

/**
   * returns a valid highlight result, without actually doing any actual work,
   * auto highlight starts with this and it's possible for small snippets that
   * auto-detection may not find a better match
   * @param {string} code
   * @returns {HighlightResult}
   */

/**
   * returns the accumulated buffer
  */

/**
  Currently this is all private API, but this is the minimal API necessary
  that an Emitter must implement to fully support the parser.

  Minimal interface:

  - addKeyword(text, kind)
  - addText(text)
  - addSublanguage(emitter, subLanguageName)
  - finalize()
  - openNode(kind)
  - closeNode()
  - closeAllNodes()
  - toHTML()

*/

/**
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:
   - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - secondBest (object with the same structure for second-best heuristically
    detected language, may be absent)
     @param {string} code
    @param {Array<string>} [languageSubset]
    @returns {AutoHighlightResult}
  */

/**
 *
 * @type {CompilerExt}
 */

/**
 * @implements {Emitter}
 */

/**
 * @param  nameOrCtor The Element's tag or constructor.
 * @param  key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 * @param varArgs, Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return The corresponding Element.
 */

/**
 * @param  node The node to start at, inclusive.
 * @param  root The root ancestor to get until, exclusive.
 * @return The ancestry of DOM nodes.
 */

/**
 * @param element The Element to diff the attrs for.
 * @param data The NodeData associated with the Element.
 */

/**
 * @param name The name of the attribute. For example "tabindex" or
 *    "xlink:href".
 * @returns The namespace to use for the attribute, or null if there is
 * no namespace.
 */

/**
 * @param newContext The current patch context.
 */

/**
 * @param node The node to check.
 * @returns True if the NodeData already exists, false otherwise.
 */

/**
 * @param node The node to get the activeElement for.
 * @returns The activeElement in the Document or ShadowRoot
 *     corresponding to node, if present.
 */

/**
 * @param this
 * @returns The root node of the DOM tree that contains this node.
 */

/**
 * @param { Array<string | RegExp | Object> } args
 * @returns {object}
 */

/**
 * @param {(string | RegExp)[]} regexps
 * @param {{joinWith: string}} opts
 * @returns {string}
 */

/**
 * @param {...(RegExp | string) } args
 * @returns {string}
 */

/**
 * @param {CompiledMode} mode
 */

/**
 * @param {HLJSApi} hljs
 * @returns {LanguageDetail}
 * */

/**
 * @param {RegExp | string } re
 * @returns {string}
 */

/**
 * @param {RegExp | string} re
 * @returns {number}
 */

/**
 * @param {string} message
 */

/**
 * @param {string} value
 * @returns {RegExp}
 * */

/**
 * @param {string} value
 * @returns {string}
 */

/**
 * @preserve
 * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0.
 */

/**
 * @return The Node that will be evaluated for the next instruction.
 */

/**
 * @return The next Node to be patched.
 */

/**
 * @returns The current Element being patched.
 */

/**
 * @type {Record<string, boolean>}
 */

/**
 * @typedef {object} Renderer
 * @property {(text: string) => void} addText
 * @property {(node: Node) => void} openNode
 * @property {(node: Node) => void} closeNode
 * @property {() => string} value
 */

/**
 * A cached reference to the hasOwnProperty function.
 */

/**
 * A constructor function that will create blank objects.
 */

/**
 * A context object keeps track of the state of a patch.
 */

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */

/**
 * A publicly mutable object to provide custom mutators for attributes.
 * NB: The result of createMap() has to be recast since closure compiler
 * will just assume attributes is "any" otherwise and throws away
 * the type annotation set by tsickle.
 */

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */

/**
 * Aligns the virtual Node definition with the actual DOM, moving the
 * corresponding DOM node to the correct location or creating it if necessary.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 */

/**
 * Allow `illegal` to contain an array of illegal values
 * @type {CompilerExt}
 */

/**
 * Allows recursive regex expressions to a given depth
 *
 * ie: recurRegex("(abc~~~)", /~~~/g, 2) becomes:
 * (abc(abc(abc)))
 *
 * @param {string} re
 * @param {RegExp} substitution (should be a g mode regex)
 * @param {number} depth
 * @returns {string}``
 */

/**
 * Allows you to define a key after an elementOpenStart. This is useful in
 * templates that define key after an element has been opened ie
 * `<div key('foo')></div>`.
 * @param key The key to use for the next call.
 */

/**
 * Any of the passed expresssions may match
 *
 * Creates a huge this | this | that | that match
 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
 * @returns {string}
 */

/**
 * Applies a property to a given Element.
 * @param el The element to apply the property to.
 * @param name The property's name.
 * @param value The property's value.
 */

/**
 * Applies a style to an Element. No vendor prefix expansion is done for
 * property names/values.
 * @param el The Element to apply the style for.
 * @param name The attribute's name.
 * @param  style The style to set. Either a string of css or an object
 *     containing property-value pairs.
 */

/**
 * Applies a value to a style declaration. Supports CSS custom properties by
 * setting properties containing a dash using CSSStyleDeclaration.setProperty.
 * @param style A style declaration.
 * @param prop The property to apply. This can be either camelcase or dash
 *    separated. For example: "backgroundColor" and "background-color" are both
 *    supported.
 * @param value The value of the property.
 */

/**
 * Applies an attribute or property to a given Element. If the value is null
 * or undefined, it is removed from the Element. Otherwise, the value is set
 * as an attribute.
 * @param el The element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value.
 */

/**
 * Applies the current static attributes to the currently open element. Note:
 * statics should be applied before calling `applyAtrs`.
 * @param statics The statics to apply to the current element.
 */

/**
 * Applies the currently buffered attrs to the currently open element. This
 * clears the buffered attributes.
 */

/**
 * Applies the statics. When importing an Element, any existing attributes that
 * match a static are converted into a static attribute.
 * @param node The Element to apply statics for.
 * @param data The NodeData associated with the Element.
 * @param statics The statics array.
 */

/**
 * Asserts that a value exists and is not null or undefined. goog.asserts
 * is not used in order to avoid dependencies on external code.
 * @param val The value to assert is truthy.
 * @returns The value.
 */

/**
 * Buffers an attribute, which will get applied during the next call to
 * `elementOpen`, `elementOpenEnd` or `applyAttrs`.
 * @param name The of the attribute to buffer.
 * @param value The value of the attribute to buffer.
 */

/**
 * Calculates the diff between previous and next values, calling the update
 * function when an item has changed value. If an item from the previous values
 * is not present in the the next values, the update function is called with a
 * value of `undefined`.
 * @param prev The previous values, alternating name, value pairs.
 * @param next The next values, alternating name, value pairs.
 * @param updateCtx The context for the updateFn.
 * @param updateFn A function to call when a value has changed.
 */

/**
 * Calls the appropriate attribute mutator for this attribute.
 * @param el The Element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value. If the value is an object or
 *     function it is set on the Element, otherwise, it is set as an HTML
 *     attribute.
 */

/**
 * Changes to the first child of the current node.
 */

/**
 * Changes to the next sibling of the current node.
 */

/**
 * Changes to the parent of the current node, removing any unvisited children.
 */

/**
 * Checks if the node is an Element. This is faster than an instanceof check.
 * @param node The node to check.
 * @return Whether or not the node is an Element.
 */

/**
 * Checks if the node is the root of a document. This is either a Document
 * or ShadowRoot. DocumentFragments are included for simplicity of the
 * implementation, though we only want to consider Documents or ShadowRoots.
 * @param node The node to check.
 * @return True if the node the root of a document, false otherwise.
 */

/**
 * Checks that a call to patchOuter actually patched the element.
 * @param maybeStartNode The value for the currentNode when the patch
 *     started.
 * @param maybeCurrentNode The currentNode when the patch finished.
 * @param expectedNextNode The Node that is expected to follow the
 *    currentNode after the patch;
 * @param expectedPrevNode The Node that is expected to preceed the
 *    currentNode after the patch.
 */

/**
 * Checks whether or not the current node matches the specified nameOrCtor and
 * key. This uses the specified match function when creating the patcher.
 * @param matchNode A node to match the data to.
 * @param nameOrCtor The name or constructor to check for.
 * @param key The key used to identify the Node.
 * @return True if the node matches, false otherwise.
 */

/**
 * Clears all caches from a node and all of its children.
 * @param node The Node to clear the cache for.
 */

/**
 * Clears out any unvisited Nodes in a given range.
 * @param maybeParentNode
 * @param startNode The node to start clearing from, inclusive.
 * @param endNode The node to clear until, exclusive.
 */

/**
 * Closes an open tag started with elementOpenStart.
 * @return The corresponding Element.
 */

/**
 * Closes an open virtual Element.
 *
 * @param nameOrCtor The Element's tag or constructor.
 * @return The corresponding Element.
 */

/**
 * Closes the currently open Element, removing any unvisited children if
 * necessary.
 * @returns The Element that was just closed.
 */

/**
 * Compiles a language definition result
 *
 * Given the raw result of a language definition (Language), compiles this so
 * that it is ready for highlighting code.
 * @param {Language} language
 * @returns {CompiledLanguage}
 */

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */

/**
 * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/

/**
 * Creates a Node and marking it as created.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 * @return The newly created node.
 */

/**
 * Creates a Text Node.
 * @param doc The document with which to create the Element.
 * @returns The newly created Text.
 */

/**
 * Creates a patcher that patches an Element with the the provided function.
 * Exactly one top level element call should be made corresponding to `node`.
 * @param patchConfig The config to use for the patch.
 * @returns The created function for patching an Element.
 */

/**
 * Creates a patcher that patches the document starting at node with a
 * provided function. This function may be called during an existing patch operation.
 * @param patchConfig The config to use for the patch.
 * @returns The created function for patching an Element's children.
 */

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */

/**
 * Creates an Element and initializes the NodeData.
 * @param doc The document with which to create the Element.
 * @param parent The parent of new Element.
 * @param nameOrCtor The tag or constructor for the Element.
 * @param key A key to identify the Element.
 * @returns The newly created Element.
 */

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */

/**
 * Creates an array for a desired initial size. Note that the array will still
 * be empty.
 * @param initialAllocationSize The initial size to allocate.
 * @returns An empty array, with an initial allocation for the desired size.
 */

/**
 * Creates an map object without a prototype.
 * @returns An Object that can be used as a map.
 */

/**
 * Declares a virtual Element at the current location in the document that has
 * no children.
 * @param nameOrCtor The Element's tag or constructor.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 * @param varArgs Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return The corresponding Element.
 */

/**
 * Declares a virtual Element at the current location in the document. This
 * corresponds to an opening tag and a elementClose tag is required. This is
 * like elementOpen, but the attributes are defined using the attr function
 * rather than being passed as arguments. Must be folllowed by 0 or more calls
 * to attr, then a call to elementOpenEnd.
 * @param nameOrCtor The Element's tag or constructor.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 */

/**
 * Declares a virtual Text at this point in the document.
 *
 * @param value The value of the Text.
 * @param varArgs
 *     Functions to format the value which are called only when the value has
 *     changed.
 * @return The corresponding text node.
 */

/**
 * Determines if a given keyword is common or not
 *
 * @param {string} keyword */

/**
 * Determines if a mode has a dependency on it's parent or not
 *
 * If a mode does have a parent dependency then often we need to clone it if
 * it's used in multiple places so that each copy points to the correct parent,
 * where-as modes without a parent can often safely be re-used at the bottom of
 * a mode chain.
 *
 * @param {Mode | null} mode
 * @returns {boolean} - is there a dependency on the parent?
 * */

/**
 * Determines if a node needs to be wrapped in <span>
 *
 * @param {Node} node */

/**
 * Does lexeme start with a regular expression match at the beginning
 * @param {RegExp} re
 * @param {string} lexeme
 */

/**
 * Expands a mode or clones it if necessary
 *
 * This is necessary for modes with parental dependenceis (see notes on
 * `dependencyOnParent`) and for nodes that have `variants` - which must then be
 * exploded into their own individual modes at compile time.
 *
 * @param {Mode} mode
 * @returns {Mode | Mode[]}
 * */

/**
 * Finds the matching node, starting at `node` and looking at the subsequent
 * siblings if a key is used.
 * @param matchNode The node to start looking at.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 * @returns The matching Node, if any exists.
 */

/**
 * Flushes the changes buffer, calling the functions for each change.
 */

/**
 * Gets the key for a Node. note that the Node should have been imported
 * by now.
 * @param node The node to check.
 * @returns The key used to create the node.
 */

/**
 * Gets the namespace to create an element (of a given tag) in.
 * @param tag The tag to get the namespace for.
 * @param parent The current parent Node, if any.
 * @returns The namespace to use,
 */

/**
 * Gets the path of nodes that contain the focused node in the same document as
 * a reference node, up until the root.
 * @param node The reference node to get the activeElement for.
 * @param root The root to get the focused path until.
 * @returns The path of focused parents, if any exist.
 */

/**
 * Given raw keywords from a language definition, compile them.
 *
 * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
 * @param {boolean} caseInsensitive
 */

/**
 * Imports node and its subtree, initializing caches.
 * @param node The Node to import.
 */

/**
 * Imports single node and its subtree, initializing caches, if it has not
 * already been imported.
 * @param node The node to import.
 * @param fallbackKey A key to use if importing and no key was specified.
 *    Useful when not transmitting keys from serverside render and doing an
 *    immediate no-op diff.
 * @returns The NodeData for the node.
 */

/**
 * Initializes a NodeData object for a Node.
 * @param node The Node to initialized data for.
 * @param nameOrCtor The NameOrCtorDef to use when diffing.
 * @param key The Key for the Node.
 * @param text The data of a Text node, if importing a Text node.
 * @returns A NodeData object with the existing attributes initialized.
 */

/**
 * Keeps track of information needed to perform diffs for a given DOM node.
 */

/**
 * Keeps track whether or not we are in an attributes declaration (after
 * elementOpenStart, but before elementOpenEnd).
 */

/**
 * Keeps track whether or not we are in an element that should not have its
 * children cleared.
 */

/**
 * Like insertBefore, but instead instead of moving the desired node, instead
 * moves all the other nodes after.
 * @param parentNode
 * @param node
 * @param referenceNode
 */

/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/

/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/

/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/

/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/

/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/

/**
 * Makes sure that a patch closes every node that it opened.
 * @param openElement
 * @param root
 */

/**
 * Makes sure that no children elements have been declared yet in the current
 * element.
 * @param functionName The name of the caller, for the error message.
 * @param previousNode
 */

/**
 * Makes sure that node being outer patched has a parent node.
 * @param parent
 */

/**
 * Makes sure that tags are correctly nested.
 * @param currentNameOrCtor
 * @param nameOrCtor
 */

/**
 * Makes sure that the caller is not inside an element that has declared skip.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the caller is not where attributes are expected.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the caller is where attributes are expected.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the current node is an Element with a matching nameOrCtor and
 * key.
 *
 * @param nameOrCtor The tag or constructor for the Element.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @return The corresponding Element.
 */

/**
 * Makes sure that there is a current patch context.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure the current node is a Text node and creates a Text node if it is
 * not.
 * @returns The Text node that was aligned or created.
 */

/**
 * Makes sure the patch closes virtual attributes call
 */

/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/

/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/

/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/

/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/

/**
 * Records the element's attributes.
 * @param node The Element that may have attributes
 * @param data The Element's data
 */

/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/

/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/

/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/

/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/

/**
 * Renumbers labeled scope names to account for additional inner match
 * groups that otherwise would break everything.
 *
 * Lets say we 3 match scopes:
 *
 *   { 1 => ..., 2 => ..., 3 => ... }
 *
 * So what we need is a clean match like this:
 *
 *   (a)(b)(c) => [ "a", "b", "c" ]
 *
 * But this falls apart with inner match groups:
 *
 * (a)(((b)))(c) => ["a", "b", "b", "b", "c" ]
 *
 * Our scopes are now "out of alignment" and we're repeating `b` 3 times.
 * What needs to happen is the numbers are remapped:
 *
 *   { 1 => ..., 2 => ..., 5 => ... }
 *
 * We also need to know that the ONLY groups that should be output
 * are 1, 2, and 5.  This function handles this behavior.
 *
 * @param {CompiledMode} mode
 * @param {Array<RegExp | string>} regexes
 * @param {{key: "beginScope"|"endScope"}} opts
 */

/**
 * Retrieves the NodeData object for a Node, creating it if necessary.
 * @param node The node to get data for.
 * @param fallbackKey A key to use if importing and no key was specified.
 *    Useful when not transmitting keys from serverside render and doing an
 *    immediate no-op diff.
 * @returns The NodeData for the node.
 */

/**
 * Returns a patcher function that sets up and restores a patch context,
 * running the run function with the provided data.
 * @param run The function that will run the patch.
 * @param patchConfig The configuration to use for the patch.
 * @returns The created patch function.
 */

/**
 * Returns the proper score for a given keyword
 *
 * Also takes into account comment keywords, which will be scored 0 UNLESS
 * another score has been manually assigned.
 * @param {string} keyword
 * @param {string} [providedScore]
 */

/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/

/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/

/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/

/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Skip a match if it has a preceding dot
 *
 * This is used for `beginKeywords` to prevent matching expressions such as
 * `bob.keyword.do()`. The mode compiler automatically wires this up as a
 * special _internal_ 'on:begin' callback for modes with `beginKeywords`
 * @param {RegExpMatchArray} match
 * @param {CallbackResponse} response
 */

/**
 * Skips the children in a subtree, allowing an Element to be closed without
 * clearing out the children.
 */

/**
 * TODO(sparhami) We should just export argsBuilder directly when Closure
 * Compiler supports ES6 directly.
 * @returns The Array used for building arguments.
 */

/**
 * TODO(sparhami) We should just export attrsBuilder directly when Closure
 * Compiler supports ES6 directly.
 * @returns The Array used for building arguments.
 */

/**
 * TODO(tomnguyen): This is a bit silly and really needs to be better typed.
 * @param fn A function to call.
 * @param a The first argument to the function.
 * @param b The second argument to the function.
 * @param c The third argument to the function.
 */

/**
 * The default match function to use, if one was not specified when creating
 * the patcher.
 * @param matchNode The node to match against, unused.
 * @param nameOrCtor The name or constructor as declared.
 * @param expectedNameOrCtor The name or constructor of the existing node.
 * @param key The key as declared.
 * @param expectedKey The key of the existing node.
 * @returns True if the node matches, false otherwise.
 */

/**
 * The name of the HTML attribute that holds the element key
 * (e.g. `<div key="foo">`). The attribute value, if it exists, is then used
 * as the default key when importing an element.
 * If null, no attribute value is used as the default key.
 */

/**
 * The offset in the virtual element declaration where the attributes are
 * specified.
 */

/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/

/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/

/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/

/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/

/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/

/**
 * Truncates an array, removing items up until length.
 * @param arr The array to truncate.
 * @param length The new length of the array.
 */

/**
 * Updates a single attribute on an Element.
 * @param el The Element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value. If the value is an object or
 *     function it is set on the Element, otherwise, it is set as an HTML
 *     attribute.
 */

/**
 * Updates the state of being in a skip element.
 * @param value Whether or not the patch is skipping the children of a
 *    parent node.
 * @return the previous value.
 */

/**
 * Updates the state of being in an attribute declaration.
 * @param value Whether or not the patch is in an attribute declaration.
 * @return the previous value.
 */

/**
 * Used to keep track of the previous values when a 2-way diff is necessary.
 * This object is cleared out and reused.
 */

/**
 * Used to keep track of the previous values when a 2-way diff is necessary.
 * This object is reused.
 * TODO(sparhamI) Scope this to a patch so you can call patch from an attribute
 * update.
 */

/**
 * Used to prevent property collisions between our "map" and its prototype.
 * @param map The map to check.
 * @param property The property to check.
 * @return Whether map has property.
 */

/**
 * `beginKeywords` syntactic sugar
 * @type {CompilerExt}
 */

/**
 * `match` to match a single expression for readability
 * @type {CompilerExt}
 */

/**
 * class LinkifyIt
 **/

/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/

/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/

/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * class Token
 **/

/**
 * new Core()
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre class="hljs"><code>' +
 *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/

/**
 * new ParserBlock()
 **/

/**
 * new ParserInline()
 **/

/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/

/**
 * new Ruler()
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/

/**
 * performs a shallow merge of multiple objects into one
 *
 * @template T
 * @param {T} original
 * @param {Record<string,any>[]} objects
 * @returns {T} a single new object
 */

/**
 * provides the default 1 relevance to all modes
 * @type {CompilerExt}
 */

/**
 * this exists only to allow `scope: {}` to be used beside `match:`
 * Otherwise `beginScope` would necessary and that would look weird

  {
    match: [ /def/, /\w+/ ]
    scope: { 1: "keyword" , 2: "title" }
  }

 * @param {CompiledMode} mode
 */

/**
@typedef {import('highlight.js').CallbackResponse} CallbackResponse
@typedef {import('highlight.js').CompilerExt} CompilerExt
*/

/**
@typedef {import('highlight.js').Mode} Mode
@typedef {import('highlight.js').CompiledMode} CompiledMode
@typedef {import('highlight.js').CompiledScope} CompiledScope
@typedef {import('highlight.js').Language} Language
@typedef {import('highlight.js').HLJSApi} HLJSApi
@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
@typedef {import('highlight.js').PluginEvent} PluginEvent
@typedef {import('highlight.js').HLJSOptions} HLJSOptions
@typedef {import('highlight.js').LanguageFn} LanguageFn
@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement
@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext
@typedef {import('highlight.js/private').MatchType} MatchType
@typedef {import('highlight.js/private').KeywordData} KeywordData
@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch
@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError
@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult
@typedef {import('highlight.js').HighlightOptions} HighlightOptions
@typedef {import('highlight.js').HighlightResult} HighlightResult
*/

/**
@typedef {import('highlight.js').Mode} Mode
@typedef {import('highlight.js').CompiledMode} CompiledMode
@typedef {import('highlight.js').Language} Language
@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage
*/

/**  */

/** */

/** @implements CallbackResponse */

/** @param {Node} node */

/** @param {string} kind */

/** @param {string} s */

/** @type CompiledMode */

/** @type DataNode */

/** @type HLJSOptions */

/** @type HTMLElement */

/** @type HighlightResult */

/** @type KeywordDict */

/** @type LanguageFn */

/** @type Mode */

/** @type Node */

/** @type Record<number,boolean> */

/** @type Record<string,CompiledMode> */

/** @type Record<string,any> */

/** @type string[] */

/** @type { object & {capture?: boolean} }  */

/** @type {AnnotatedError} */

/** @type {BeforeHighlightContext} */

/** @type {CompiledMode} */

/** @type {Language} */

/** @type {ModeCallback} */

/** @type {Record<string, Language>} */

/** @type {Record<string, string>} */

/** @type {RegExp | string} */

/** @type {Renderer} */

/** @type {T} */

/** @type {{type?: MatchType, index?: number, rule?: Mode}}} */

/** @typedef { {capture?: boolean} } RegexEitherOptions */

/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */

/** @typedef {import('highlight.js').CompiledMode} CompiledMode */

/** @typedef {import('highlight.js').Emitter} Emitter */

/** @typedef {import('highlight.js').ModeCallback} ModeCallback */

/** @typedef {import('highlight.js').Mode} Mode */

/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */

/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */

/** @typedef {{kind?: string, sublanguage?: boolean}} Node */

/** @typedef {{walk: (r: Renderer) => void}} Tree */

/** Bootstring parameters */

/** Highest positive signed 32-bit float value */

/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/

/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/

/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/

/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/

/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/

/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/

/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/

/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you will - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/

/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and return list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/

/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/

/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/

/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/

/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/

/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/

/** skip vs abort vs ignore
   *
   * @skip   - The mode is still entered and exited normally (and contains rules apply),
   *           but all content is held and added to the parent buffer rather than being
   *           output when the mode ends.  Mostly used with `sublanguage` to build up
   *           a single large buffer than can be parsed by sublanguage.
   *
   *             - The mode begin ands ends normally.
   *             - Content matched is added to the parent mode buffer.
   *             - The parser cursor is moved forward normally.
   *
   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
   *           never matched) but DOES NOT continue to match subsequent `contains`
   *           modes.  Abort is bad/suboptimal because it can result in modes
   *           farther down not getting applied because an earlier rule eats the
   *           content but then aborts.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is added to the mode buffer.
   *             - The parser cursor is moved forward accordingly.
   *
   * @ignore - Ignores the mode (as if it never matched) and continues to match any
   *           subsequent `contains` modes.  Ignore isn't technically possible with
   *           the current parser implementation.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is ignored.
   *             - The parser cursor is not moved forward.
   */

/************************************************************************/

/******/

/***/

/**/

/*, endLine*/

/*, env */

/*, options, env */

/*, params, ... */

/*, silent*/

/*--------------------------------------------------------------------------*/

/*_root*/

/*eslint max-depth:0*/

/*eslint max-len:0*/

/*eslint no-bitwise:0*/

/*eslint no-labels:0,block-scoped-var:0*/

/*eslint quotes:0*/

/*eslint-disable max-len*/

/*eslint-enable max-len*/

/*from1, from2, from3, ...*/

/*function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
}*/

/*istanbul ignore if*/

//

//                          ^^^^^^^ parse this

//                         ^^ skipping these spaces

//                       ^^^ skipping those spaces

//                  ^^^^^^^ parsing link title

//                ^^ skipping these spaces

//            ^^^^^^^^^^^ parse this

//          ^^^^^^ parsing link destination

//         ^^^ skip optional whitespace here

//         to make extra space appear

//        ^^ skipping these spaces

//       (we can replace it by preventing links from being parsed in

//       [[[[[[[[[[[[[[[[[[[[[foo]()

//       ^ -- position start of line here (tab has width===1)

//       validation mode)

//       when an amount of `[` is exactly equal to `maxNesting + 1`:

//      - - -

//      - this one is a paragraph continuation

//     - item 4

//     /--- resume first regex match here (for [number])

//     3 / something

//     >

//     > test

//     ^ -- position start of line here:

//     ```

//     foo

//     test

//     vv

//     |/---- full match here for [string, "booger", number]

//    (in joyent/node some chars in auth and paths are encoded)

//    - item 3

//    >

//    > current blockquote

//    ^ -- position start of line here + shift bsCount slightly

//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`

//    i.e. in `http://example.org:foo` pathname is `:foo`

//    so `http:\\example.org\` is treated like a relative path

//    which can be constructed using other parts of the url.

//   -

//   - item 2

//   ^ blkIndent position will be here

//   alt: [ name2, name3 ]

//   begin: /\(/,

//   contains: [ hljs.CSS_NUMBER_MODE ]

//   enabled: Boolean,

//   end: /\)/,

//   fn: Function(),

//   follow the '(' with a '?'.

//   interesting elements

//   name: XXX,

//  - AND markers are the same

//  - a

//  - canSplitWord - determine if these markers can be found inside a word

//  - example list

//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)

//  - item 1

//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)

//  - start - position to scan from (it should point at a valid marker);

//  - string       - string to encode

//  - they have adjacent tokens

//  0..25 map to ASCII a..z or A..Z

//  1. an empty line outside:

//  2. an empty line inside:

//  3. another tag:

//  ^^^^^ - calculating total length of this thing

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// "  -  test"

// "Software"), to deal in the Software without restriction, including

// "Zero" preset, with nothing enabled. Useful for manual configuring of simple

// "alt" attr MUST be set, even if empty. Because it's mandatory and

// "false", // keyword literal already

// "get",

// "null",

// "plaintext" stand-in so that the code blocks will still get normal

// "programming" type syntax) this gives us a strong signal that we've

// "set",

// "true", // keyword literal already

// "value" container

// #

// #H:mm[:ss]# (24h Time)

// #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)

// #h[:mm[:ss]] A# (12h Time)

// $keyword = x

// '  >\t  test '

// '  \n' -> hardbreak

// ' >   test '

// ' >\t  test '

// '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'

// 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +

// '{}$%@~+=:' reserved for extentions

// () => {} is more typical in TypeScript

// (?!_) cause 1.5x slowdown

// (c) (C) → ©

// (collapsed reference link and shortcut reference link respectively)

// (due to parsing ambiguity with list)

// (list item is empty, list terminates before "foo"):

// (p) (P) -> §

// (prevents integer overflow in browsers)

// (r) (R) → ®

// (remove this when node v10 is no longer supported).

// (the rest is just indented code block)

// (this avoid a conflict with Object.prototype members,

// (tm) (TM) → ™

// (we’ll still often loose to the css-parser unless there's '//' comment,

// (which will then blow up when regex's `illegal` sees the newline)

// **INTERNAL** Not intended for outside usage

// +- → ±

// - [...] elements, where the meaning of parentheses and escapes change

// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾

// - miltiplication 2 x 4 -> 2 × 4

// - non-matching or lookahead parentheses, which do not capture. These

// - other escape sequences, so we do not misparse escape sequences as

// - return true

// - update `state.line`

// - update `state.pos`

// - update `state.tokens`

// -- → &ndash;, --- → &mdash;

// ---

// ------

// ... → … (also ?.... → ?.., !.... → !..)

// ....booger....

// .keyword()

// .toLowerCase().toUpperCase() should get rid of all differences

// 0-prefixed implicit octal integer, optionally rational and/or imaginary

// 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;

// 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398

// 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398

// 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;

// 1. Match "booger" first, ignore. Also proves that [string] does non match.

// 1. No leading slash in paths,

// 1. anything

// 1. foo " bar " baz - not replaced

// 110xxxxx 10xxxxxx

// 1110xxxx 10xxxxxx 10xxxxxx

// 111110xx 10xxxxxx 10xxxxxx 10xxxxxx

// 2. Backslashes are not replaced with slashes,

// 2. Resume matching for [number]

// 2. checking this line

// 2. foo-"-bar-"-baz - replaced

// 26..35 map to ASCII 0..9

// 3. Match at index + 1 for [string, "booger", number]

// 3. Trailing colon is treated like a part of the path,

// 3. foo"bar"baz     - not replaced

// 4. If #2 and #3 result in matches, which came first?

// 4. Nothing is URL-encoded in the resulting object,

// 5. `url.parse()` does not have `parseQueryString` argument

// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,

// <https://www.php.net/manual/en/book.spl.php>

// <https://www.php.net/manual/en/language.constants.predefined.php>

// <https://www.php.net/manual/en/language.types.type-juggling.php>

// <https://www.php.net/manual/en/reserved.classes.php>

// <https://www.php.net/manual/en/reserved.interfaces.php>

// <https://www.php.net/manual/en/reserved.php>

// <tag ...

// <tag/>

// <tag>

// >>

// ?>

// ???????? → ???, !!!!! → !!!, `,,` → `,`

// @font-face

// @ident@ or $ident$ that might indicate this is not ruby at all

// @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):

// @ts-ignore

// A change may cause this function to be called re-entrantly. Keep track of

// A negative indentation means that this is a paragraph continuation

// A position of the token this delimiter corresponds to.

// Add a slash for self-closing tags, e.g. `<img src="foo" /`

// Add supported submodes to string interpolation.

// Add token name, e.g. `<img`

// Adding the second element, need to change to array.

// Adjust the backreference.

// All non-basic code points < n have been handled already. Find the next

// All possible word characters (everything without punctuation, spaces & controls)

// Allow anything in markdown spec, forbid quote (") at the first position

// Allow letters & digits (http://test1)

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Alternative implementation, for memory.

// An amount of virtual spaces (tabs expanded) between beginning

// Anything after `j` was either moved up already or static.

// Applying first lower then upper case normalizes any character:

// At least give some kind of context to the user

// Avoid `split(regex)` for IE8 compatibility. See #17.

// BACKREF_RE matches an open parenthesis or backreference. To avoid

// Backwards-compat with node 0.10.x

// Binary w/ underscore support

// BinaryIntegerLiteral

// Block ends with either:

// Block quotes

// Block-level tag containing an inline tag.

// Blocks start with a | or > followed by a newline

// Boolean flags that determine if this delimiter could open or close

// Build rules lookup cache

// Build schema condition

// Builtin constants

// But .toLowerCase() doesn't change ϑ (it's already lowercase),

// By default EventEmitters will print a warning if more than 10 listeners are

// CLONE

// CSS language prefix for fenced blocks

// CSSFactory, CSSFactoryT

// Cache last tested result. Used to skip repeating steps on next `match` call.

// Cache the length.

// Cached rule chains.

// Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54

// Can't use built-in modes easily, as we want to use STRING in the meta

// Case 2: line is not inside the blockquote, and the last line was empty.

// Case 3: another tag found.

// Case-insensitive comparison should treat all of them as equivalent.

// Chain can be empty, if rules disabled. But we still have to return Array.

// Changes from joyent/node:

// Char code of the starting marker (number).

// Characters that are never ever allowed in a hostname.

// Check bullet

// Check for listener leak

// Check for underline in setext header

// Check hr marker

// Check if module is in cache

// Check if we need to add a newline after this tag

// Check start

// Clean up tokens after emphasis and strikethrough postprocessing:

// Cleanup

// Code block (4 spaces padded)

// Common Apple frameworks, for relevance boost

// Common regexps

// Commonmark default options

// Compile each schema

// Compile postponed aliases

// Consume .built_in to prevent highlighting properties and methods.

// Consume .keyword to prevent highlighting properties and methods as keywords.

// Control abstraction objects

// Convert '\n' in paragraphs into <br>

// Convert straight quotation marks to typographic ones

// Convert the input in UCS-2 to an array of Unicode code points.

// Copyright Joyent, Inc. and other Node contributors.

// Core state object

// Count matching parentheses.

// Counting embedded language score towards the host language may be disabled

// Create a lookup array where anything but characters in `chars` string

// Create a new module (and put it into the cache)

// Create caches

// Currently restricted by `md.validateLink()` to http/https/ftp

// Currently without astral characters support.

// Cut head if cache was used

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types

// Decimal numbers

// DecimalBigIntegerLiteral

// DecimalFloatingPointLiteral

// DecimalIntegerLiteral

// DecimalLiteral

// Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.

// Decode a generalized variable-length integer into `delta`,

// Decode percent-encoded string.

// Define dynamic patterns

// Defined via punctuation & spaces to save space

// Detect list type and position after marker

// Do minimal possible changes by default. Need to collect feedback prior

// Don't allow single-level domains, because of false positives like '//test'

// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.

// Don't use UCS-2.

// Double + single quotes replacement pairs, when typographer enabled,

// EOL -> fail

// EXPAND

// Element names can contain letters, digits, hyphens, underscores, and periods

// Emits a 'removeListener' event if and only if the listener was removed.

// Enable HTML tags in source

// Enable some language-neutral replacements + quotes beautification

// Encode attributes, e.g. `<img src="foo"`

// Encode unsafe characters with percent-encoding, skipping already

// Escaped identifier

// EventEmitters, we do not listen for `error` events here.

// EventTarget does not have `error` event semantics like Node

// Exceptions for hyphenated keywords

// Exclude params in functions without params

// Execute the module function

// Expose utils & helpers for easy acces from plugins

// Expression keywords prevent 'keyword Name(...)' from being

// FIXME: Support Unicode identifiers.

// FPs, FPsT

// Fake record for guessed links

// Fake token just to render attributes

// Filter disabled & fake schemas

// Final result should be uppercased, because it's later stored in an object

// Finalize list

// Find next character,

// Find previous character,

// Find rule index by name

// Find whitespaces tail of pending chars.

// Finish the basic string with a delimiter unless it's empty.

// First 2 params - rule name & source. Secondary array - list of rules,

// First level - chain name, '' for default.

// Float

// Float32Array, OutT

// Flush pending text

// For any attrs that are dynamic, move them up to the right place.

// For any attrs that are static and have the same value, make sure we do

// For each opening emphasis-like marker find a matching closing one

// For example, here we should insert a newline before blockquote:

// For example, you can use '«»„“' for Russian, '„“‚‘' for German,

// For instance, in the following example, it would match "echo /path/to/home >" as a prompt:

// For validation mode we can terminate immediately

// Found matching closer length.

// Freeze prop if it is an object

// Freeze self

// Function that look like language construct or language construct that look like function:

// Fundamental objects

// Fuzzy link can't be prepended with .:/\- and non punctuation.

// GFM table, https://github.github.com/gfm/#tables-extension-

// Generate markers.

// Generate tokens for input range

// Global internal variables used within the highlight.js library.

// Global options used when within external APIs. This is modified when

// Grammar extensions / plugins

// Grammar extensions allow "syntactic sugar" to be added to the grammar modes

// HTML block

// HTML should not include another raw `<` inside a tag

// HTML5 entities map: { name -> utf16string }

// Handle `@examples` separately to cause all subsequent code

// Handle `@param` to highlight the parameter name following

// Handle the basic code points.

// Hard coded exceptions

// Helper methods, should not be used directly

// Helpers

// Hepler to unify [reference labels].

// Here's an example showing how it happens. Lets take greek letter omega:

// Hex w/ underscore support

// HexIntegerLiteral

// Hexadecimal numbers without fraction and optional binary power

// HexadecimalFloatingPointLiteral

// Highlighter function. Should return escaped HTML,

// Horizontal rule

// IE does not have builtin `{ once: true }` support so we

// Ideally we could tag statics and varArgs as an array where every odd

// Identifiers in R cannot start with `_`, but they can start with `.` if it

// If a fence has heading spaces, they should be removed from its inner block

// If a marker sequence has an odd number of characters, it's splitted

// If any of list item is tight, mark list as tight

// If language exists, inject class gently, without modifying original token.

// If match for this delimiter run failed, we want to set lower bound for

// If nesting level exceeded - skip tail to the end. That's not ordinary

// If not supported schema check requested - terminate

// If one of the delimiters can both open and close emphasis, then the

// If pending text exists - flush it as text token

// If previous delimiter cannot be an opener, we can safely skip

// If result starts with <pre... internal wrapper is skipped.

// If the previous delimiter has the same marker and is adjacent to this one,

// If there is an @ in the hostname, then non-host chars *are* allowed

// If there is no 'error' event listener then throw.

// If this delimiter is matched as a valid opener, `end` will be

// If we are at the matching node, then we are done.

// If we are here - we detected HTML block.

// If we have more than 4 spaces, the indent is 1

// If we're starting a new ordered list right after

// If we're starting a new unordered list right after

// In email addresses, only the domain name should be punycoded. Leave

// In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// Increment state.level and decrement it later to limit recursion.

// Indentation of subsequent lines must be the same to

// Indexed collections

// Initialize the state.

// Inline link

// Inline parser state

// Insert `n` at position `i` of the output.

// Insert a newline between hidden paragraph and subsequent opening

// Insert each marker as a separate text token, and add it to delimiter list

// Integer (base 10)

// Integer (base 16)

// Integer (base 2)

// Integer (base 8)

// Internal state vartiables

// Internationalization

// It costs 10% of performance, but allows extend terminators list, if place it

// It exists only as a hack because blockquotes override bMarks

// It's a high surrogate, and there is a next character.

// It's an unmatched surrogate; only append this code unit, in case the

// It's harmless to do here, because no tokens are created. But ideally,

// It's possible to find something that LOOKS like the start of the

// It's used only when expanding tabs, you can think about it as

// Item become loose if finish with empty line,

// Items did not line up exactly as before, need to make sure old items are

// Iterate list items

// JS handles these with a special rule

// JS use strict rule purposely excludes `asm` which makes no sense

// JSX

// Just a shortcut for bulk export

// Key check is done using double equals as we want to treat a null key the

// Keyed collections

// Keywords that require a leading dot.

// LIFO order

// LegacyOctalIntegerLiteral (does not include underscore separators)

// Length is only used for emphasis-specific "rule of 3",

// Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)

// Let's cut tails like '    ###  ' from the end of string

// Let's roll down till block end.

// Link reference

// Linkifier might send raw hostnames like "example.com", where url

// List marker should have at least 2 chars (digit + dot)

// List marker should have no more than 9 digits

// List of added rules. Each element is:

// List of emphasis-like delimiters for current tag

// List of keywords that may not require parenthesis

// List of valid html blocks names, accorting to commonmark spec

// Lists

// Load & clone RE patterns.

// Lookup in pending chars is bad practice! Don't copy to other rules!

// Low surrogate.

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// Magic constants:

// Main decoding loop: start just after the last delimiter if any basic code

// Main encoding loop:

// Main parser class

// Main rules

// Markdown ASCII punctuation characters.

// Markdown-it plugin to render GitHub-style task lists; see

// Matches tuples as well as the parameter list of a function type.

// Matching numbers immediately following punctuation and operators is

// MathML elements inherit from Element, which does not have style. We cannot

// May be, one day we will add .deepClone() for token and simplify this part, but

// Merge objects

// Metatags and globals:

// More to read about domain names

// Move everything else before the node.

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276

// NOTE: this will cause links to behave incorrectly in the following case,

// Next scan position

// No error code for this since it is a Warning

// No markup, just a relevance booster

// No need for bounds check because we have fake entry on tail.

// NonDecimalIntegerLiteral

// Normalize input string

// Normalize newlines

// Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.

// Note that any invalid chars are also handled, but these

// Note: The comments on the `throw` lines are intentional, they show

// Note: no leading \b because floats can start with a decimal point

// Note: this is equivalent to unicode case folding; unicode normalization

// Nothing found in the cache, scan until the end of the line (or until marker is found)

// Now split string to nodes

// Now we have a portion which is definitely the auth.

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// Obviously not all Emitters should be limited to 10. This function allows

// OctalIntegerLiteral

// Octals w/ underscore support

// On success, rule should:

// Only for relevance, not highlighting.

// Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators

// Operators/punctuation when they're not directly followed by numbers

// Optimize the case of one listener. Don't need the extra array object.

// Optional type

// Other keywords:

// Pad the text with empty lines to ensure the line number mapping is correct

// Paragraph

// Parse backticks

// Parse inlines

// Parse link destination

// Parse link label

// Parse link title

// Parser rules

// Parser state class

// Pending string is stored in concat mode, indexed lookups will cause

// Perl at all like $ident$, @ident@, etc.

// Permission is hereby granted, free of charge, to any person obtaining a

// Prevent -> from being highlighting as an operator.

// Prevents element names from being highlighted as keywords.

// Previously calculated lower bounds (previous fails)

// Proceess '\n'

// Process ![image](<src> "title")

// Process *this* and _that_

// Process [link](<to> "stuff")

// Process autolinks '<protocol:...>'

// Process escaped chars and hardbreaks

// Process html entity - &#123;, &#xAF;, &quot;, ...

// Process html tags

// Process only opening markers

// Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.

// Protocol composition

// Pull that off.

// Push fake entry to simplify cache bounds checks

// Push new token to "stream".

// Quick fail on second char

// Quirk to enforce "hard termination mode" for paragraphs;

// Quite possibly a tag, lets look for a matching closing tag...

// R also supports quoted identifiers, which are near-arbitrary sequences

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)

// RFC 2396: characters not allowed for various reasons.

// Re-assign `events` because a newListener handler could have caused the

// Re-export libraries commonly used in both markdown-it and its plugins,

// Re-order the node into the right position, preserving focus if either

// Ref: https://github.com/highlightjs/highlight.js/issues/2140

// Reference can not terminate anything. This check is for safety only.

// Reference: RFC 3986, RFC 1808, RFC 2396

// Reflection

// Regexps to match html elements

// Relevance boost for the most common assignment form.

// Remove element from array and put another array at those position.

// Replace NULL characters

// Replace content with actual value

// Replace link-like texts with link nodes.

// Replace quotes in the middle of punctuation sequence, but not

// Represent delta as a generalized variable-length integer.

// Reserved classes:

// Reserved interfaces:

// Reset compiled data

// Reset scan cache

// Restore original tShift; this might not be necessary since the parser

// Return the exports of the module

// Return the translated string or fallback to English if the translation is not available

// Review our test case against browsers more comprehensively.

// Roxygen comments

// Ruby i18n

// Ruby/Rails erb

// Rude test fuzzy links by host, for quick deny

// Rule to skip pure text

// Run subparser & write tokens

// SAME position for only: [string, number] but ignoring "booger" (if it

// Scan a sequence of emphasis-like markers, and determine whether

// Scan string until end reached

// Scanned through the end, didn't find anything

// Schemas compiler. Build regexps.

// Search `[-+*][\n ]`, returns next pos after marker on success

// Search `\d+[.)][\n ]`, returns next pos after marker on success

// Search by name and disable

// Search by name and enable

// Search the end of the block

// Second level - diginal anchor for fast filtering by charcodes.

// See details here:

// See the comment in the <style tag about the lookahead pattern

// See: https://github.com/highlightjs/highlight.js/issues/2833

// Set the language you want to use (you can use navigator.language to get the user's language)

// Setting node.data resets the cursor in IE/Edge.

// Shell modifiers

// Should be something like \p{\L\N\S\M} (\w but without `_`)

// Simple .toLowerCase() doesn't normalize 125 code points correctly,

// Simple check to quickly interrupt scan on [link](url) at the start of line.

// Simple typographic replacements

// Since start is found, we can report success here in validation mode

// Skip char codes from given position

// Skip char codes reverse from given position - 1

// Skip content of html tag links

// Skip content of markdown links

// Skip single token by running all rules in validation mode;

// Skip spaces from given position in reverse.

// Skip spaces from given position.

// Skip text characters for text token, place those to pending buffer

// So treat this one as a special case

// So what we do: We execute two matchers, one resuming at the same

// So, we have to move all those markers after subsequent s_close tags.

// Some different length found, put it in cache as upper limit of where closer can be found

// Some tags can terminate paragraph without empty line.

// Special case for a simple path URL

// Special case:

// Special case: only hexadecimal binary powers can contain fractions

// Special generic mutator that's called for any attribute that does not

// Stack of delimiter lists for upper level tags

// Standard PHP library:

// Start list

// Start tokenizing from the actual content (trToken.map[0])

// Stores { start: end } pairs. Useful for backtrack

// Structured data

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// TODO(tomnguyen): assert that this is not null

// TODO:

// TODO: Interpolation can contain any expression, so there's room for improvement here.

// TODO: Remove with v12 API

// TODO: Use multi-class for indentation once available

// TODO: Use multi-class for leading spaces

// TODO: We need negative look-behind support to do this properly

// TODO: apply hinting work similar to what was done in cpp.js

// TODO: could be title.class or title.function

// TODO: find a better solution?

// TODO: fix to allow these to work with sublanguage also

// TODO: how to include ", (, ) without breaking grammars that use these for

// TODO: remove this workaround when CM standard will allow nested links

// TODO: remove v12, deprecated

// TODO: remove with v12

// TODO: remove with version 11.0

// TODO: remove |$ hack when we have proper look-ahead support

// TODO: replace with negative look-behind when available

// TODO: title.function vs title.class

// TRULY found a comment - vs perhaps scanning with the wrong language.

// TS gets a simpler shebang rule than JS

// The above copyright notice and this permission notice shall be included

// The following is because we have no easy way to say "resume scanning at the

// The module cache

// The require function

// The same as abothe but without [0-9]

// These are not language construct (function) but operate on the currently-executing function and can access the current symbol table

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This is necessary because initially emphasis delimiter markers (*, _, ~)

// This is to support parse stuff like "  http://foo.com  \n"

// This line is inside the blockquote.

// This mode covers expression context where we can't expect a function

// Tight list paragraphs

// To avoid recursion in the case that type === "newListener"! Before

// Token class

// Too much nesting, just skip until the end of the paragraph.

// Total length of these series of delimiters.

// Trim and collapse whitespace

// Try all possible rules.

// Try fast path regexp

// Try to check if list is terminated or continued.

// Try to take previous element from cache, if .test() called before

// Type identifier

// URLs are obnoxious.

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Unhandled 'error' event

// Unicode entries:

// Until differentiations are added between `c` and `cpp`, `c` will

// Use '/' to close single tags (<br />)

// Use a cached length. The attributes array is really a live NamedNodeMap,

// Use direct extract instead of `regenerate` to reduse browserified size

// Use large random number as id property of the checkbox.

// Use reversed logic in links start/end match

// Useful for some operations with tokens

// Utilities

// Variadic parameter

// Walk through delimiter list and replace text tokens with tags

// We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.

// We don't want the php closing tag ?> to close the PHP block when

// We found the end of the link, and know for a fact it's a valid link;

// We scan from the end, to keep position when new tags added.

// We should terminate list on style change. Remember first one to compare.

// WebAssembly

// Which ever results in a match first is then used. So this 3-4 step

// Workaround for phantomjs - need regex without /g flag,

// YAML spec allows non-reserved URI characters in tags.

// Zs (unicode class) || [\t\f\v\r\n]

// [Attributes("")]

// [label]:   destination   'title'

// [link](  <href>  "title"  )

// \f

// \n

// \p{\Z\Cc} (white spaces + control)

// \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)

// \r

// \t

// \v

// ^ listIndent position will be here

// _ implied for relevance only, do not highlight

// __beforeBegin is considered private API, internal use only

// `<Array<Array<number>>`, etc.

// `<From extends string>`

// `<T, A extends keyof T, V>`

// `<blah />` (self-closing)

// `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`

// `<something>`

// ```

// `basicLength` is the number of basic code points.

// `begin` when it runs.  Ie, no features have been added, but we've just made

// `class` as a keyword

// `compileMatch` being the perfect small example of now allowing a grammar

// `handledCPCount` is the number of code points that have been handled;

// `i` was supposed to wrap around from `out` to `0`,

// `index` is the index of the next character to be consumed.

// `no-way`, etc.

// `return some()`, `else if()`, `(x*sum(1, 2))`

// `test/markup/r/roxygen.txt` for an example.

// a 0 width match but not a begin/end match so it's not caught by the

// a before plugin can usurp the result completely by providing it's own

// a paragraph (validation mode only)

// a paragraph, first line should not be empty.

// a paragraph, it should start with 1.

// a prior rule that was ignored".

// a space separates the REPL prefix from the actual code

// a word boundary is not sufficient, so instead we check for a word boundary

// actions take two parameters: step (line number), prev_state and alphabet

// add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720

// add non-matched text to the current mode buffer

// added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does

// added to it. This is a useful default which helps finding memory leaks.

// adding it to the listeners, first emit "newListener".

// advance so we aren't stuck in an infinite loop

// after.

// aka. 0x7FFFFFFF or 2^31-1

// aliases

// all prior rules are also skipped which can result in matching the wrong

// allow beforeMatch to act as a "qualifier" for the match

// allow common paired delmins

// allow empty columns before and after table, but not in between columns;

// allow for multiple declarations, e.g.:

// allow matching common delimiters

// allows XML everywhere and makes every XML snippet to have a much larger Markdown

// alphabets are encoded by numbers in 16^N form, presenting its precedence

// also surrounded by parens.

// always allow unencoded alphanumeric characters

// always award the tie to the base language

// an HTML injection attack - it's likely too late if this is already in

// an emphasis.

// an expression such as:

// an incorrect parse, it additionally matches the following:

// an initial tab length, e.g. bsCount=21 applied to string `\t123`

// and .toUpperCase doesn't normalize 6 of them (list of exceptions:

// and .toUpperCase() doesn't change ϴ (already uppercase).

// and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).

// and align row should be exactly the same (the rest of the rows can differ)

// and alphanumeric chars is percent-encoded.

// and for whether this closer can be an opener;

// and increment current pos

// and no other characters are allowed but spaces;

// and remove it afterwards.

// and smartquotes on. Could be either a String or an Array.

// and then paired delmis

// and we don't want to mishandle e.g. `0..hex()`; this should be safe

// and we don't want to mishandle e.g. `fn(.5)`,

// anonymous function

// any character other than `)` as in `url()` will be the start

// are multiples of 3.

// are the ones that are *expected* to be seen, so we fast-path

// are treated as their own separate text tokens. Then emphasis rule either

// argument list of parametric mixins

// array listing

// array ref

// as relevant

// assume that it's an IPv6 address.

// async is optional

// at this point modeBuffer should just be the match

// at this point, either we have an explicit point where the

// atSign can be anywhere.

// attribute value mode

// attribute values

// auth portion cannot go past, or the last @ char is the decider.

// author to write `match` when they desire to match a single expression rather

// autoconvert URL-like texts to links

// avoid conflicts with other rules

// avoids the need to check length every time exec is called

// backreferences so they continue to match.

// backtick length => last seen position

// basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

// be considered part of the block

// because both MUST contain a decimal point and so cannot be confused with

// because emails enclosed in quotes are far more common

// because the namespace name can include `\` and we still want each

// because, if they are pointing at the same token, replaceAt

// begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/

// beginScope just wraps the begin match itself in a scope

// beta configuration options, subject to change, welcome to discuss

// between letter variants.

// binary-literal

// block parser variables

// block-level tag.

// boost for obvious PHP

// both use and namespace still use "old style" rules (vs multi-match)

// bounding ( ).  There could be any number of sub-expressions inside

// break on Less variables @var: ...

// broken by replacing non-ASCII by nothing

// broken sequence

// bundled size (e.g. a browser build).

// but can start with > (markdown blockquote)

// but guard against overflow.

// but if blockquote is terminated by another tag, they shouldn't

// but it could still be a valid reference if we roll back

// but only have a single open/close tag vs one per line

// but we should filter last element, because it means list finish

// by applying a class name

// calling the `hljs.configure` function.

// can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'

// catch ... so it won't trigger the property rule below

// change current state, then restore it after parser subcall

// characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more

// characters that may also include dots.

// check if it's outdented, i.e. it's inside list item and indented

// check that first two markers match and adjacent

// check that last two markers are adjacent (we can safely assume they match)

// check the block quote marker

// chop off from the tail first.

// class Car

// class Car extends vehicle

// classNames in built-in modes.

// close tag

// closing delimiters must not be a multiple of 3 unless both lengths

// closing tag

// collapse all our objects back into the parent object

// collapse two adjacent text nodes

// collect unique names

// comes *before* the @-sign.

// comment - but then if there is no readable text - good chance it is a

// comment delimiters?

// comment within a datatype comment includes no keywords

// common variable name

// compilation

// compile lazily, because "host"-containing variables can change on tlds update.

// compiled once on the first module load.

// complexity.

// considered for a potential match

// console.log("match", match[0], match.rule && match.rule.begin)

// console.log(_line, _state.toString(16), _type.toString(16))  // for test

// console.log(trToken.meta); // for test

// constructor

// containers: ie, `vector <int> rooms (9);`

// context as 'meta-string' and there's no syntax to remove explicitly set

// contextual

// contractions - can't we'd they're let's, etc

// control codes

// convertion to flat mode.

// copy of this software and associated documentation files (the

// correct bounding ( ) before the =>.  There could be any number of

// could be a comma delimited list of params to a function call

// could be a comment in many languages so do not count

// could mess up indices when quote length != 1

// count heading level

// covers label === '' and label === undefined

// css classes applied to them - and one bad language won't break the

// cut lines range from source.

// date plus time

// decent number of iterations yet our index (cursor position in our

// decimal floating-point-literal (subsumes decimal-literal)

// decimal integer/float, optionally exponential or rational, optionally imaginary

// decinteger is optionally imaginary

// decinteger, bininteger, octinteger, hexinteger

// def method_name (end of line)

// def method_name(

// def method_name;

// default to 1 relevance if not specified

// default to space if it's the beginning of the line

// default to space if it's the end of the line

// define __esModule on exports

// define getter functions for harmony exports

// define these here so at least they only have to be

// defined later

// definition and shouldn't highlight anything that looks like one:

// delete node.children;

// delimited by backticks (`…`), which may contain escape sequences. These are

// different parents without issue

// dir()

// disable "rule of 3" length checks meant for emphasis

// distribute, sublicense, and/or sell copies of the Software, and to permit

// do `instanceof HTMLElement` / `instanceof SVGElement`, since el can belong

// do this early so compiler extensions generally don't have to worry about

// do this later so compiler extensions that come earlier have access to the

// doctags shouldn’t be treated as such. See

// does not include {} or HTML tags `</`

// doesn't allow spaces in keywords anyways and we still check for the boundary

// don't have a great class for this?

// dot-operator: only operators that start with a dot are allowed to use dots as

// double quote escape

// double quoted keys

// e.g. allow ` |---| `, disallow ` ---||--- `

// eat !important after mixin call or it will be colored as tag

// eat "if" prior to string so that it won't accidentally be

// eat recursive parens in sub expressions

// eat spaces (not newlines) so we can find

// eat to avoid empty params

// eat up @'s in emails to prevent them to be recognized as doctags

// echo /path/to/home > t.exe

// edge case for when illegal matches $ (end of line) which is technically

// element is a string and every even element is any, but this is hard.

// element to be treated as its own *individual* title

// else: stay in AFTER_COMMENT_2 (`--->`)

// emit removeListener for all listeners on all events

// empty strings for alt or link text

// encode(string, keepEscaped)

// encoded sequences.

// end if another doc comment

// end parens

// ensure the number is not part of an identifier, and we cannot use

// entire highlighter

// equal to its position, otherwise it's `-1`.

// escaped pipe, '\|'

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion

// eslint-disable-next-line no-restricted-syntax

// eslint-disable-next-line no-undefined

// even if a single syntax or parse hits a fatal error

// even if on:end fires an `ignore` it's still possible

// ex:

// excludes method names from keyword processing

// excluding ExponentPart

// existing position but also skip the current rule ONLY". What happens is

// explicit decimal/binary/octal/hexadecimal integer,

// exponentfloat, pointfloat

// export an "instance" of the highlighter

// exports.replaceEntities     = replaceEntities;

// extern void f(int), g(char);

// extra complexity to deal with `enum class` and `enum struct`

// extracted by mini-css-extract-plugin

// fail if list has another type

// fail if terminating block found

// false match and not a comment.

// false under headerless corner case

// far looking only for "number", ignoring potential string matches (or

// fences (``` lang, ~~~ lang)

// figure out if it's got a host

// find regex

// find the first instance of any hostEndingChars

// first

// first character of the second line should be '|', '-', ':',

// first handler (when ignoreIllegals is true)

// first parse unambiguous selectors (i.e. those not starting with tag)

// fixed in v12 (couldn't find any details).

// fixme: it does not include dot for numbers like .5em :(

// flexibility required.

// following conditions:

// for a visual example please see:

// for each marker, each delimiter length modulo 3,

// for exports

// for languages with keywords that include non-word characters checking for

// for the name also

// for visual continuity with `tag {}` and because we

// found valid marker

// found!

// fragment id &ref

// fragment reference *ref

// from keywords

// from spec:

// from the DOM.

// function (/*str, lang*/) { return ''; }

// functions

// future "booger" matches that might be valid.)

// future lookups. This is required to make sure algorithm has linear

// garbage at the end of the line after title,

// generic Less highlighter (used almost everywhere except selectors):

// give it a temporary name if it doesn't have one in the meta-data

// got a fragment string.

// guess schemaless links

// hack to avoid the space from being included. the space is necessary to

// hack: prevents detection of keywords in some circumstances

// handled by simpleSelfClosing rule

// handled in a separate mode. See `test/markup/r/names.txt` for examples.

// hard or soft error

// has already been here, but just to make sure we can do that.

// has()

// have a specific mutator.

// have historically been settled, ie the language that comes first always

// have to do it manually.

// header row will define an amount of columns in the entire table,

// headerIdx is the first delimiter of the current (where closer is) delimiter run

// heading (#, ##, ...)

// helpers

// heredocs

// hexadecimal floating-point-literal (subsumes hexadecimal-literal)

// host or host()

// host-context()

// how the browser resolves relative URLs.

// http://a@b?@c => user:a host:c path:/?@c

// http://a@b@c/ => user:a@b host:c

// http://jgm.github.io/CommonMark/spec.html#html-blocks

// http://serverfault.com/questions/638260/

// http://spec.commonmark.org/0.15/#ascii-punctuation-character

// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10

// https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals

// https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals

// https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals

// https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals

// https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552

// https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411

// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments

// https://github.com/blog/1825-task-lists-in-all-markdown-documents

// https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460

// https://github.com/commonmark/cmark/issues/178#issuecomment-270417442

// https://github.com/highlightjs/highlight.js/issues/1086

// https://github.com/highlightjs/highlight.js/issues/2827

// https://github.com/highlightjs/highlight.js/issues/3149

// https://spec.commonmark.org/0.29/#line-ending

// https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals

// https://yaml.org/spec/1.2/spec.html#id2784064

// i.e. latest empty line should not count

// ie if C++ and Arduino are tied, it's more likely to be C++

// if "booger" is ignored then we'd really need a regex to scan from the

// if (!tableToken.meta.sep) { return false; } // always evaluated true

// if a highlight was requested before DOM was loaded, do now

// if first character is '-', then second character must not be a space

// if hostname begins with [ and ends with ]

// if indent wasn't changed

// if it's indented more than 3 spaces, it should be a code block

// if it's not a basic code point

// if it's not defined (in strikethrough or 3rd party plugins),

// if opening marker is "(", switch it to closing marker ")"

// if we are called too early in the loading process

// if we cannot find a matching closing tag, then we

// if we have dependencies on parents then we need a unique

// if we have variants then essentially "replace" the mode with the variants

// if we increase `i` as we go, then subtract off its starting

// if we still have not hit it, then the entire thing is a host.

// illegal characters that might be inside urls that would tigger the

// illegal match, we do not continue processing

// imagnumber (digitpart-based)

// implementation from standard node.js 'util' module

// in all copies or substantial portions of the Software.

// in the following expressions, \B in the beginning suppresses recognition of ?-sequences

// in the middle of the words, i.e.:

// in which case we don't even need to call highlight

// including ExponentPart

// increase level if we find text `[`, which is not a part of any token

// incrementing `n` each time, so we'll fix that now:

// indent of the current dd block (-1 if there isn't any)

// indent of the current list block (-1 if there isn't any)

// indents for each line (tabs expanded)

// infinite loops are BAD, this is a last ditch catch all. if we have a

// initializers

// inline javascript (or whatever host language) *multiline* string

// input can be a string of keywords, an array of keywords, or a object with

// inside a list, it would be positioned after list marker)

// inside any of the following blocks:

// instance of ourselves, so we can be reused with many

// into opening/closing tags

// into opening/closing tags (which messes up levels inside).

// ipv6 address

// irb(main):001:0>

// is a different step that is not required here.

// is a tag and not a false positive

// is currently an exercise for the caller. :-)

// is not immediately followed by a digit.

// is()

// it also places each individual regular expression into it's own

// it can start an emphasis sequence or end an emphasis sequence.

// it from ending too early by matching another }

// it optimizes skips in **<...>**a**<...>** pathological case

// it will be the same actual JS object

// it's considered a lazy continuation regardless of what's there

// jinja templates Ansible

// join logically computes regexps.join(separator), but fixes the

// jump line-by-line until empty one or EOF

// just be changing the object it was passed

// keep continuations for sub-languages

// keywords that should have no default relevance value

// keywords with less than 3 letters are reduced in relevancy

// labeled as an f-string

// lang()

// language-* takes precedence over non-prefixed class names.

// languages illegal stack

// languages that have serious errors are replaced with essentially a

// larger one:

// lastChar defaults to 0x20

// leading whitespace in a list item is already trimmed off by markdown-it

// leaves them as text (needed to merge with adjacent text) or turns them

// less than said list item:

// lheading (---, ===)

// like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the

// limit conditions when list can interrupt

// line begin offsets for fast jumps

// line end offsets for fast jumps

// line index in src

// lines count

// link to parser instance

// list of common 1 and 2 letter words in English

// looking like plain text, more likely to be a comment

// loose/tight mode for lists

// losing information in the process.

// macros

// make sure tail has spaces only

// make sure we are in the browser environment

// manual scores always win over common keywords

// mark paragraphs tight if needed

// markdown-it default options

// markers belong to same delimiter run if:

// markers can be mixed with spaces, but there should be at least 3 of them

// match at this very spot

// match group, keeping track of the sequencing of those match groups

// match groups that make up the multi-matcher)

// match here to prevent the plain text rule below from gobbling up doctags

// matching these here allows us to treat them more like regular CSS

// means first tab should be expanded to 4-21%4 === 3 spaces.

// merge adjacent text nodes into one and re-calculate all token levels

// merge all the modes/regexes into our main object

// merge those into one strong delimiter.

// methods

// middle of word

// might have found a valid shortcut link, disable reference parsing

// modes. For example, to parse bold/italic only.

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119

// modifier (character varying)

// modifiers

// more likely to be caught in development before making it to production

// most notably, `__proto__`)

// multi line string

// must come before impl/for rule later

// named keys representing scopeName (which can then point to a string or array)

// named tags

// necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */

// needed because we do not have look-behind on the below rule

// needed to allow markdown as a sublanguage to work

// needed to highlight these as strings and to avoid issues with

// negative look-ahead tries to avoid matching patterns that are not

// negative look-behind assertions. So instead we explicitly handle all

// negative-look forward attempts to prevent false matches like:

// nested type?

// never used

// next code unit is the high surrogate of a surrogate pair.

// nextChar defaults to 0x20

// no closing '>'

// no module.id needed

// no module.loaded needed

// no more regexes to potentially match here, so we move the cursor forward one

// no need to move the cursor, we still have additional regexes to try and

// no special dependency issues, just return ourselves

// no trailing \b for pointfloat because it can end with a decimal point

// node or currentNode are focused by making sure that they are not detached

// node.text = node.children.join("");

// normally if you call `tokenize(state, startLine, nextLine)`,

// not a C keyword but is, for all intents and purposes, treated exactly like one.

// not be auto-detected to avoid auto-detect conflicts between C and C++

// not include such support nor can we be sure all the grammars depending

// not listening for removeListener, no need to emit

// not part of an identifier, or start of document

// not set them again.

// not()

// note: this is not an exhaustive list of contractions, just popular ones

// now we prefer to keep things local.

// nth-child()

// nth-col()

// nth-last-child()

// nth-last-col()

// numbers and dates

// numbers are any valid C-style number that

// octal-literal

// of a string, which ends with `)` (from the parent mode)

// of each line (bMarks) and real beginning of that line.

// offsets of the first non-space characters (tabs not expanded)

// old API

// old school shim for old browsers

// on it would desire this behavior

// only regexes not matched previously will now be

// open tag

// opening tag

// operator

// optimization of pairs parse (emphasis, strikes).

// optionally "long" in Python 2

// optionally imaginary

// optionally rational and/or imaginary

// or '' if the source string is not changed and should be escaped externaly.

// or -1 on fail.

// or a line with no comment

// or root check will fail every second time

// or whitespace - this does no harm in any case since our keyword engine

// otherwise it’s identified as tag

// otherwise say they are equal, which has the effect of sorting on

// our matcher is [string, "booger", number]

// output from inside match groups

// paragraph might "eat" one newline after it in nested lists

// paragraphs will look below nextLine for paragraph continuation,

// parser failed to find ']', so it's not a valid link

// parsing a valid shortcut link failed, fallback to reference

// parsing) still 3x behind our index then something is very wrong

// partially expanding tabs in code blocks, e.g '\t\tfoobar'

// pass

// patched tShift masked characters to look like spaces (blockquotes, list markers)

// persons to whom the Software is furnished to do so, subject to the

// pipe separating cells, '|'

// plaintext is always an option

// points were copied; start at the beginning otherwise.

// popular internet URLs

// position, but the second full matcher starting at the position after:

// positive (auto-detect, etc.)

// possible combinations of (operator|punctuation), number.

// prefix is optional with /regex/

// prevent keywords from coloring `type`

// prevent this from getting swallowed up by function

// preventing highlighting. This code is example R code, so nested

// prevents double relevance, the keywords themselves provide

// prevents expressions like `@class` from incorrect flagging

// prevents these from being highlighted `title`

// previously assigned at case 0x00110

// primary tags

// process essentially allows us to say "match at this position, excluding

// production (the code has likely already done its damage by the time

// protocols that always contain a // bit.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// pseudo-selector params

// pull out port.

// quirk for blockquotes, this line should already be checked by that rule

// raw array if they wanted to perhaps manipulate it, etc.

// re-calculate levels after emphasis/strikethrough turns some text nodes

// re-export Token class to use in block rules

// re-export Token class to use in core rules

// recognized as a function definition

// regexp container

// regular keywords

// relative urls

// relevance boost

// relevance comes from kewords

// relevance while preserving the original ordering - which is how ties

// relevance, the mode doesn't need to double it

// remove 'trait' when removed from KEYWORDS

// removed. This should be a rare case.

// renderer

// replace current node

// replace token.content *before* tokens[item.token].content,

// required block content indent (for example, if we are

// resolution will treat //foo/bar as host=foo,path=bar because that's

// restore old state

// return TokenTree._walk(builder, this.rootNode);

// returns `true` if any rule reported success

// returns the end of the label

// rule is not matched multiple times

// rules so everything between the {} gets regular rule highlighting,

// safe/production mode - swallows more errors, tries to keep running

// same as undefined. This should be okay as the only values allowed are

// save cursor state, we could require to rollback later

// scan marker length

// score.

// se we still get relevance credit for JS library classes

// search end of block

// secondary tags

// self is not valid at the top-level

// set offset past spaces and ">"

// set state.tight if we had an empty line before current tag

// setters

// should be placed on proper position for tests.

// should have at least two lines

// should not be `://` & `///`, that protects from errors in protocol name

// should skip all tokens except 'text', 'html_inline' or 'code_inline'

// simply because 1 variable just can't beat 99 properties :)

// since they appear "function like"

// single quoted keys

// sit isolated from other words

// situation and we should not care about content.

// skip disabled methods

// skip heading spaces for next line

// skip leading whitespaces from next line

// skip one optional space after '>'

// skip trailing spaces until the rest of the line

// so all that's left to do is to call tokenizer.

// so even if it's empty, it has to be present.

// so no point trying to find the end of it in silent mode

// so plugins won't have to depend on them explicitly, which reduces their

// so we bail

// so we can't go deleting $pattern from the original on the first

// so we need to re-calculate all offsets to appear as

// so you can force a score of 1 if you really insist

// sometimes they can end up matching nothing at all

// sort base on relevance

// space

// special case: 1"" - count first quote as an inch

// spit the "skipped" character that our regex choked on back into the output sequence

// start of the sequence.

// starts conflicts with endsParent which we need to make sure the child

// starts with domain name. So we prepend http:// in those cases,

// state.blkIndent was non-zero, we now set it to zero,

// states are union (bitwise OR) of its accepted alphabets

// strings below will be fed into the regular `keywords` engine while regex

// strings, null and undefined so the == semantics are not too weird.

// strip [ and ] from the hostname

// sub-expressions inside also surrounded by parens.

// sum of the lengths of the delimiter runs containing the opening and

// sure algorithm has linear complexity (see *_*_*_*_*_... case).

// swallow namespace qualifiers before symbols

// technically this could be HTML, but it smells like a type

// text

// than being forced to use `begin`.  The extension then just moves `match` into

// that the next call knows where to start from.

// that to be increased. Set to zero for unlimited.

// that we might trigger the end node because of a parent mode

// the , gives away that this is not HTML

// the distinction between match/begin

// the entire sequence in future checks. This is required to make

// the experience of writing (and reading grammars) a little bit nicer.

// the first instance of /, ?, ;, or # ends the host.

// the full match begin must be [beforeMatch][begin]

// the host field still retains them, though

// the host is the remaining to the left of the first non-host char

// the interior part of an identifier

// the local part (i.e. everything up to `@`) intact.

// the most similar to tables

// the plugin can change anything in result to suite it

// the plugin can change the desired language or the code to be highlighted

// the portion of the buffer we are consuming. Updates the start pointer so

// them.

// then fall into the scary lookahead-discriminator variant.

// there's a hostname.

// these next two functions are kind of hacky; probably should really be a

// thing. Example of matching "booger":

// this could be a closing quote, rewind the stack to get a match

// this could be a lot of things (in other languages) other than params

// this does not

// this function assumes that first character ("[") already matches;

// this guard makes sure that we have an entire heredoc and not a false

// this happens in compileMode, where this function is called from

// this happens when we have badly behaved rules that have optional matchers to the degree that

// this is *the only* Less specific statement used in most of the sources, so...

// this is purely for cleaner HTML output

// this mode also handles mixin definitions and calls

// this outer rule makes sure we actually have a WHOLE regex and not simply

// this should be ... } else { ... branch

// this should update anywhere keywords is used since

// this tries to find sequences of 3 english words in a row (without any

// this will be extended by TypeScript

// this works

// this would be a code block normally, but after paragraph

// this._events to be assigned to a new object

// to `ParcerInline` property. Probably, will switch to it sometime, such

// to a different document, so just check that it has a style.

// to catch known shells and boost relevancy

// to catch unknown shells but still highlight the shebang

// to have any real relevance

// to lower case

// to move forward https://github.com/markdown-it/linkify-it/issues/1

// to prevent built ins from being confused as the class constructor call

// to prevent it from being confused as the function title

// to prevent it from grabbing the final : in a :: pair

// to prevent keywords from being confused as the function title

// to recognize keyframe 40% etc which are outside the scope of our

// to the left of the last @ sign, unless some host-ending character

// too much like nested array access in so many languages

// traits

// transitions are in the form: {prev_state: {alphabet: next_state}}

// treat beginning of the line as a whitespace

// treat end of the line as a whitespace

// treat next token as start of run,

// tricky since we need to look at the character ahead of a number to

// trim before proceeding.

// trim off any earlier non-relevant match groups (ie, the other regex

// trimming space in "-    \n  3" case, indent is 1 here

// true block-level token with .tag=='label'

// true if this sequence can be a terminator, false otherwise

// try to scan for link with schema - that's the most simple rule

// types or variables

// until the next `@`-tag on its own line to be kept as-is,

// up in Node's output if this results in an unhandled exception.

// uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)

// uppercased versions).

// url should be normalized at this point, and existing entities are decoded

// use 'blockquote' lists for termination because it's

// use contains to gobble up multiple lines to allow the block to be whatever size

// use paragraph to match terminatorRules

// use the second matcher result

// used in lists to determine if they interrupt a paragraph

// used only to properly balance nested parens inside mixin call, def. arg list

// user@server is *always* interpreted as a hostname, and url

// using more strict pattern for higher relevance to increase chances of Less detection.

// usual constant length iteration very difficult to optimize in JITs.

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// valid but infrequent and weird

// validate a little.

// value at the end to obtain `delta`.

// var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

// verbatim tags

// very common convention

// was the first match), a simple resume would scan ahead who knows how

// was there, before, but why?

// we already get points for <, we don't need poitns

// we can default it to 0 to disable those checks.

// we carefully check the opening tag to see if it truly

// we have to count the parens to make sure we actually have the

// we have to count the parens to make sure we actually have the correct

// we know that it's going to be a valid blockquote,

// we may actually need this (12/2020)

// we need a copy because keywords might be compiled multiple times

// we need a null object, which inherit will guarantee

// we need this for now for jSX

// we need this to make sure size of hostname is not

// we need to pair up {} inside our subst to prevent

// we replace non-ASCII char with a temporary placeholder

// we should be all text, no child nodes (unescaped HTML) - this is possibly

// we test again with ASCII char only

// we use _emit to keep track of which match groups are "top-level" to avoid double

// we'd need a separate private state variable for this purpose.

// we're seeing it)... but we yell loudly about this so that hopefully it's

// we've found a 0 width match and we're stuck, so we need to advance

// we've indicated that there is a hostname,

// webpackBootstrap

// whatever else, lower relevance (might not be a link at all)

// where ? is the last character of a preceding identifier, as in: `func?4`

// which can be terminated by this one.

// which exists as a DOM "Host Object" (probably as C++ code). This makes the

// which gets added to `i`. The overflow checking is easier

// which is what we want for page and font-face

// will ignore it

// will result in additional modes being created to scan for those keywords to

// wins in the case of a tie

// with code comments

// with indent=2 becomes '  \tfoobar'

// with zeroing the containing mode relevance. Use case in point is Markdown that

// without limitation the rights to use, copy, modify, merge, publish,

// without requiring any underlying changes to the compiler internals.

// workaround for this case

// wrap-around to considering all matches again

// {

// { // pseudo-selector params

// { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }

// { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },

// { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },

// }

// },

// ~~strike through~~

// ~~~~~~~~

// İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently

//(cheaper check than in onclosetag)

////////////////////////////////////////////////////////////////////////////////

//Parses a complete HTML document and pushes it to the handler

//Resets the parser to a blank state, ready to parse a new HTML document

//TODO add a way to remove current tag

//TODO make events conditional

//Tokenizer event handlers

//alias for backwards compat

//chars removed from _buffer

//else, ignore remaining data

//else: stay in AFTER_CDATA_2 (`]]]>`)

//for entities terminated with a semicolon

//if there is remaining data, emit it in a reasonable way

//nth-last-of-type()

//nth-of-type()

//offset = 1

//parse entity

//parses legacy entities (without trailing semicolon)

//remove 2 trailing chars

//remove everything unnecessary

//self-closing tags will be on the top of the stack

//skip everything until ">"

//the max length of legacy entities is 6

//the min length of legacy entities is 2

//the section just started
