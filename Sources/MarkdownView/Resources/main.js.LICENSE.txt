/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*

For the reasoning behind this please see:
https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

*/

/*

Goals:

SQL is intended to highlight basic/common SQL keywords and expressions

- If pretty much every single SQL server includes supports, then it's a canidate.
- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,
  PostgreSQL) although the list of data types is purposely a bit more expansive.
- For more specific SQL grammars please see:
  - PostgreSQL and PL/pgSQL - core
  - T-SQL - https://github.com/highlightjs/highlightjs-tsql
  - sql_more (core)

 */

/*
        {
          // IPv4 addresses and subnets
          className: 'number',
          variants: [
            {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
            {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
            {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
          ]
        },
        {
          // MAC addresses and DHCP Client IDs
          className: 'number',
          begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
        },
        */

/*
      *	attributes
      */

/*
      *	cdata
      */

/*
      *	comments
      */

/*
      *	declarations
      */

/*
      *	processing instructions
      */

/*
      * entities
      */

/*
      * script
      */

/*
      * special tags
      */

/*
      * style
      */

/*
      The lookahead pattern (?=...) ensures that 'begin' only matches
      '<style' as a single word, followed by a whitespace or an
      ending bracket.
      */

/*
      Why might be find ourselves here?  An potential end match that was
      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.
      (this could be because a callback requests the match be ignored, etc)
       This causes no real harm other than stopping a few times too many.
      */

/*
    A double quote can start either a string or a line comment. Strings are
    ended before the end of a line by another double quote and can contain
    escaped double-quotes and post-escaped line breaks.
     Also, any double quote at the beginning of a line is a comment but we
    don't handle that properly at the moment: any double quote inside will
    turn them into a string. Handling it properly will require a smarter
    parser.
    */

/*
    Created to solve the key deficiently with MultiRegex - there is no way to
    test for multiple matches at a single location.  Why would we need to do
    that?  In the future a more dynamic engine will allow certain matches to be
    ignored.  An example: if we matched say the 3rd regex in a large group but
    decided to ignore it - we'd need to started testing again at the 4th
    regex... but MultiRegex itself gives us no real way to do that.
     So what this class creates MultiRegexs on the fly for whatever search
    position they are needed.
     NOTE: These additional MultiRegex objects are created dynamically.  For most
    grammars most of the time we will never actually need anything more than the
    first MultiRegex - so this shouldn't have too much overhead.
     Say this is our search group, and we match regex3, but wish to ignore it.
       regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0
     What we need is a new MultiRegex that only includes the remaining
    possibilities:
       regex4 | regex5                               ' ie, startAt = 3
     This class wraps all that complexity up in a simple API... `startAt` decides
    where in the array of expressions to start doing the matching. It
    auto-increments, so if a match is found at position 2, then startAt will be
    set to 3.  If the end is reached startAt will return to 0.
     MOST of the time the parser will be setting startAt manually to 0.
  */

/*
  Formal syntax is not published, helpful link:
  https://github.com/kornilova-l/matlab-IntelliJ-plugin/blob/master/src/main/grammar/Matlab.bnf
*/

/*
  This is a fork and modification of Drew McDonald's file (https://github.com/drewmcdonald/stata-highlighting). I have also included a list of builtin commands from https://bugs.kde.org/show_bug.cgi?id=135646.
*/

/*
  This rather scary looking matching of Mathematica numbers is carefully explained by Robert Jacobson here:
  https://wltools.github.io/LanguageSpec/Specification/Syntax/Number-representations/
   */

/*
 Language: Apache Access Log
 Author: Oleg Efimov <efimovov@gmail.com>
 Description: Apache/Nginx Access Logs
 Website: https://httpd.apache.org/docs/2.4/logs.html#accesslog
 Category: web, logs
 Audit: 2020
 */

/*
 Language: ArcGIS Arcade
 Category: scripting
 Author: John Foster <jfoster@esri.com>
 Website: https://developers.arcgis.com/arcade/
 Description: ArcGIS Arcade is an expression language used in many Esri ArcGIS products such as Pro, Online, Server, Runtime, JavaScript, and Python
*/

/*
 Language: Flix
 Category: functional
 Author: Magnus Madsen <mmadsen@uwaterloo.ca>
 Website: https://flix.dev/
 */

/*
 Language: G-code (ISO 6983)
 Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
 Description: G-code syntax highlighter for Fanuc and other common CNC machine tool controls.
 Website: https://www.sis.se/api/document/preview/911952/
 */

/*
 Language: GAMS
 Author: Stefan Bechert <stefan.bechert@gmx.net>
 Contributors: Oleg Efimov <efimovov@gmail.com>, Mikko Kouhia <mikko.kouhia@iki.fi>
 Description: The General Algebraic Modeling System language
 Website: https://www.gams.com
 Category: scientific
 */

/*
 Language: Gherkin
 Author: Sam Pikesley (@pikesley) <sam.pikesley@theodi.org>
 Description: Gherkin is the format for cucumber specifications. It is a domain specific language which helps you to describe business behavior without the need to go into detail of implementation.
 Website: https://cucumber.io/docs/gherkin/
 */

/*
 Language: Groovy
 Author: Guillaume Laforge <glaforge@gmail.com>
 Description: Groovy programming language implementation inspired from Vsevolod's Java mode
 Website: https://groovy-lang.org
 */

/*
 Language: JBoss CLI
 Author: Raphaël Parrëe <rparree@edc4it.com>
 Description: language definition jboss cli
 Website: https://docs.jboss.org/author/display/WFLY/Command+Line+Interface
 Category: config
 */

/*
 Language: Kotlin
 Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.
 Author: Sergey Mashkov <cy6erGn0m@gmail.com>
 Website: https://kotlinlang.org
 Category: common
 */

/*
 Language: N1QL
 Author: Andres Täht <andres.taht@gmail.com>
 Contributors: Rene Saarsoo <nene@triin.net>
 Description: Couchbase query language
 Website: https://www.couchbase.com/products/n1ql
 */

/*
 Language: SQL
 Website: https://en.wikipedia.org/wiki/SQL
 Category: common, database
 */

/*
 Language: Zephir
 Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.
 Author: Oleg Efimov <efimovov@gmail.com>
 Website: https://zephir-lang.com/en
 Audit: 2020
 */

/*
 Language: dsconfig
 Description: dsconfig batch configuration language for LDAP directory servers
 Contributors: Jacob Childress <jacobc@gmail.com>
 Category: enterprise, config
 */

/*
Language: .properties
Contributors: Valentin Aitken <valentin@nalisbg.com>, Egor Rogov <e.rogov@postgrespro.ru>
Website: https://en.wikipedia.org/wiki/.properties
Category: config
*/

/*
Language: 1C:Enterprise
Author: Stanislav Belov <stbelov@gmail.com>
Description: built-in language 1C:Enterprise (v7, v8)
Category: enterprise
*/

/*
Language: ARM Assembly
Author: Dan Panzarella <alsoelp@gmail.com>
Description: ARM Assembly including Thumb and Thumb2 instructions
Category: assembler
*/

/*
Language: AVR Assembly
Author: Vladimir Ermakov <vooon341@gmail.com>
Category: assembler
Website: https://www.microchip.com/webdoc/avrassembler/avrassembler.wb_instruction_list.html
*/

/*
Language: ActionScript
Author: Alexander Myadzel <myadzel@gmail.com>
Category: scripting
Audit: 2020
*/

/*
Language: Ada
Author: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>
Description: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.
             It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).
             The first version appeared in the 80s, but it's still actively developed today with
             the newest standard being Ada2012.
*/

/*
Language: AngelScript
Author: Melissa Geels <melissa@nimble.tools>
Category: scripting
Website: https://www.angelcode.com/angelscript/
*/

/*
Language: Apache config
Author: Ruslan Keba <rukeba@gmail.com>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: https://httpd.apache.org
Description: language definition for Apache configuration files (httpd.conf & .htaccess)
Category: config, web
Audit: 2020
*/

/*
Language: AppleScript
Authors: Nathan Grigg <nathan@nathanamy.org>, Dr. Drang <drdrang@gmail.com>
Category: scripting
Website: https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html
Audit: 2020
*/

/*
Language: Arduino
Author: Stefania Mellai <s.mellai@arduino.cc>
Description: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.
Website: https://www.arduino.cc
*/

/*
Language: AsciiDoc
Requires: xml.js
Author: Dan Allen <dan.j.allen@gmail.com>
Website: http://asciidoc.org
Description: A semantic, text-based document format that can be exported to HTML, DocBook and other backends.
Category: markup
*/

/*
Language: AspectJ
Author: Hakan Ozler <ozler.hakan@gmail.com>
Website: https://www.eclipse.org/aspectj/
Description: Syntax Highlighting for the AspectJ Language which is a general-purpose aspect-oriented extension to the Java programming language.
Audit: 2020
*/

/*
Language: Augmented Backus-Naur Form
Author: Alex McKibben <alex@nullscope.net>
Website: https://tools.ietf.org/html/rfc5234
Audit: 2020
*/

/*
Language: AutoHotkey
Author: Seongwon Lee <dlimpid@gmail.com>
Description: AutoHotkey language definition
Category: scripting
*/

/*
Language: AutoIt
Author: Manh Tuan <junookyo@gmail.com>
Description: AutoIt language definition
Category: scripting
*/

/*
Language: Awk
Author: Matthew Daly <matthewbdaly@gmail.com>
Website: https://www.gnu.org/software/gawk/manual/gawk.html
Description: language definition for Awk scripts
*/

/*
Language: BASIC
Author: Raphaël Assénat <raph@raphnet.net>
Description: Based on the BASIC reference from the Tandy 1000 guide
Website: https://en.wikipedia.org/wiki/Tandy_1000
*/

/*
Language: Backus–Naur Form
Website: https://en.wikipedia.org/wiki/Backus–Naur_form
Author: Oleg Efimov <efimovov@gmail.com>
*/

/*
Language: Bash
Author: vah <vahtenberg@gmail.com>
Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
Website: https://www.gnu.org/software/bash/
Category: common
*/

/*
Language: Batch file (DOS)
Author: Alexander Makarov <sam@rmcreative.ru>
Contributors: Anton Kochkov <anton.kochkov@gmail.com>
Website: https://en.wikipedia.org/wiki/Batch_file
*/

/*
Language: Brainfuck
Author: Evgeny Stepanischev <imbolk@gmail.com>
Website: https://esolangs.org/wiki/Brainfuck
*/

/*
Language: C
Category: common, system
Website: https://en.wikipedia.org/wiki/C_(programming_language)
*/

/*
Language: C#
Author: Jason Diamond <jason@diamond.name>
Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>
Website: https://docs.microsoft.com/en-us/dotnet/csharp/
Category: common
*/

/*
Language: C++
Category: common, system
Website: https://isocpp.org
*/

/*
Language: C/AL
Author: Kenneth Fuglsang Christensen <kfuglsang@gmail.com>
Description: Provides highlighting of Microsoft Dynamics NAV C/AL code files
Website: https://docs.microsoft.com/en-us/dynamics-nav/programming-in-c-al
*/

/*
Language: CMake
Description: CMake is an open-source cross-platform system for build automation.
Author: Igor Kalnitsky <igor@kalnitsky.org>
Website: https://cmake.org
*/

/*
Language: CSP
Description: Content Security Policy definition highlighting
Author: Taras <oxdef@oxdef.info>
Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP

vim: ts=2 sw=2 st=2
*/

/*
Language: CSS
Category: common, css, web
Website: https://developer.mozilla.org/en-US/docs/Web/CSS
*/

/*
Language: Caché Object Script
Author: Nikita Savchenko <zitros.lab@gmail.com>
Category: enterprise, scripting
Website: https://cedocs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls
*/

/*
Language: Cap’n Proto
Author: Oleg Efimov <efimovov@gmail.com>
Description: Cap’n Proto message definition format
Website: https://capnproto.org/capnp-tool.html
Category: protocols
*/

/*
Language: Ceylon
Author: Lucas Werkmeister <mail@lucaswerkmeister.de>
Website: https://ceylon-lang.org
*/

/*
Language: Clean
Author: Camil Staps <info@camilstaps.nl>
Category: functional
Website: http://clean.cs.ru.nl
*/

/*
Language: Clojure
Description: Clojure syntax (based on lisp.js)
Author: mfornos
Website: https://clojure.org
Category: lisp
*/

/*
Language: Clojure REPL
Description: Clojure REPL sessions
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Requires: clojure.js
Website: https://clojure.org
Category: lisp
*/

/*
Language: CoffeeScript
Author: Dmytrii Nagirniak <dnagir@gmail.com>
Contributors: Oleg Efimov <efimovov@gmail.com>, Cédric Néhémie <cedric.nehemie@gmail.com>
Description: CoffeeScript is a programming language that transcompiles to JavaScript. For info about language see http://coffeescript.org/
Category: scripting
Website: https://coffeescript.org
*/

/*
Language: Coq
Author: Stephan Boyer <stephan@stephanboyer.com>
Category: functional
Website: https://coq.inria.fr
*/

/*
Language: Crystal
Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
Website: https://crystal-lang.org
*/

/*
Language: D
Author: Aleksandar Ruzicic <aleksandar@ruzicic.info>
Description: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.
Version: 1.0a
Website: https://dlang.org
Date: 2012-04-08
*/

/*
Language: DNS Zone
Author: Tim Schumacher <tim@datenknoten.me>
Category: config
Website: https://en.wikipedia.org/wiki/Zone_file
*/

/*
Language: Dart
Requires: markdown.js
Author: Maxim Dikun <dikmax@gmail.com>
Description: Dart a modern, object-oriented language developed by Google. For more information see https://www.dartlang.org/
Website: https://dart.dev
Category: scripting
*/

/*
Language: Delphi
Website: https://www.embarcadero.com/products/delphi
*/

/*
Language: Device Tree
Description: *.dts files used in the Linux kernel
Author: Martin Braun <martin.braun@ettus.com>, Moritz Fischer <moritz.fischer@ettus.com>
Website: https://elinux.org/Device_Tree_Reference
Category: config
*/

/*
Language: Diff
Description: Unified and context diff
Author: Vasily Polovnyov <vast@whiteants.net>
Website: https://www.gnu.org/software/diffutils/
Category: common
*/

/*
Language: Django
Description: Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.
Requires: xml.js
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Ilya Baryshev <baryshev@gmail.com>
Website: https://www.djangoproject.com
Category: template
*/

/*
Language: Dockerfile
Requires: bash.js
Author: Alexis Hénaut <alexis@henaut.net>
Description: language definition for Dockerfile files
Website: https://docs.docker.com/engine/reference/builder/
Category: config
*/

/*
Language: Dust
Requires: xml.js
Author: Michael Allen <michael.allen@benefitfocus.com>
Description: Matcher for dust.js templates.
Website: https://www.dustjs.com
Category: template
*/

/*
Language: ERB (Embedded Ruby)
Requires: xml.js, ruby.js
Author: Lucas Mazza <lucastmazza@gmail.com>
Contributors: Kassio Borges <kassioborgesm@gmail.com>
Description: "Bridge" language defining fragments of Ruby in HTML within <% .. %>
Website: https://ruby-doc.org/stdlib-2.6.5/libdoc/erb/rdoc/ERB.html
Category: template
*/

/*
Language: Elixir
Author: Josh Adams <josh@isotope11.com>
Description: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.
Category: functional
Website: https://elixir-lang.org
*/

/*
Language: Elm
Author: Janis Voigtlaender <janis.voigtlaender@gmail.com>
Website: https://elm-lang.org
Category: functional
*/

/*
Language: Erlang
Description: Erlang is a general-purpose functional language, with strict evaluation, single assignment, and dynamic typing.
Author: Nikolay Zakharov <nikolay.desh@gmail.com>, Dmitry Kovega <arhibot@gmail.com>
Website: https://www.erlang.org
Category: functional
*/

/*
Language: Erlang REPL
Author: Sergey Ignatov <sergey@ignatov.spb.su>
Website: https://www.erlang.org
Category: functional
*/

/*
Language: Excel formulae
Author: Victor Zhou <OiCMudkips@users.noreply.github.com>
Description: Excel formulae
Website: https://products.office.com/en-us/excel/
*/

/*
Language: Extended Backus-Naur Form
Author: Alex McKibben <alex@nullscope.net>
Website: https://en.wikipedia.org/wiki/Extended_Backus–Naur_form
*/

/*
Language: F#
Author: Jonas Follesø <jonas@follesoe.no>
Contributors: Troy Kershaw <hello@troykershaw.com>, Henrik Feldt <henrik@haf.se>, Melvyn Laïly <melvyn.laily@gmail.com>
Website: https://docs.microsoft.com/en-us/dotnet/fsharp/
Category: functional
*/

/*
Language: FIX
Author: Brent Bradbury <brent@brentium.com>
*/

/*
Language: Fortran
Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
Website: https://en.wikipedia.org/wiki/Fortran
Category: scientific
*/

/*
Language: GAUSS
Author: Matt Evans <matt@aptech.com>
Description: GAUSS Mathematical and Statistical language
Website: https://www.aptech.com
Category: scientific
*/

/*
Language: GLSL
Description: OpenGL Shading Language
Author: Sergey Tikhomirov <sergey@tikhomirov.io>
Website: https://en.wikipedia.org/wiki/OpenGL_Shading_Language
Category: graphics
*/

/*
Language: GML
Author: Meseta <meseta@gmail.com>
Description: Game Maker Language for GameMaker Studio 2
Website: https://docs2.yoyogames.com
Category: scripting
*/

/*
Language: Go
Author: Stephan Kountso aka StepLg <steplg@gmail.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>
Description: Google go language (golang). For info about language
Website: http://golang.org/
Category: common, system
*/

/*
Language: Golo
Author: Philippe Charriere <ph.charriere@gmail.com>
Description: a lightweight dynamic language for the JVM
Website: http://golo-lang.org/
*/

/*
Language: Gradle
Description: Gradle is an open-source build automation tool focused on flexibility and performance.
Website: https://gradle.org
Author: Damian Mee <mee.damian@gmail.com>
*/

/*
Language: HAML
Requires: ruby.js
Author: Dan Allen <dan.j.allen@gmail.com>
Website: http://haml.info
Category: template
*/

/*
Language: HSP
Author: prince <MC.prince.0203@gmail.com>
Website: https://en.wikipedia.org/wiki/Hot_Soup_Processor
Category: scripting
*/

/*
Language: HTML, XML
Website: https://www.w3.org/XML/
Category: common, web
Audit: 2020
*/

/*
Language: HTTP
Description: HTTP request and response headers with automatic body highlighting
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: protocols, web
Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview
*/

/*
Language: Handlebars
Requires: xml.js
Author: Robin Ward <robin.ward@gmail.com>
Description: Matcher for Handlebars as well as EmberJS additions.
Website: https://handlebarsjs.com
Category: template
*/

/*
Language: Haskell
Author: Jeremy Hull <sourdrums@gmail.com>
Contributors: Zena Treep <zena.treep@gmail.com>
Website: https://www.haskell.org
Category: functional
*/

/*
Language: Haxe
Description: Haxe is an open source toolkit based on a modern, high level, strictly typed programming language.
Author: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)
Contributors: Kenton Hamaluik <kentonh@gmail.com>
Website: https://haxe.org
*/

/*
Language: Hy
Description: Hy is a wonderful dialect of Lisp that’s embedded in Python.
Author: Sergey Sobko <s.sobko@profitware.ru>
Website: http://docs.hylang.org/en/stable/
Category: lisp
*/

/*
Language: IRPF90
Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
Description: IRPF90 is an open-source Fortran code generator
Website: http://irpf90.ups-tlse.fr
Category: scientific
*/

/*
Language: ISBL
Author: Dmitriy Tarasov <dimatar@gmail.com>
Description: built-in language DIRECTUM
Category: enterprise
*/

/*
Language: Inform 7
Author: Bruno Dias <bruno.r.dias@gmail.com>
Description: Language definition for Inform 7, a DSL for writing parser interactive fiction.
Website: http://inform7.com
*/

/*
Language: Intel x86 Assembly
Author: innocenat <innocenat@gmail.com>
Description: x86 assembly language using Intel's mnemonic and NASM syntax
Website: https://en.wikipedia.org/wiki/X86_assembly_language
Category: assembler
*/

/*
Language: JSON
Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: http://www.json.org
Category: common, protocols, web
*/

/*
Language: Java
Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
Category: common, enterprise
Website: https://www.java.com/
*/

/*
Language: JavaScript
Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
Category: common, scripting, web
Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
*/

/*
Language: Julia
Description: Julia is a high-level, high-performance, dynamic programming language.
Author: Kenta Sato <bicycle1885@gmail.com>
Contributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>
Website: https://julialang.org
*/

/*
Language: Julia REPL
Description: Julia REPL sessions
Author: Morten Piibeleht <morten.piibeleht@gmail.com>
Website: https://julialang.org
Requires: julia.js

The Julia REPL code blocks look something like the following:

  julia> function foo(x)
             x + 1
         end
  foo (generic function with 1 method)

They start on a new line with "julia>". Usually there should also be a space after this, but
we also allow the code to start right after the > character. The code may run over multiple
lines, but the additional lines must start with six spaces (i.e. be indented to match
"julia>"). The rest of the code is assumed to be output from the executed code and will be
left un-highlighted.

Using simply spaces to identify line continuations may get a false-positive if the output
also prints out six spaces, but such cases should be rare.
*/

/*
Language: LDIF
Contributors: Jacob Childress <jacobc@gmail.com>
Category: enterprise, config
Website: https://en.wikipedia.org/wiki/LDAP_Data_Interchange_Format
*/

/*
Language: LLVM IR
Author: Michael Rodler <contact@f0rki.at>
Description: language used as intermediate representation in the LLVM compiler framework
Website: https://llvm.org/docs/LangRef.html
Category: assembler
Audit: 2020
*/

/*
Language: LSL (Linden Scripting Language)
Description: The Linden Scripting Language is used in Second Life by Linden Labs.
Author: Builder's Brewery <buildersbrewery@gmail.com>
Website: http://wiki.secondlife.com/wiki/LSL_Portal
Category: scripting
*/

/*
Language: LaTeX
Author: Benedikt Wilde <bwilde@posteo.de>
Website: https://www.latex-project.org
Category: markup
*/

/*
Language: Lasso
Author: Eric Knibbe <eric@lassosoft.com>
Description: Lasso is a language and server platform for database-driven web applications. This definition handles Lasso 9 syntax and LassoScript for Lasso 8.6 and earlier.
Website: http://www.lassosoft.com/What-Is-Lasso
*/

/*
Language: Leaf
Author: Hale Chan <halechan@qq.com>
Description: Based on the Leaf reference from https://vapor.github.io/documentation/guide/leaf.html.
*/

/*
Language: Less
Description: It's CSS, with just a little more.
Author:   Max Mikhailov <seven.phases.max@gmail.com>
Website: http://lesscss.org
Category: common, css, web
*/

/*
Language: Lisp
Description: Generic lisp syntax
Author: Vasily Polovnyov <vast@whiteants.net>
Category: lisp
*/

/*
Language: LiveCode
Author: Ralf Bitter <rabit@revigniter.com>
Description: Language definition for LiveCode server accounting for revIgniter (a web application framework) characteristics.
Version: 1.1
Date: 2019-04-17
Category: enterprise
*/

/*
Language: LiveScript
Author: Taneli Vatanen <taneli.vatanen@gmail.com>
Contributors: Jen Evers-Corvina <jen@sevvie.net>
Origin: coffeescript.js
Description: LiveScript is a programming language that transcompiles to JavaScript. For info about language see http://livescript.net/
Website: https://livescript.net
Category: scripting
*/

/*
Language: Lua
Description: Lua is a powerful, efficient, lightweight, embeddable scripting language.
Author: Andrew Fedorov <dmmdrs@mail.ru>
Category: common, scripting
Website: https://www.lua.org
*/

/*
Language: MEL
Description: Maya Embedded Language
Author: Shuen-Huei Guan <drake.guan@gmail.com>
Website: http://www.autodesk.com/products/autodesk-maya/overview
Category: graphics
*/

/*
Language: MIPS Assembly
Author: Nebuleon Fumika <nebuleon.fumika@gmail.com>
Description: MIPS Assembly (up to MIPS32R2)
Website: https://en.wikipedia.org/wiki/MIPS_architecture
Category: assembler
*/

/*
Language: Makefile
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Joël Porquet <joel@porquet.org>
Website: https://www.gnu.org/software/make/manual/html_node/Introduction.html
Category: common
*/

/*
Language: Markdown
Requires: xml.js
Author: John Crepezzi <john.crepezzi@gmail.com>
Website: https://daringfireball.net/projects/markdown/
Category: common, markup
*/

/*
Language: Matlab
Author: Denis Bardadym <bardadymchik@gmail.com>
Contributors: Eugene Nizhibitsky <nizhibitsky@ya.ru>, Egor Rogov <e.rogov@postgrespro.ru>
Website: https://www.mathworks.com/products/matlab.html
Category: scientific
*/

/*
Language: Maxima
Author: Robert Dodier <robert.dodier@gmail.com>
Website: http://maxima.sourceforge.net
Category: scientific
*/

/*
Language: Mercury
Author: mucaho <mkucko@gmail.com>
Description: Mercury is a logic/functional programming language which combines the clarity and expressiveness of declarative programming with advanced static analysis and error detection features.
Website: https://www.mercurylang.org
*/

/*
Language: Microsoft X++
Description: X++ is a language used in Microsoft Dynamics 365, Dynamics AX, and Axapta.
Author: Dmitri Roudakov <dmitri@roudakov.ru>
Website: https://dynamics.microsoft.com/en-us/ax-overview/
Category: enterprise
*/

/*
Language: Microtik RouterOS script
Author: Ivan Dementev <ivan_div@mail.ru>
Description: Scripting host provides a way to automate some router maintenance tasks by means of executing user-defined scripts bounded to some event occurrence
Website: https://wiki.mikrotik.com/wiki/Manual:Scripting
*/

/*
Language: Mizar
Description: The Mizar Language is a formal language derived from the mathematical vernacular.
Author: Kelley van Evert <kelleyvanevert@gmail.com>
Website: http://mizar.org/language/
Category: scientific
*/

/*
Language: Mojolicious
Requires: xml.js, perl.js
Author: Dotan Dimet <dotan@corky.net>
Description: Mojolicious .ep (Embedded Perl) templates
Website: https://mojolicious.org
Category: template
*/

/*
Language: Monkey
Description: Monkey2 is an easy to use, cross platform, games oriented programming language from Blitz Research.
Author: Arthur Bikmullin <devolonter@gmail.com>
Website: https://blitzresearch.itch.io/monkey2
*/

/*
Language: MoonScript
Author: Billy Quith <chinbillybilbo@gmail.com>
Description: MoonScript is a programming language that transcompiles to Lua.
Origin: coffeescript.js
Website: http://moonscript.org/
Category: scripting
*/

/*
Language: NSIS
Description: Nullsoft Scriptable Install System
Author: Jan T. Sott <jan.sott@gmail.com>
Website: https://nsis.sourceforge.io/Main_Page
*/

/*
Language: NestedText
Description: NestedText is a file format for holding data that is to be entered, edited, or viewed by people.
Website: https://nestedtext.org/
Category: config
*/

/*
Language: Nginx config
Author: Peter Leonov <gojpeg@yandex.ru>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: config, web
Website: https://www.nginx.com
*/

/*
Language: Nim
Description: Nim is a statically typed compiled systems programming language.
Website: https://nim-lang.org
Category: system
*/

/*
Language: Nix
Author: Domen Kožar <domen@dev.si>
Description: Nix functional language
Website: http://nixos.org/nix
*/

/*
Language: Node REPL
Requires: javascript.js
Author: Marat Nagayev <nagaevmt@yandex.ru>
Category: scripting
*/

/*
Language: OCaml
Author: Mehdi Dogguy <mehdi@dogguy.org>
Contributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>
Description: OCaml language definition.
Website: https://ocaml.org
Category: functional
*/

/*
Language: Objective-C
Author: Valerii Hiora <valerii.hiora@gmail.com>
Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
Website: https://developer.apple.com/documentation/objectivec
Category: common
*/

/*
Language: OpenSCAD
Author: Dan Panzarella <alsoelp@gmail.com>
Description: OpenSCAD is a language for the 3D CAD modeling software of the same name.
Website: https://www.openscad.org
Category: scientific
*/

/*
Language: Oracle Rules Language
Author: Jason Jacobson <jason.a.jacobson@gmail.com>
Description: The Oracle Utilities Rules Language is used to program the Oracle Utilities Applications acquired from LODESTAR Corporation.  The products include Billing Component, LPSS, Pricing Component etc. through version 1.6.1.
Website: https://docs.oracle.com/cd/E17904_01/dev.1111/e10227/rlref.htm
Category: enterprise
*/

/*
Language: Oxygene
Author: Carlo Kok <ck@remobjects.com>
Description: Oxygene is built on the foundation of Object Pascal, revamped and extended to be a modern language for the twenty-first century.
Website: https://www.elementscompiler.com/elements/default.aspx
*/

/*
Language: PHP
Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: https://www.php.net
Category: common
*/

/*
Language: PHP Template
Requires: xml.js, php.js
Author: Josh Goebel <hello@joshgoebel.com>
Website: https://www.php.net
Category: common
*/

/*
Language: Packet Filter config
Description: pf.conf — packet filter configuration file (OpenBSD)
Author: Peter Piwowarski <oldlaptop654@aol.com>
Website: http://man.openbsd.org/pf.conf
Category: config
*/

/*
Language: Parser3
Requires: xml.js
Author: Oleg Volchkov <oleg@volchkov.net>
Website: https://www.parser.ru/en/
Category: template
*/

/*
Language: Perl
Author: Peter Leonov <gojpeg@yandex.ru>
Website: https://www.perl.org
Category: common
*/

/*
Language: Plain text
Author: Egor Rogov (e.rogov@postgrespro.ru)
Description: Plain text without any highlighting.
Category: common
*/

/*
Language: Pony
Author: Joe Eli McIlvain <joe.eli.mac@gmail.com>
Description: Pony is an open-source, object-oriented, actor-model,
             capabilities-secure, high performance programming language.
Website: https://www.ponylang.io
*/

/*
Language: PostgreSQL and PL/pgSQL
Author: Egor Rogov (e.rogov@postgrespro.ru)
Website: https://www.postgresql.org/docs/11/sql.html
Description:
    This language incorporates both PostgreSQL SQL dialect and PL/pgSQL language.
    It is based on PostgreSQL version 11. Some notes:
    - Text in double-dollar-strings is _always_ interpreted as some programming code. Text
      in ordinary quotes is _never_ interpreted that way and highlighted just as a string.
    - There are quite a bit "special cases". That's because many keywords are not strictly
      they are keywords in some contexts and ordinary identifiers in others. Only some
      of such cases are handled; you still can get some of your identifiers highlighted
      wrong way.
    - Function names deliberately are not highlighted. There is no way to tell function
      call from other constructs, hence we can't highlight _all_ function names. And
      some names highlighted while others not looks ugly.
*/

/*
Language: PowerShell
Description: PowerShell is a task-based command-line shell and scripting language built on .NET.
Author: David Mohundro <david@mohundro.com>
Contributors: Nicholas Blumhardt <nblumhardt@nblumhardt.com>, Victor Zhou <OiCMudkips@users.noreply.github.com>, Nicolas Le Gall <contact@nlegall.fr>
Website: https://docs.microsoft.com/en-us/powershell/
*/

/*
Language: Processing
Description: Processing is a flexible software sketchbook and a language for learning how to code within the context of the visual arts.
Author: Erik Paluka <erik.paluka@gmail.com>
Website: https://processing.org
Category: graphics
*/

/*
Language: Prolog
Description: Prolog is a general purpose logic programming language associated with artificial intelligence and computational linguistics.
Author: Raivo Laanemets <raivo@infdot.com>
Website: https://en.wikipedia.org/wiki/Prolog
*/

/*
Language: Protocol Buffers
Author: Dan Tao <daniel.tao@gmail.com>
Description: Protocol buffer message definition format
Website: https://developers.google.com/protocol-buffers/docs/proto3
Category: protocols
*/

/*
Language: Puppet
Author: Jose Molina Colmenero <gaudy41@gmail.com>
Website: https://puppet.com/docs
Category: config
*/

/*
Language: PureBASIC
Author: Tristano Ajmone <tajmone@gmail.com>
Description: Syntax highlighting for PureBASIC (v.5.00-5.60). No inline ASM highlighting. (v.1.2, May 2017)
Credits: I've taken inspiration from the PureBasic language file for GeSHi, created by Gustavo Julio Fiorenza (GuShH).
Website: https://www.purebasic.com
*/

/*
Language: Python
Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
Website: https://www.python.org
Category: common
*/

/*
Language: Python REPL
Requires: python.js
Author: Josh Goebel <hello@joshgoebel.com>
Category: common
*/

/*
Language: Python profiler
Description: Python profiler results
Author: Brian Beck <exogen@gmail.com>
*/

/*
Language: Q
Description: Q is a vector-based functional paradigm programming language built into the kdb+ database.
             (K/Q/Kdb+ from Kx Systems)
Author: Sergey Vidyuk <svidyuk@gmail.com>
Website: https://kx.com/connect-with-us/developers/
*/

/*
Language: QML
Requires: javascript.js, xml.js
Author: John Foster <jfoster@esri.com>
Description: Syntax highlighting for the Qt Quick QML scripting language, based mostly off
             the JavaScript parser.
Website: https://doc.qt.io/qt-5/qmlapplications.html
Category: scripting
*/

/*
Language: R
Description: R is a free software environment for statistical computing and graphics.
Author: Joe Cheng <joe@rstudio.org>
Contributors: Konrad Rudolph <konrad.rudolph@gmail.com>
Website: https://www.r-project.org
Category: common,scientific
*/

/*
Language: ReasonML
Description: Reason lets you write simple, fast and quality type safe code while leveraging both the JavaScript & OCaml ecosystems.
Website: https://reasonml.github.io
Author: Gidi Meir Morris <oss@gidi.io>
Category: functional
*/

/*
Language: RenderMan RIB
Author: Konstantin Evdokimenko <qewerty@gmail.com>
Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
Website: https://renderman.pixar.com/resources/RenderMan_20/ribBinding.html
Category: graphics
*/

/*
Language: RenderMan RSL
Author: Konstantin Evdokimenko <qewerty@gmail.com>
Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
Website: https://renderman.pixar.com/resources/RenderMan_20/shadingLanguage.html
Category: graphics
*/

/*
Language: Roboconf
Author: Vincent Zurczak <vzurczak@linagora.com>
Description: Syntax highlighting for Roboconf's DSL
Website: http://roboconf.net
Category: config
*/

/*
Language: Ruby
Description: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.
Website: https://www.ruby-lang.org/
Author: Anton Kovalyov <anton@kovalyov.net>
Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
Category: common
*/

/*
Language: Rust
Author: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>
Contributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>
Website: https://www.rust-lang.org
Category: common, system
*/

/*
Language: SAS
Author: Mauricio Caceres <mauricio.caceres.bravo@gmail.com>
Description: Syntax Highlighting for SAS
*/

/*
Language: SCSS
Description: Scss is an extension of the syntax of CSS.
Author: Kurt Emch <kurt@kurtemch.com>
Website: https://sass-lang.com
Category: common, css, web
*/

/*
Language: SML (Standard ML)
Author: Edwin Dalorzo <edwin@dalorzo.org>
Description: SML language definition.
Website: https://www.smlnj.org
Origin: ocaml.js
Category: functional
*/

/*
Language: SQF
Author: Søren Enevoldsen <senevoldsen90@gmail.com>
Contributors: Marvin Saignat <contact@zgmrvn.com>, Dedmen Miller <dedmen@dedmen.de>
Description: Scripting language for the Arma game series
Website: https://community.bistudio.com/wiki/SQF_syntax
Category: scripting
Last update: 28.03.2021, Arma 3 v2.02
*/

/*
Language: STEP Part 21
Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
Description: Syntax highlighter for STEP Part 21 files (ISO 10303-21).
Website: https://en.wikipedia.org/wiki/ISO_10303-21
*/

/*
Language: Scala
Category: functional
Author: Jan Berkel <jan.berkel@gmail.com>
Contributors: Erik Osheim <d_m@plastic-idolatry.com>
Website: https://www.scala-lang.org
*/

/*
Language: Scheme
Description: Scheme is a programming language in the Lisp family.
             (keywords based on http://community.schemewiki.org/?scheme-keywords)
Author: JP Verkamp <me@jverkamp.com>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Origin: clojure.js
Website: http://community.schemewiki.org/?what-is-scheme
Category: lisp
*/

/*
Language: Scilab
Author: Sylvestre Ledru <sylvestre.ledru@scilab-enterprises.com>
Origin: matlab.js
Description: Scilab is a port from Matlab
Website: https://www.scilab.org
Category: scientific
*/

/*
Language: Shell Session
Requires: bash.js
Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
Category: common
Audit: 2020
*/

/*
Language: Smali
Author: Dennis Titze <dennis.titze@gmail.com>
Description: Basic Smali highlighting
Website: https://github.com/JesusFreke/smali
*/

/*
Language: Smalltalk
Description: Smalltalk is an object-oriented, dynamically typed reflective programming language.
Author: Vladimir Gubarkov <xonixx@gmail.com>
Website: https://en.wikipedia.org/wiki/Smalltalk
*/

/*
Language: Stan
Description: The Stan probabilistic programming language
Author: Sean Pinkney <sean.pinkney@gmail.com>
Website: http://mc-stan.org/
Category: scientific
*/

/*
Language: Stata
Author: Brian Quistorff <bquistorff@gmail.com>
Contributors: Drew McDonald <drewmcdo@gmail.com>
Description: Stata is a general-purpose statistical software package created in 1985 by StataCorp.
Website: https://en.wikipedia.org/wiki/Stata
Category: scientific
*/

/*
Language: Stylus
Author: Bryant Williams <b.n.williams@gmail.com>
Description: Stylus is an expressive, robust, feature-rich CSS language built for nodejs.
Website: https://github.com/stylus/stylus
Category: css, web
*/

/*
Language: SubUnit
Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
Website: https://pypi.org/project/python-subunit/
*/

/*
Language: Swift
Description: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
Author: Steven Van Impe <steven.vanimpe@icloud.com>
Contributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>
Website: https://swift.org
Category: common, system
*/

/*
Language: TOML, also INI
Description: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.
Contributors: Guillaume Gomez <guillaume1.gomez@gmail.com>
Category: common, config
Website: https://github.com/toml-lang/toml
*/

/*
Language: TP
Author: Jay Strybis <jay.strybis@gmail.com>
Description: FANUC TP programming language (TPP).
*/

/*
Language: Tagger Script
Author: Philipp Wolfer <ph.wolfer@gmail.com>
Description: Syntax Highlighting for the Tagger Script as used by MusicBrainz Picard.
Website: https://picard.musicbrainz.org
 */

/*
Language: Tcl
Description: Tcl is a very simple programming language.
Author: Radek Liska <radekliska@gmail.com>
Website: https://www.tcl.tk/about/language.html
*/

/*
Language: Test Anything Protocol
Description: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.
Requires: yaml.js
Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
Website: https://testanything.org
*/

/*
Language: Thrift
Author: Oleg Efimov <efimovov@gmail.com>
Description: Thrift message definition format
Website: https://thrift.apache.org
Category: protocols
*/

/*
Language: Twig
Requires: xml.js
Author: Luke Holder <lukemh@gmail.com>
Description: Twig is a templating language for PHP
Website: https://twig.symfony.com
Category: template
*/

/*
Language: TypeScript
Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
Contributors: Ike Ku <dempfi@yahoo.com>
Description: TypeScript is a strict superset of JavaScript
Website: https://www.typescriptlang.org
Category: common, scripting
*/

/*
Language: VBScript
Description: VBScript ("Microsoft Visual Basic Scripting Edition") is an Active Scripting language developed by Microsoft that is modeled on Visual Basic.
Author: Nikita Ledyaev <lenikita@yandex.ru>
Contributors: Michal Gabrukiewicz <mgabru@gmail.com>
Website: https://en.wikipedia.org/wiki/VBScript
Category: scripting
*/

/*
Language: VBScript in HTML
Requires: xml.js, vbscript.js
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Description: "Bridge" language defining fragments of VBScript in HTML within <% .. %>
Website: https://en.wikipedia.org/wiki/VBScript
Category: scripting
*/

/*
Language: VHDL
Author: Igor Kalnitsky <igor@kalnitsky.org>
Contributors: Daniel C.K. Kho <daniel.kho@tauhop.com>, Guillaume Savaton <guillaume.savaton@eseo.fr>
Description: VHDL is a hardware description language used in electronic design automation to describe digital and mixed-signal systems.
Website: https://en.wikipedia.org/wiki/VHDL
*/

/*
Language: Vala
Author: Antono Vasiljev <antono.vasiljev@gmail.com>
Description: Vala is a new programming language that aims to bring modern programming language features to GNOME developers without imposing any additional runtime requirements and without using a different ABI compared to applications and libraries written in C.
Website: https://wiki.gnome.org/Projects/Vala
*/

/*
Language: Verilog
Author: Jon Evans <jon@craftyjon.com>
Contributors: Boone Severson <boone.severson@gmail.com>
Description: Verilog is a hardware description language used in electronic design automation to describe digital and mixed-signal systems. This highlighter supports Verilog and SystemVerilog through IEEE 1800-2012.
Website: http://www.verilog.com
*/

/*
Language: Vim Script
Author: Jun Yang <yangjvn@126.com>
Description: full keyword and built-in from http://vimdoc.sourceforge.net/htmldoc/
Website: https://www.vim.org
Category: scripting
*/

/*
Language: Visual Basic .NET
Description: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.
Authors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer
Website: https://docs.microsoft.com/dotnet/visual-basic/getting-started
Category: common
*/

/*
Language: WebAssembly
Website: https://webassembly.org
Description:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
Category: web
Audit: 2020
*/

/*
Language: Wolfram Language
Description: The Wolfram Language is the programming language used in Wolfram Mathematica, a modern technical computing system spanning most areas of technical computing.
Authors: Patrick Scheibe <patrick@halirutan.de>, Robert Jacobson <robertjacobson@acm.org>
Website: https://www.wolfram.com/mathematica/
Category: scientific
*/

/*
Language: Wren
Description: Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax.
Category: scripting
Author: @joshgoebel
Maintainer: @joshgoebel
Website: https://wren.io/
*/

/*
Language: XL
Author: Christophe de Dinechin <christophe@taodyne.com>
Description: An extensible programming language, based on parse tree rewriting
Website: http://xlr.sf.net
*/

/*
Language: XQuery
Author: Dirk Kirsten <dk@basex.org>
Contributor: Duncan Paterson
Description: Supports XQuery 3.1 including XQuery Update 3, so also XPath (as it is a superset)
Refactored to process xml constructor syntax and function-bodies. Added missing data-types, xpath operands, inbuilt functions, and query prologs
Website: https://www.w3.org/XML/Query/
Category: functional
Audit: 2020
*/

/*
Language: YAML
Description: Yet Another Markdown Language
Author: Stefan Wienert <stwienert@gmail.com>
Contributors: Carl Baxter <carl@cbax.tech>
Requires: ruby.js
Website: https://yaml.org
Category: common, config
*/

/*
Language: crmsh
Author: Kristoffer Gronlund <kgronlund@suse.com>
Website: http://crmsh.github.io
Description: Syntax Highlighting for the crmsh DSL
Category: config
*/

/*
Like markdown-it-simplemath, this is a stripped down, simplified version of:
https://github.com/runarberg/markdown-it-math

It differs in that it takes (a subset of) LaTeX as input and relies on KaTeX
for rendering output.
*/

/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

/*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
};*/

/*                                                  viniculum
                                                   /
         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
        / █████████████████████←0.04em (40 unit) std viniculum thickness
       / /
      / /
     / /\
    / / surd
*/

/*  ==============================================================================
                                      CHANGELOG
    ==============================================================================
    - v.1.2 (2017-05-12)
        -- BUG-FIX: Some keywords were accidentally joyned together. Now fixed.
    - v.1.1 (2017-04-30)
        -- Updated to PureBASIC 5.60.
        -- Keywords list now built by extracting them from the PureBASIC SDK's
           "SyntaxHilighting.dll" (from each PureBASIC version). Tokens from each
           version are added to the list, and renamed or removed tokens are kept
           for the sake of covering all versions of the language from PureBASIC
           v5.00 upward. (NOTE: currently, there are no renamed or deprecated
           tokens in the keywords list). For more info, see:
           -- http://www.purebasic.fr/english/viewtopic.php?&p=506269
           -- https://github.com/tajmone/purebasic-archives/tree/master/syntax-highlighting/guidelines
    - v.1.0 (April 2016)
        -- First release
        -- Keywords list taken and adapted from GuShH's (Gustavo Julio Fiorenza)
           PureBasic language file for GeSHi:
           -- https://github.com/easybook/geshi/blob/master/geshi/purebasic.php
*/

/* ! */

/* " " */

/* " */

/* "0" */

/* "9" */

/* # */

/* $ */

/* % */

/* & */

/* && !functions[name].primitive*/

/* ' */

/* ( */

/* ) */

/* * */

/* + */

/* , */

/* - */

/* . */

/* / */

/* 0 */

/* 1 */

/* 1em quad */

/* 9 */

/* : */

/* ; */

/* < */

/* = */

/* > */

/* ? */

/* @ */

/* Don't mix up DFA `_state` and markdown-it `state` */

/* End line of multiline row. merge forward until the marked trToken */

/* Excel formula comments are done by putting the comment in a function call to N() */

/* Interface definition */

/* Last data row cannot be detected. not stored to trToken outside? */

/* Line with N bounds has cells indexed from 0 to N-2 */

/* Multiline. Join the text and feed into markdown-it blockParser. */

/* Multiline. Merge trTokens as an entire multiline trToken */

/* Multiline. Scan boundaries again since it's very complicated */

/* Null is possible when disabled the option autolabel */

/* Only separator needs to check indents */

/* Pad in newline characters on last and this line */

/* Process inline math */

/* Push in th/td tokens */

/* Push in thead/tbody and tr open tokens */

/* Push in tr and thead/tbody closed tokens */

/* Quoted string with variables inside */

/* Scan for valid pipe character position */

/* Start line of multiline row. mark this trToken */

/* Utility functions */

/* Variables: simple (eg $(var)) and special (eg $@) */

/* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */

/* [ */

/* \ */

/* \n */

/* \t */

/* ] */

/* ^ */

/* _ */

/* ` */

/* a */

/* according to Definition of Standard ML 97  */

/* binding */

/* block match pass are "actions" in pf.conf(5), the rest are
       * lexically similar top-level commands.
       */

/* built-in types */

/* built-in types according to basis library */

/* core facts */

/* don't color identifiers, but safely catch all identifiers with ' */

/* don't color identifiers, but safely catch all identifiers with '*/

/* eslint-disable no-bitwise */

/* eslint-disable no-script-url */

/* eslint-disable-next-line brace-style */

/* eslint-enable no-script-url */

/* for pos section at bottom */

/* general purpose registers */

/* harmony default export */

/* harmony export */

/* language keywords */

/* make \` closes the code sequence, but not open it;
             the reason is that `\` is correct code block */

/* matches a beginning equal sign found in Excel formula examples */

/* matches a reference to a range of cells */

/* matches a reference to a single cell */

/* metaparameters */

/* missing support for heredoc-like string (OCaml 4.0.2+) */

/* mnemonic */

/* module or constructor */

/* multi-line comment */

/* no leading zeros */

/* no paramater help tags */

/* one parameter help tags */

/* only allow single equal sign at front of line */

/* parameters to instances */

/* polymorphic variant */

/* reserved deprecated keywords */

/* single-line comment */

/* space */

/* t-y */

/* tab */

/* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */

/* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */

/* this is for cases like ,CALL */

/* this is for cases like CNT100 where the default lexemes do not
       * separate the keyword and the number */

/* to catch numbers that do not have a word boundary on the left */

/* type variable */

/* vim: set ts=2 sw=2 et: */

/* webpack/runtime/define property getters */

/* where backslash should be */

/* z */

/* { */

/* | */

/* } */

/* ~ */

/* ’ */

/* “”‘’ */

/*#__PURE__*/

/**
     *  Process an individual match
     *
     * @param {string} textBeforeMatch - text preceding the match (since the last match)
     * @param {EnhancedMatch} [match] - the match itself
     */

/**
     * @param {CompiledMode } mode - the mode to potentially end
     * @param {RegExpMatchArray} match - the latest match
     * @param {string} matchPlusRemainder - match plus remainder of content
     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
     */

/**
     * @param {CompiledMode} mode - new mode to start
     * @param {RegExpMatchArray} match
     */

/**
     * @param {CompiledScope} scope
     * @param {RegExpMatchArray} match
     */

/**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */

/**
     * An array of attribute name/value pairs, used for quickly diffing the
     * incomming attributes to see if the DOM node's attributes need to be
     * updated.
     */

/**
     * First pass: validate and collect info into table token. IR is stored in
     * markdown-it `token.meta` to be pushed later. table/tr open tokens are
     * generated here.
     */

/**
     * Handle matching but then ignoring a sequence of text
     *
     * @param {string} lexeme - string containing full match text
     */

/**
     * Handle the potential end of mode
     *
     * @param {RegExpMatchArray} match - the current match
     */

/**
     * Handle the start of a new potential mode match
     *
     * @param {EnhancedMatch} match - the current match
     * @returns {number} how far to advance the parse cursor
     */

/**
     * Naming convention of positional variables
     * - list-item
     * ·········longtext······\n
     *   ^head  ^start  ^end  ^max
     */

/**
     * Regex pseudo code for table:
     *     caption? header+ separator (data+ empty)* data+ caption?
     *
     * We use DFA to emulate this plugin. Types with lower precedence are
     * set-minus from all the formers.  Noted that separator should have higher
     * precedence than header or data.
     *   |  state  | caption separator header data empty | --> lower precedence
     *   | 0x10100 |    1        0       1     0     0   |
     */

/**
     * Return keyword data if a match is a keyword
     * @param {CompiledMode} mode - current mode
     * @param {string} matchText - the textual match
     * @returns {KeywordData | false}
     */

/**
     * Second pass: actually push the tokens into `state.tokens`.
     * thead/tbody/th/td open tokens and all closed tokens are generated here;
     * thead/tbody are generally called tgroup; td/th are generally called tcol.
     */

/**
     * Whether or not the statics have been applied for the node yet.
     */

/**
    Stores multiple regular expressions and allows you to quickly search for
    them all in a string simultaneously - returning the first match.  It does
    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
    and joined by `|` - using match groups to track position.  When a match is
    found checking which position in the array has content allows us to figure
    out which of the original regexes / match groups triggered the match.
     The match object itself (the result of `Regex.exec`) is returned but also
    enhanced by merging in any meta-data that was registered with the regex.
    This is how we keep track of which mode matched, and what type of rule
    (`illegal`, `begin`, end, etc).
  */

/**
   *
   * @param {PluginEvent} event
   * @param {any} args
   */

/**
   *
   * @param {string|string[]} aliasList - single alias or list of aliases
   * @param {{languageName: string}} opts
   */

/**
   * @param {*} options
   */

/**
   * @param {CompiledMode} mode
   */

/**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */

/**
   * @param {HLJSPlugin} plugin
   */

/**
   * @param {HighlightedHTMLElement} block - the HTML element to determine language for
   */

/**
   * @param {Node} node
   */

/**
   * @param {Renderer} builder
   * @param {Node} node
   */

/**
   * @param {string} name - name of the language to retrieve
   * @returns {Language | undefined}
   */

/**
   * @param {string} text
   * @param {string} kind
   */

/**
   * @param {string} text
   */

/**
   * @returns {string[]} List of language internal names
   */

/**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */

/**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */

/**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */

/**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */

/**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */

/**
   * Adds texts to the output stream
   *
   * @param {string} text */

/**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */

/**
   * Append an array of tokens to the token stack.
   */

/**
   * Applies highlighting to a DOM node containing code.
   *
   * @param {HighlightedHTMLElement} element - the HTML element to highlight
  */

/**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */

/**
   * Builds a regex with the case sensitivity of the current language
   *
   * @param {RegExp | string} value
   * @param {boolean} [global]
   */

/**
   * Builds a span element
   *
   * @param {string} className */

/**
   * Builds new class name for block given the language name
   *
   * @param {HTMLElement} element
   * @param {string} [currentLang]
   * @param {string} [resultLang]
   */

/**
   * Call a function handler with a suitable context and arguments.
   */

/**
   * Character Literal
   * Either a single character ("a"C) or an escaped double quote (""""C).
   */

/**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */

/**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */

/**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */

/**
   * Compiles an individual list of keywords
   *
   * Ex: "for if when while|5"
   *
   * @param {string} scopeName
   * @param {Array<string>} keywordList
   */

/**
   * Compiles an individual mode
   *
   * This can raise an error if the mode contains certain detectable known logic
   * issues.
   * @param {Mode} mode
   * @param {CompiledMode | null} [parent]
   * @returns {CompiledMode | never}
   */

/**
   * Consume all following space tokens, without expansion.
   */

/**
   * Consume the specified number of arguments from the token stream,
   * and return the resulting array of arguments.
   */

/**
   * Converts the math node into a MathML-namespaced DOM element.
   */

/**
   * Converts the math node into a string, similar to innerText, but escaped.
   */

/**
   * Converts the math node into a string, similar to innerText.
   */

/**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */

/**
   * Converts the math node into an HTML markup string.
   */

/**
   * Converts the text node into a DOM text node.
   */

/**
   * Converts the text node into a string
   * (representing the text iteself).
   */

/**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */

/**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */

/**
   * Core highlighting function.
   *
   * OLD API
   * highlight(lang, code, ignoreIllegals, continuation)
   *
   * NEW API
   * highlight(code, {lang, ignoreIllegals})
   *
   * @param {string} codeOrLanguageName - the language to use for highlighting
   * @param {string | HighlightOptions} optionsOrCode - the code to highlight
   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
   *
   * @returns {HighlightResult} Result - an object that represents the result
   * @property {string} language - the language name
   * @property {number} relevance - the relevance score
   * @property {string} value - the highlighted HTML code
   * @property {string} code - the original raw code
   * @property {CompiledMode} top - top of the current mode stack
   * @property {boolean} illegal - indicates whether any illegal matches were found
  */

/**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/

/**
   * Create a Space node with width given in CSS ems.
   */

/**
   * Create a new options object with "phantom" set to true.
   */

/**
   * Create a new options object with the given color.
   */

/**
   * Create a new options objects with the given fontFamily.
   */

/**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */

/**
   * Creates a new options object with the given font weight
   */

/**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */

/**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */

/**
   * Creates markup for a symbol node.
   */

/**
   * Current KaTeX version
   */

/**
   * DEPRECATED
   * @param {HighlightedHTMLElement} el
   */

/**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */

/**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */

/**
   * Determine whether a command is expandable.
   */

/**
   * Determines if a given language has auto-detection enabled
   * @param {string} name - name of the language
   */

/**
   * Discard any space tokens, fetching the next non-space token.
   */

/**
   * Discards the current lookahead token, considering it consumed.
   */

/**
   * End current group nesting within all namespaces.
   */

/**
   * End current nested group, restoring values before the group began.
   */

/**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */

/**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order and will be returned as an array,
   * also in reverse order.
   *
   * If not, the next token will be returned without removing it
   * from the stack.  This case can be detected by a `Token` return value
   * instead of an `Array` return value.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty.
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * At the moment, macro expansion doesn't handle delimited macros,
   * i.e. things like those defined by \def\foo#1\end{…}.
   * See the TeX book page 202ff. for details on how those should behave.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */

/**
   * Expose the dom tree node types, which can be useful for type checking nodes.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */

/**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */

/**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */

/**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */

/**
   * Fully expand the given token stream and return the resulting list of tokens
   */

/**
   * Get a text or display version of this style.
   */

/**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */

/**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */

/**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */

/**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */

/**
   * Get the style of a subscript given a base in the current style.
   */

/**
   * Get the style of a superscript given a base in the current style.
   */

/**
   * Gets an attribute on a MathML node.
   */

/**
   * Gets the CSS color of the current options object
   */

/**
   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
   * the content and find matches.
   *
   * @param {CompiledMode} mode
   * @returns {ResumableMultiRegex}
   */

/**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */

/**
   * Handle a subscript or superscript with nice errors.
   */

/**
   * If `optional` is false or absent, this parses an ordinary group,
   * which is either a single nucleus (like "x") or an expression
   * in braces (like "{x+y}") or an implicit group, a group that starts
   * at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   * If `optional` is true, it parses either a bracket-delimited expression
   * (like "[x+y]") or returns null to indicate the absence of a
   * bracket-enclosed group.
   * If `mode` is present, switches to that mode while parsing the group,
   * and switches back after.
   */

/**
   * KaTeX error, usually during parsing.
   */

/**
   * Language keywords
   *
   * @type {Object}
   */

/**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */

/**
   * Main parsing function, which parses an entire input.
   */

/**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/

/**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/

/**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/

/**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/

/**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/

/**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
   **/

/**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/

/**
   * Match#index -> Number
   *
   * First position of matched string.
   **/

/**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/

/**
   * Match#raw -> String
   *
   * Matched string.
   **/

/**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/

/**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/

/**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/

/**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */

/**
   * Notifies about nodes that were created during the patch operation.
   */

/**
   * Number literal regexps
   *
   * @type {String}
   */

/**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */

/**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/

/**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/

/**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/

/**
   * Parses a color description.
   */

/**
   * Parses a group when the mode is changing.
   */

/**
   * Parses a group with optional super/subscripts.
   */

/**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */

/**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */

/**
   * Parses a size specification, consisting of magnitude and unit.
   */

/**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precendence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */

/**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */

/**
   * Parses an entire function, including its base and all of its arguments.
   */

/**
   * Parses the arguments of a function or environment
   */

/**
   * Parses the given LaTeX into KaTeX's internal parse tree structure,
   * without rendering to HTML or MathML.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Recursively expand first token, then return first non-expandable token.
   */

/**
   * Register a language grammar module
   *
   * @param {string} languageName
   * @param {LanguageFn} languageDefinition
   */

/**
   * Remove a language grammar module
   *
   * @param {string} languageName
   */

/**
   * Remove and return the next unexpanded token.
   */

/**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */

/**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/

/**
   * Renders the given LaTeX into an HTML internal DOM tree representation,
   * without MathML and without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Renders the given LaTeX into an HTML+MathML combination string,
   * for sending to the client.
   */

/**
   * Renders the given LaTeX into an HTML+MathML combination, and adds
   * it as a child to the specified DOM node.
   */

/**
   * Renders the given LaTeX into an HTML+MathML internal DOM tree
   * representation, without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */

/**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */

/**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */

/**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */

/**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */

/**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */

/**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */

/**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */

/**
   * Return the font metrics for this size.
   */

/**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */

/**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */

/**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */

/**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */

/**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */

/**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   */

/**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */

/**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */

/**
   * Start a new group nesting within all namespaces.
   */

/**
   * Start a new nested group, affecting future local `set`s.
   */

/**
   * Switches between "text" and "math" modes.
   */

/**
   * Takes a string like "<Booger" and checks to see
   * if we can find a matching "</Booger" later in the
   * content.
   * @param {RegExpMatchArray} match
   * @param {{after:number}} param1
   */

/**
   * Tests a language name to see if highlighting should be skipped
   * @param {string} languageName
   */

/**
   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify
   * highlighting and fix cases like
   * ```
   * interface Iterator[A: A]
   *   fun has_next(): Bool
   *   fun next(): A?
   * ```
   * where it is valid to have a function head without a body
   */

/**
   * The base size index.
   */

/**
   * This function lexes a single token.
   */

/**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/

/**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/

/**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/

/**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/

/**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/

/**
   * Token#info -> String
   *
   * Additional information:
   *
   * - Info string for "fence" tokens
   * - The value "auto" for autolink "link_open" and "link_close" tokens
   * - The string value of the item marker for ordered-list "list_item_open" tokens
   **/

/**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/

/**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/

/**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/

/**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/

/**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/

/**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/

/**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/

/**
   * Updates highlight.js global options with the passed options
   *
   * @param {Partial<HLJSOptions>} userOptions
   */

/**
   * Upgrades the old highlightBlock plugins to the new
   * highlightElement API
   * @param {HLJSPlugin} plugin
   */

/**
   * adds a new macro to builtin macro list
   */

/**
   * adds a new symbol to builtin symbols table
   */

/**
   * auto-highlights all pre>code elements on the page
   */

/**
   * extends internal font metrics object with a new object
   * each key in the new object represents a font name
  */

/**
   * private highlight that's used internally and does not fire callbacks
   *
   * @param {string} languageName - the language to use for highlighting
   * @param {string} codeToHighlight - the code to highlight
   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
   * @param {CompiledMode?} [continuation] - current continuation mode, if any
   * @returns {HighlightResult} - result of the highlight operation
  */

/**
   * returns a valid highlight result, without actually doing any actual work,
   * auto highlight starts with this and it's possible for small snippets that
   * auto-detection may not find a better match
   * @param {string} code
   * @returns {HighlightResult}
   */

/**
   * returns the accumulated buffer
  */

/**
  Currently this is all private API, but this is the minimal API necessary
  that an Emitter must implement to fully support the parser.

  Minimal interface:

  - addKeyword(text, kind)
  - addText(text)
  - addSublanguage(emitter, subLanguageName)
  - finalize()
  - openNode(kind)
  - closeNode()
  - closeAllNodes()
  - toHTML()

*/

/**
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:
   - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - secondBest (object with the same structure for second-best heuristically
    detected language, may be absent)
     @param {string} code
    @param {Array<string>} [languageSubset]
    @returns {AutoHighlightResult}
  */

/**
 *
 * @type {CompilerExt}
 */

/**
 * @implements {Emitter}
 */

/**
 * @param  nameOrCtor The Element's tag or constructor.
 * @param  key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 * @param varArgs, Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return The corresponding Element.
 */

/**
 * @param  node The node to start at, inclusive.
 * @param  root The root ancestor to get until, exclusive.
 * @return The ancestry of DOM nodes.
 */

/**
 * @param element The Element to diff the attrs for.
 * @param data The NodeData associated with the Element.
 */

/**
 * @param name The name of the attribute. For example "tabindex" or
 *    "xlink:href".
 * @returns The namespace to use for the attribute, or null if there is
 * no namespace.
 */

/**
 * @param newContext The current patch context.
 */

/**
 * @param node The node to check.
 * @returns True if the NodeData already exists, false otherwise.
 */

/**
 * @param node The node to get the activeElement for.
 * @returns The activeElement in the Document or ShadowRoot
 *     corresponding to node, if present.
 */

/**
 * @param this
 * @returns The root node of the DOM tree that contains this node.
 */

/**
 * @param { Array<string | RegExp | Object> } args
 * @returns {object}
 */

/**
 * @param {(string | RegExp)[]} regexps
 * @param {{joinWith: string}} opts
 * @returns {string}
 */

/**
 * @param {...(RegExp | string) } args
 * @returns {string}
 */

/**
 * @param {CompiledMode} mode
 */

/**
 * @param {HLJSApi} hljs
 * @returns {LanguageDetail}
 * */

/**
 * @param {RegExp | string } re
 * @returns {string}
 */

/**
 * @param {RegExp | string} re
 * @returns {number}
 */

/**
 * @param {string} message
 */

/**
 * @param {string} value
 * @returns {RegExp}
 * */

/**
 * @param {string} value
 * @returns {string}
 */

/**
 * @preserve
 * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0.
 */

/**
 * @return The Node that will be evaluated for the next instruction.
 */

/**
 * @return The next Node to be patched.
 */

/**
 * @returns The current Element being patched.
 */

/**
 * @type {Record<string, boolean>}
 */

/**
 * @typedef {object} Renderer
 * @property {(text: string) => void} addText
 * @property {(node: Node) => void} openNode
 * @property {(node: Node) => void} closeNode
 * @property {() => string} value
 */

/**
 * A cached reference to the hasOwnProperty function.
 */

/**
 * A constructor function that will create blank objects.
 */

/**
 * A context object keeps track of the state of a patch.
 */

/**
 * A flattened version of all the supported blocks in a single array.
 * This is an optimization to make supportedCodepoint() fast.
 */

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */

/**
 * A publicly mutable object to provide custom mutators for attributes.
 * NB: The result of createMap() has to be recast since closure compiler
 * will just assume attributes is "any" otherwise and throws away
 * the type annotation set by tsickle.
 */

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */

/**
 * Aligns the virtual Node definition with the actual DOM, moving the
 * corresponding DOM node to the correct location or creating it if necessary.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 */

/**
 * All registered environments.
 * `environments.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `environments.js`.
 */

/**
 * Allow `illegal` to contain an array of illegal values
 * @type {CompilerExt}
 */

/**
 * Allows recursive regex expressions to a given depth
 *
 * ie: recurRegex("(abc~~~)", /~~~/g, 2) becomes:
 * (abc(abc(abc)))
 *
 * @param {string} re
 * @param {RegExp} substitution (should be a g mode regex)
 * @param {number} depth
 * @returns {string}``
 */

/**
 * Allows you to define a key after an elementOpenStart. This is useful in
 * templates that define key after an element has been opened ie
 * `<div key('foo')></div>`.
 * @param key The key to use for the next call.
 */

/**
 * Any of the passed expresssions may match
 *
 * Creates a huge this | this | that | that match
 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
 * @returns {string}
 */

/**
 * Applies a property to a given Element.
 * @param el The element to apply the property to.
 * @param name The property's name.
 * @param value The property's value.
 */

/**
 * Applies a style to an Element. No vendor prefix expansion is done for
 * property names/values.
 * @param el The Element to apply the style for.
 * @param name The attribute's name.
 * @param  style The style to set. Either a string of css or an object
 *     containing property-value pairs.
 */

/**
 * Applies a value to a style declaration. Supports CSS custom properties by
 * setting properties containing a dash using CSSStyleDeclaration.setProperty.
 * @param style A style declaration.
 * @param prop The property to apply. This can be either camelcase or dash
 *    separated. For example: "backgroundColor" and "background-color" are both
 *    supported.
 * @param value The value of the property.
 */

/**
 * Applies an attribute or property to a given Element. If the value is null
 * or undefined, it is removed from the Element. Otherwise, the value is set
 * as an attribute.
 * @param el The element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value.
 */

/**
 * Applies the current static attributes to the currently open element. Note:
 * statics should be applied before calling `applyAtrs`.
 * @param statics The statics to apply to the current element.
 */

/**
 * Applies the currently buffered attrs to the currently open element. This
 * clears the buffered attributes.
 */

/**
 * Applies the statics. When importing an Element, any existing attributes that
 * match a static are converted into a static attribute.
 * @param node The Element to apply statics for.
 * @param data The NodeData associated with the Element.
 * @param statics The statics array.
 */

/**
 * Asserts that a value exists and is not null or undefined. goog.asserts
 * is not used in order to avoid dependencies on external code.
 * @param val The value to assert is truthy.
 * @returns The value.
 */

/**
 * Asserts that the node is of the given type and returns it with stricter
 * typing. Throws if the node's type does not match.
 */

/**
 * Buffers an attribute, which will get applied during the next call to
 * `elementOpen`, `elementOpenEnd` or `applyAttrs`.
 * @param name The of the attribute to buffer.
 * @param value The value of the attribute to buffer.
 */

/**
 * Calculates the diff between previous and next values, calling the update
 * function when an item has changed value. If an item from the previous values
 * is not present in the the next values, the update function is called with a
 * value of `undefined`.
 * @param prev The previous values, alternating name, value pairs.
 * @param next The next values, alternating name, value pairs.
 * @param updateCtx The context for the updateFn.
 * @param updateFn A function to call when a value has changed.
 */

/**
 * Calls the appropriate attribute mutator for this attribute.
 * @param el The Element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value. If the value is an object or
 *     function it is set on the Element, otherwise, it is set as an HTML
 *     attribute.
 */

/**
 * Changes to the first child of the current node.
 */

/**
 * Changes to the next sibling of the current node.
 */

/**
 * Changes to the parent of the current node, removing any unvisited children.
 */

/**
 * Checks if the node is an Element. This is faster than an instanceof check.
 * @param node The node to check.
 * @return Whether or not the node is an Element.
 */

/**
 * Checks if the node is the root of a document. This is either a Document
 * or ShadowRoot. DocumentFragments are included for simplicity of the
 * implementation, though we only want to consider Documents or ShadowRoots.
 * @param node The node to check.
 * @return True if the node the root of a document, false otherwise.
 */

/**
 * Checks that a call to patchOuter actually patched the element.
 * @param maybeStartNode The value for the currentNode when the patch
 *     started.
 * @param maybeCurrentNode The currentNode when the patch finished.
 * @param expectedNextNode The Node that is expected to follow the
 *    currentNode after the patch;
 * @param expectedPrevNode The Node that is expected to preceed the
 *    currentNode after the patch.
 */

/**
 * Checks whether or not the current node matches the specified nameOrCtor and
 * key. This uses the specified match function when creating the patcher.
 * @param matchNode A node to match the data to.
 * @param nameOrCtor The name or constructor to check for.
 * @param key The key used to identify the Node.
 * @return True if the node matches, false otherwise.
 */

/**
 * Clears all caches from a node and all of its children.
 * @param node The Node to clear the cache for.
 */

/**
 * Clears out any unvisited Nodes in a given range.
 * @param maybeParentNode
 * @param startNode The node to start clearing from, inclusive.
 * @param endNode The node to clear until, exclusive.
 */

/**
 * Closes an open tag started with elementOpenStart.
 * @return The corresponding Element.
 */

/**
 * Closes an open virtual Element.
 *
 * @param nameOrCtor The Element's tag or constructor.
 * @return The corresponding Element.
 */

/**
 * Closes the currently open Element, removing any unvisited children if
 * necessary.
 * @returns The Element that was just closed.
 */

/**
 * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
 * into an unbreakable HTML node of class .base, with proper struts to
 * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
 * make up the entire expression as a sequence of unbreakable units.
 */

/**
 * Compiles a language definition result
 *
 * Given the raw result of a language definition (Language), compiles this so
 * that it is ready for highlighting code.
 * @param {Language} language
 * @returns {CompiledLanguage}
 */

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */

/**
 * Converts verb group into body string.
 *
 * \verb* replaces each space with an open box \u2423
 * \verb replaces each space with a no-break space \xA0
 */

/**
 * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/

/**
 * Creates a Node and marking it as created.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 * @return The newly created node.
 */

/**
 * Creates a Text Node.
 * @param doc The document with which to create the Element.
 * @returns The newly created Text.
 */

/**
 * Creates a patcher that patches an Element with the the provided function.
 * Exactly one top level element call should be made corresponding to `node`.
 * @param patchConfig The config to use for the patch.
 * @returns The created function for patching an Element.
 */

/**
 * Creates a patcher that patches the document starting at node with a
 * provided function. This function may be called during an existing patch operation.
 * @param patchConfig The config to use for the patch.
 * @returns The created function for patching an Element's children.
 */

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */

/**
 * Creates an Element and initializes the NodeData.
 * @param doc The document with which to create the Element.
 * @param parent The parent of new Element.
 * @param nameOrCtor The tag or constructor for the Element.
 * @param key A key to identify the Element.
 * @returns The newly created Element.
 */

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */

/**
 * Creates an array for a desired initial size. Note that the array will still
 * be empty.
 * @param initialAllocationSize The initial size to allocate.
 * @returns An empty array, with an initial allocation for the desired size.
 */

/**
 * Creates an map object without a prototype.
 * @returns An Object that can be used as a map.
 */

/**
 * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
 * That document sorts characters into groups by font type, say bold or italic.
 *
 * In the arrays below, each subarray consists three elements:
 *      * The CSS class of that group when in math mode.
 *      * The CSS class of that group when in text mode.
 *      * The font name, so that KaTeX can get font metrics.
 */

/**
 * Declares a virtual Element at the current location in the document that has
 * no children.
 * @param nameOrCtor The Element's tag or constructor.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 * @param varArgs Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return The corresponding Element.
 */

/**
 * Declares a virtual Element at the current location in the document. This
 * corresponds to an opening tag and a elementClose tag is required. This is
 * like elementOpen, but the attributes are defined using the attr function
 * rather than being passed as arguments. Must be folllowed by 0 or more calls
 * to attr, then a call to elementOpenEnd.
 * @param nameOrCtor The Element's tag or constructor.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 */

/**
 * Declares a virtual Text at this point in the document.
 *
 * @param value The value of the Text.
 * @param varArgs
 *     Functions to format the value which are called only when the value has
 *     changed.
 * @return The corresponding text node.
 */

/**
 * Determines if a given keyword is common or not
 *
 * @param {string} keyword */

/**
 * Determines if a mode has a dependency on it's parent or not
 *
 * If a mode does have a parent dependency then often we need to clone it if
 * it's used in multiple places so that each copy points to the correct parent,
 * where-as modes without a parent can often safely be re-used at the bottom of
 * a mode chain.
 *
 * @param {Mode | null} mode
 * @returns {boolean} - is there a dependency on the parent?
 * */

/**
 * Determines if a node needs to be wrapped in <span>
 *
 * @param {Node} node */

/**
 * Does lexeme start with a regular expression match at the beginning
 * @param {RegExp} re
 * @param {string} lexeme
 */

/**
 * Escapes text to prevent scripting attacks.
 */

/**
 * Expands a mode or clones it if necessary
 *
 * This is necessary for modes with parental dependenceis (see notes on
 * `dependencyOnParent`) and for nodes that have `variants` - which must then be
 * exploded into their own individual modes at compile time.
 *
 * @param {Mode} mode
 * @returns {Mode | Mode[]}
 * */

/**
 * Finds the matching node, starting at `node` and looking at the subsequent
 * siblings if a key is used.
 * @param matchNode The node to start looking at.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 * @returns The matching Node, if any exists.
 */

/**
 * Flushes the changes buffer, calling the functions for each change.
 */

/**
 * Get the font metrics for a given size.
 */

/**
 * Get the metrics for a given symbol and font, after transformation (i.e.
 * after following replacement from symbols.js)
 */

/**
 * Gets the key for a Node. note that the Node should have been imported
 * by now.
 * @param node The node to check.
 * @returns The key used to create the node.
 */

/**
 * Gets the namespace to create an element (of a given tag) in.
 * @param tag The tag to get the namespace for.
 * @param parent The current parent Node, if any.
 * @returns The namespace to use,
 */

/**
 * Gets the path of nodes that contain the focused node in the same document as
 * a reference node, up until the root.
 * @param node The reference node to get the activeElement for.
 * @param root The root to get the focused path until.
 * @returns The path of focused parents, if any exist.
 */

/**
 * Given a codepoint, return the name of the script or script family
 * it is from, or null if it is not part of a known block
 */

/**
 * Given a codepoint, return true if it falls within one of the
 * scripts or script families defined above and false otherwise.
 *
 * Micro benchmarks shows that this is faster than
 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
 * in Firefox, Chrome and Node.
 */

/**
 * Given raw keywords from a language definition, compile them.
 *
 * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
 * @param {boolean} caseInsensitive
 */

/**
 * Imports node and its subtree, initializing caches.
 * @param node The Node to import.
 */

/**
 * Imports single node and its subtree, initializing caches, if it has not
 * already been imported.
 * @param node The node to import.
 * @param fallbackKey A key to use if importing and no key was specified.
 *    Useful when not transmitting keys from serverside render and doing an
 *    immediate no-op diff.
 * @returns The NodeData for the node.
 */

/**
 * Initializes a NodeData object for a Node.
 * @param node The Node to initialized data for.
 * @param nameOrCtor The NameOrCtorDef to use when diffing.
 * @param key The Key for the Node.
 * @param text The data of a Text node, if importing a Text node.
 * @returns A NodeData object with the existing attributes initialized.
 */

/**
 * Keeps track of information needed to perform diffs for a given DOM node.
 */

/**
 * Keeps track whether or not we are in an attributes declaration (after
 * elementOpenStart, but before elementOpenEnd).
 */

/**
 * Keeps track whether or not we are in an element that should not have its
 * children cleared.
 */

/**
 * Known issues:
 *
 * - invalid hex string literals will be recognized as a double quoted strings
 *   but 'x' at the beginning of string will not be matched
 *
 * - delimited string literals are not checked for matching end delimiter
 *   (not possible to do with js regexp)
 *
 * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
 *   also, content of token string is not validated to contain only valid D tokens
 *
 * - special token sequence rule is not strictly following D grammar (anything following #line
 *   up to the end of line is matched as special token sequence)
 */

/**
 * Lexing or parsing positional information for error reporting.
 * This object is immutable.
 */

/**
 * Like insertBefore, but instead instead of moving the desired node, instead
 * moves all the other nodes after.
 * @param parentNode
 * @param node
 * @param referenceNode
 */

/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/

/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/

/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/

/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/

/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/

/**
 * Makes sure that a patch closes every node that it opened.
 * @param openElement
 * @param root
 */

/**
 * Makes sure that no children elements have been declared yet in the current
 * element.
 * @param functionName The name of the caller, for the error message.
 * @param previousNode
 */

/**
 * Makes sure that node being outer patched has a parent node.
 * @param parent
 */

/**
 * Makes sure that tags are correctly nested.
 * @param currentNameOrCtor
 * @param nameOrCtor
 */

/**
 * Makes sure that the caller is not inside an element that has declared skip.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the caller is not where attributes are expected.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the caller is where attributes are expected.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the current node is an Element with a matching nameOrCtor and
 * key.
 *
 * @param nameOrCtor The tag or constructor for the Element.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @return The corresponding Element.
 */

/**
 * Makes sure that there is a current patch context.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure the current node is a Text node and creates a Text node if it is
 * not.
 * @returns The Text node that was aligned or created.
 */

/**
 * Makes sure the patch closes virtual attributes call
 */

/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/

/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/

/**
 * Parse an expression and return the parse tree.
 */

/**
 * Parse and build an expression, and return the markup for that.
 */

/**
 * Parse the body of the environment, with rows delimited by \\ and
 * columns delimited by &, and create a nested list in row-major order
 * with one group per cell.  If given an optional argument style
 * ("text", "display", etc.), then each cell is cast into that style.
 */

/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/

/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/

/**
 * Parses an expression using a Parser, then returns the parsed result.
 */

/**
 * Provides a single function for parsing an expression using a Parser
 * TODO(emily): Remove this
 */

/**
 * Puts a delimiter span in a given style, and adds appropriate height, depth,
 * and maxFontSizes.
 */

/**
 * Records the element's attributes.
 * @param node The Element that may have attributes
 * @param data The Element's data
 */

/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/

/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/

/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/

/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/

/**
 * Renumbers labeled scope names to account for additional inner match
 * groups that otherwise would break everything.
 *
 * Lets say we 3 match scopes:
 *
 *   { 1 => ..., 2 => ..., 3 => ... }
 *
 * So what we need is a clean match like this:
 *
 *   (a)(b)(c) => [ "a", "b", "c" ]
 *
 * But this falls apart with inner match groups:
 *
 * (a)(((b)))(c) => ["a", "b", "b", "b", "c" ]
 *
 * Our scopes are now "out of alignment" and we're repeating `b` 3 times.
 * What needs to happen is the numbers are remapped:
 *
 *   { 1 => ..., 2 => ..., 5 => ... }
 *
 * We also need to know that the ONLY groups that should be output
 * are 1, 2, and 5.  This function handles this behavior.
 *
 * @param {CompiledMode} mode
 * @param {Array<RegExp | string>} regexes
 * @param {{key: "beginScope"|"endScope"}} opts
 */

/**
 * Retrieves the NodeData object for a Node, creating it if necessary.
 * @param node The node to get data for.
 * @param fallbackKey A key to use if importing and no key was specified.
 *    Useful when not transmitting keys from serverside render and doing an
 *    immediate no-op diff.
 * @returns The NodeData for the node.
 */

/**
 * Return whether an element is contained in a list
 */

/**
 * Returns a patcher function that sets up and restores a patch context,
 * running the run function with the provided data.
 * @param run The function that will run the patch.
 * @param patchConfig The configuration to use for the patch.
 * @returns The created patch function.
 */

/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */

/**
 * Returns the proper score for a given keyword
 *
 * Also takes into account comment keywords, which will be scored 0 UNLESS
 * another score has been manually assigned.
 * @param {string} keyword
 * @param {string} [providedScore]
 */

/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/

/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/

/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/

/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Skip a match if it has a preceding dot
 *
 * This is used for `beginKeywords` to prevent matching expressions such as
 * `bob.keyword.do()`. The mode compiler automatically wires this up as a
 * special _internal_ 'on:begin' callback for modes with `beginKeywords`
 * @param {RegExpMatchArray} match
 * @param {CallbackResponse} response
 */

/**
 * Skips the children in a subtree, allowing an Element to be closed without
 * clearing out the children.
 */

/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */

/**
 * TODO(sparhami) We should just export argsBuilder directly when Closure
 * Compiler supports ES6 directly.
 * @returns The Array used for building arguments.
 */

/**
 * TODO(sparhami) We should just export attrsBuilder directly when Closure
 * Compiler supports ES6 directly.
 * @returns The Array used for building arguments.
 */

/**
 * TODO(tomnguyen): This is a bit silly and really needs to be better typed.
 * @param fn A function to call.
 * @param a The first argument to the function.
 * @param b The second argument to the function.
 * @param c The third argument to the function.
 */

/**
 * Take an entire parse tree, and build it into an appropriate set of HTML
 * nodes.
 */

/**
 * Takes a full parse tree and settings and builds a MathML representation of
 * it. In particular, we put the elements from building the parse tree into a
 * <semantics> tag so we can also include that TeX source as an annotation.
 *
 * Note that we actually return a domTree element with a `<math>` inside it so
 * we can do appropriate styling.
 */

/**
 * The default match function to use, if one was not specified when creating
 * the patcher.
 * @param matchNode The node to match against, unused.
 * @param nameOrCtor The name or constructor as declared.
 * @param expectedNameOrCtor The name or constructor of the existing node.
 * @param key The key as declared.
 * @param expectedKey The key of the existing node.
 * @returns True if the node matches, false otherwise.
 */

/**
 * The name of the HTML attribute that holds the element key
 * (e.g. `<div key="foo">`). The attribute value, if it exists, is then used
 * as the default key when importing an element.
 * If null, no attribute value is used as the default key.
 */

/**
 * The offset in the virtual element declaration where the attributes are
 * specified.
 */

/**
 * These objects store data about MathML nodes. This is the MathML equivalent
 * of the types in domTree.js. Since MathML handles its own rendering, and
 * since we're mainly using MathML to improve accessibility, we don't manage
 * any of the styling state that the plain DOM nodes do.
 *
 * The `toNode` and `toMarkup` functions work simlarly to how they do in
 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
 */

/**
 * This file contains a list of utility functions which are useful in other
 * files.
 */

/**
 * This file contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 */

/**
 * This file contains the “gullet” where macros are expanded
 * until only non-macro tokens remain.
 */

/**
 * This file deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 */

/**
 * This file does conversion between units.  In particular, it provides
 * calculateSize to convert other units into ems.
 */

/**
 * This file does the main work of building a domTree structure from a parse
 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
 * Then, the buildExpression, buildGroup, and various groupBuilders functions
 * are called, to produce a final HTML tree.
 */

/**
 * This file holds a list of all no-argument functions and single-character
 * symbols (like 'a' or ';').
 *
 * For each of the symbols, there are three properties they can have:
 * - font (required): the font to be used for this symbol. Either "main" (the
     normal font), or "ams" (the ams fonts).
 * - group (required): the ParseNode group type the symbol should have (i.e.
     "textord", "mathord", etc).
     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
 * - replace: the character that this symbol or function should be
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
 *   character in the main font).
 *
 * The outermost map in the table indicates what mode the symbols should be
 * accepted in (e.g. "math" or "text").
 */

/**
 * This file provides support for Unicode range U+1D400 to U+1D7FF,
 * Mathematical Alphanumeric Symbols.
 *
 * Function wideCharacterFont takes a wide character as input and returns
 * the font information necessary to render it properly.
 */

/**
 * This file provides support to domTree.js and delimiter.js.
 * It's a storehouse of path geometry for SVG images.
 */

/**
 * This function adds new font metrics to default metricMap
 * It can also override existing metrics
 */

/**
 * This function is a convenience function for looking up information in the
 * metricMap table. It takes a character as a string, and a font.
 *
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
 * built using `Make extended_metrics`.
 */

/**
 * This node represents a general purpose MathML node of any type. The
 * constructor requires the type of node to create (for example, `"mo"` or
 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
 */

/**
 * This node represents a piece of text.
 */

/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/

/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/

/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/

/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/

/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/

/**
 * Truncates an array, removing items up until length.
 * @param arr The array to truncate.
 * @param length The new length of the array.
 */

/**
 * Updates a single attribute on an Element.
 * @param el The Element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value. If the value is an object or
 *     function it is set on the Element, otherwise, it is set as an HTML
 *     attribute.
 */

/**
 * Updates the state of being in a skip element.
 * @param value Whether or not the patch is skipping the children of a
 *    parent node.
 * @return the previous value.
 */

/**
 * Updates the state of being in an attribute declaration.
 * @param value Whether or not the patch is in an attribute declaration.
 * @return the previous value.
 */

/**
 * Use this to register only the HTML and MathML builders for a function (e.g.
 * if the function's ParseNode is generated in Parser.js rather than via a
 * stand-alone handler provided to `defineFunction`).
 */

/**
 * Used to keep track of the previous values when a 2-way diff is necessary.
 * This object is cleared out and reused.
 */

/**
 * Used to keep track of the previous values when a 2-way diff is necessary.
 * This object is reused.
 * TODO(sparhamI) Scope this to a patch so you can call patch from an attribute
 * update.
 */

/**
 * Used to prevent property collisions between our "map" and its prototype.
 * @param map The map to check.
 * @param property The property to check.
 * @return Whether map has property.
 */

/**
 * `beginKeywords` syntactic sugar
 * @type {CompilerExt}
 */

/**
 * `match` to match a single expression for readability
 * @type {CompilerExt}
 */

/**
 * class LinkifyIt
 **/

/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/

/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/

/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * class Token
 **/

/**
 * new Core()
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre class="hljs"><code>' +
 *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/

/**
 * new ParserBlock()
 **/

/**
 * new ParserInline()
 **/

/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/

/**
 * new Ruler()
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/

/**
 * performs a shallow merge of multiple objects into one
 *
 * @template T
 * @param {T} original
 * @param {Record<string,any>[]} objects
 * @returns {T} a single new object
 */

/**
 * provides the default 1 relevance to all modes
 * @type {CompilerExt}
 */

/**
 * this exists only to allow `scope: {}` to be used beside `match:`
 * Otherwise `beginScope` would necessary and that would look weird

  {
    match: [ /def/, /\w+/ ]
    scope: { 1: "keyword" , 2: "title" }
  }

 * @param {CompiledMode} mode
 */

/**
@typedef {import('highlight.js').CallbackResponse} CallbackResponse
@typedef {import('highlight.js').CompilerExt} CompilerExt
*/

/**
@typedef {import('highlight.js').Mode} Mode
@typedef {import('highlight.js').CompiledMode} CompiledMode
@typedef {import('highlight.js').CompiledScope} CompiledScope
@typedef {import('highlight.js').Language} Language
@typedef {import('highlight.js').HLJSApi} HLJSApi
@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
@typedef {import('highlight.js').PluginEvent} PluginEvent
@typedef {import('highlight.js').HLJSOptions} HLJSOptions
@typedef {import('highlight.js').LanguageFn} LanguageFn
@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement
@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext
@typedef {import('highlight.js/private').MatchType} MatchType
@typedef {import('highlight.js/private').KeywordData} KeywordData
@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch
@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError
@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult
@typedef {import('highlight.js').HighlightOptions} HighlightOptions
@typedef {import('highlight.js').HighlightResult} HighlightResult
*/

/**
@typedef {import('highlight.js').Mode} Mode
@typedef {import('highlight.js').CompiledMode} CompiledMode
@typedef {import('highlight.js').Language} Language
@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage
*/

/**  */

/** */

/** @implements CallbackResponse */

/** @param {Node} node */

/** @param {string} kind */

/** @param {string} s */

/** @type CompiledMode */

/** @type DataNode */

/** @type HLJSOptions */

/** @type HTMLElement */

/** @type HighlightResult */

/** @type KeywordDict */

/** @type LanguageFn */

/** @type Mode */

/** @type Node */

/** @type Record<number,boolean> */

/** @type Record<string,CompiledMode> */

/** @type Record<string,any> */

/** @type string[] */

/** @type { object & {capture?: boolean} }  */

/** @type {AnnotatedError} */

/** @type {BeforeHighlightContext} */

/** @type {CompiledMode} */

/** @type {Language} */

/** @type {ModeCallback} */

/** @type {Record<string, Language>} */

/** @type {Record<string, string>} */

/** @type {Record<string,any>} */

/** @type {RegExp | string} */

/** @type {Renderer} */

/** @type {T} */

/** @type {{type?: MatchType, index?: number, rule?: Mode}}} */

/** @typedef { {capture?: boolean} } RegexEitherOptions */

/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */

/** @typedef {import('highlight.js').CompiledMode} CompiledMode */

/** @typedef {import('highlight.js').Emitter} Emitter */

/** @typedef {import('highlight.js').ModeCallback} ModeCallback */

/** @typedef {import('highlight.js').Mode} Mode */

/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */

/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */

/** @typedef {{kind?: string, sublanguage?: boolean}} Node */

/** @typedef {{walk: (r: Renderer) => void}} Tree */

/** Bootstring parameters */

/** Convert the fragment into HTML markup. */

/** Convert the fragment into a node. */

/** Highest positive signed 32-bit float value */

/** Include this to ensure that all functions are defined. */

/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/

/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/

/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/

/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/

/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/

/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/

/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/

/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you will - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/

/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and return list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/

/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/

/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/

/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/

/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/

/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/

/** skip vs abort vs ignore
   *
   * @skip   - The mode is still entered and exited normally (and contains rules apply),
   *           but all content is held and added to the parent buffer rather than being
   *           output when the mode ends.  Mostly used with `sublanguage` to build up
   *           a single large buffer than can be parsed by sublanguage.
   *
   *             - The mode begin ands ends normally.
   *             - Content matched is added to the parent mode buffer.
   *             - The parser cursor is moved forward normally.
   *
   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
   *           never matched) but DOES NOT continue to match subsequent `contains`
   *           modes.  Abort is bad/suboptimal because it can result in modes
   *           farther down not getting applied because an earlier rule eats the
   *           content but then aborts.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is added to the mode buffer.
   *             - The parser cursor is moved forward accordingly.
   *
   * @ignore - Ignores the mode (as if it never matched) and continues to match any
   *           subsequent `contains` modes.  Ignore isn't technically possible with
   *           the current parser implementation.
   *
   *             - The mode does not begin.
   *             - Content matched by `begin` is ignored.
   *             - The parser cursor is not moved forward.
   */

/************************************************************************/

/******/

/***/

/**/

/*, endLine*/

/*, env */

/*, options, env */

/*, params, ... */

/*, silent*/

/*--------------------------------------------------------------------------*/

/*_root*/

/*eslint max-depth:0*/

/*eslint max-len:0*/

/*eslint no-bitwise:0*/

/*eslint no-labels:0,block-scoped-var:0*/

/*eslint quotes:0*/

/*eslint-disable max-len*/

/*eslint-enable max-len*/

/*from1, from2, from3, ...*/

/*function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
}*/

/*istanbul ignore if*/

/*jslint node: true */

//

//                               A}%

//                               \fontsize\sf@size\z@

//                               \math@fontsfalse\selectfont

//                          ^^^^^^^ parse this

//                         \vss}%

//                         ^^ skipping these spaces

//                       ^^^ skipping those spaces

//                  ^^^^^^^ parsing link title

//                 \hskip #1\hskip \z@skip}

//                ^^ skipping these spaces

//               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%

//            ^^^^^^^^^^^ parse this

//          \vbox to\ht\z@{\hbox{\check@mathfonts

//          ^^^^^^ parsing link destination

//         \TeX}

//         \kern-.15em%

//         ^^^ skip optional whitespace here

//         push!(res, kw)

//         to make extra space appear

//         {\sbox\z@ T%

//         }%

//        3 pt / ptPerEm

//        ^^ skipping these spaces

//       (we can replace it by preventing links from being parsed in

//       [[[[[[[[[[[[[[[[[[[[[foo]()

//       ^ -- position start of line here (tab has width===1)

//       validation mode)

//       when an amount of `[` is exactly equal to `maxNesting + 1`:

//      - - -

//      - this one is a paragraph continuation

//      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}

//      note          long note           long note

//     '$a$ \expandafter\show\the\textfont2' \

//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \

//     '\expandafter\show\the\scriptfont2' \

//     '\expandafter\show\the\scriptscriptfont2' \

//     '\stop'

//     - item 4

//     /--- resume first regex match here (for [number])

//     3 / something

//     >

//     > test

//     ^ -- position start of line here:

//     ```

//     end

//     foo

//     if !(contains(kw, " ") || kw == "struct")

//     latex -interaction=nonstopmode \

//     test

//     tftopl cmsy10

//     tftopl cmsy5

//     tftopl cmsy7

//     vv

//     | \let<control sequence><equals><one optional space><token>

//     |/---- full match here for [string, "booger", number]

//    (in joyent/node some chars in auth and paths are encoded)

//    - item 3

//    >

//    > current blockquote

//    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

//    ^ -- position start of line here + shift bsCount slightly

//    delimiterFactor / 655360

//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`

//    equation           eqn                 eqn

//    i.e. in `http://example.org:foo` pathname is `:foo`

//    so `http:\\example.org\` is treated like a relative path

//    which can be constructed using other parts of the url.

//    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}

//   -

//   - item 2

//   Math.floor(655360 * maxDistFromAxis / 500) *

//   \char"123 -- hex

//   \char'123 -- octal

//   \char123  -- decimal

//   \char`\x  -- character that cannot be written (e.g. %)

//   \char`x   -- character that can be written (i.e. isn't active)

//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}

//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}

//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

//   \mkern5mu\nonscript\mskip-\medmuskip}

//   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}

//   ^ blkIndent position will be here

//   `const right = parser.parseFunction();`

//   alt: [ name2, name3 ]

//   begin: /\(/,

//   contains: [ hljs.CSS_NUMBER_MODE ]

//   enabled: Boolean,

//   end: /\)/,

//   fn: Function(),

//   follow the '(' with a '?'.

//   green        - #0E9A00

//   interesting elements

//   light-brown  - #9A9900

//   name: XXX,

//   parseGroup() returns an "ordgroup" wrapping some symbol node.

//   path(s), minWidth, height, align

//   path, width, height

//   purple       - #99069A

//   teal         - #0C9A9A

//   {\operator@font mod}\penalty900

//   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓

//  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"

//  * binary literal (e.g. 0x10)

//  * decimal literal (e.g. 9876543210, 100_000_000)

//  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)

//  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)

//  * hexadecimal literal (e.g. 0xfedcba876543210)

//  * octal literal (e.g. 0o76543210)

//  - AND markers are the same

//  - a

//  - canSplitWord - determine if these markers can be found inside a word

//  - example list

//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)

//  - item 1

//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)

//  - must have whitespace after it

//  - only from beginning of line + whitespace

//  - start - position to scan from (it should point at a valid marker);

//  - string       - string to encode

//  - they have adjacent tokens

//  0..25 map to ASCII a..z or A..Z

//  1. an empty line outside:

//  2. an empty line inside:

//  3. another tag:

//  \degree from gensymb package

//  ^^^^^ - calculating total length of this thing

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// !compiler_flags

// !mathFunction

// "  -  test"

// """heredoc strings"""

// "$bit", "$bitcount",

// "$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",

// "$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",

// "$compile", "$data", "$decimal", "$double", "$extract", "$factor",

// "$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",

// "$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",

// "$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",

// "$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",

// "$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",

// "$locate", "$match", "$method", "$name", "$nconvert", "$next",

// "$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",

// "$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",

// "$normalize", "$now", "$number", "$order", "$parameter", "$piece",

// "$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",

// "$query", "$random", "$replace", "$reverse", "$sconvert", "$select",

// "$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",

// "$storage", "$system", "$test", "$this", "$tlevel", "$username",

// "$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",

// "$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",

// "$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",

// "$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",

// "$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",

// "$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",

// "$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",

// "$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",

// "$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",

// "$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",

// "$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",

// "$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",

// "$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",

// "$ztrap", "$zversion"

// "$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",

// "Full" accents expand the width of the resulting symbol to be

// "Software"), to deal in the Software without restriction, including

// "Whitespaces".

// "Zero" preset, with nothing enabled. Useful for manual configuring of simple

// "[a-z]:" is legal (as part of array slice), but improbabal.

// "aligned" mode.

// "alt" attr MUST be set, even if empty. Because it's mandatory and

// "boldsymbol" is missing because they require the use of multiple fonts:

// "device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",

// "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts

// "false", // keyword literal already

// "false", // literal

// "get",

// "k" is the only double struck lower case letter in the KaTeX fonts.

// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in

// "middle"'s htmlBuilder.

// "not", // built_in

// "null",

// "null", // literal

// "operatorname", but also  "supsub" since \operatorname* can

// "plaintext" stand-in so that the code blocks will still get normal

// "programming" type syntax) this gives us a strong signal that we've

// "set",

// "strings"

// "true", // keyword literal already

// "true", // literal

// "undefined" behaviour, and keep them as-is. Some browser will

// "value" container

// "}". match these so the constrained rule doesn't see them

// #

// # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)

// ## → #

// #H:mm[:ss]# (24h Time)

// #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)

// #compiler option

// #h[:mm[:ss]] A# (12h Time)

// $(language_strings)

// $FlowFixMe

// $FlowFixMe Flow doesn't seem to understand span.style's type.

// $FlowFixMe More hackery

// $FlowFixMe, "environment" handler returns an environment ParseNode

// $FlowFixMe: Check if the node has a string `text` property.

// $FlowFixMe: Not every node type has a `text` property.

// $FlowFixMe: Only works for ChildType = MathDomNode.

// $FlowFixMe: Replace this with passing "svg-align" into makeVList.

// $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array

// $\n, $\r, $\t, $$

// $keyword = x

// $n

// $variables

// ${defines}

// %ROWTYPE, %TYPE, $n

// %TYPE, %ROWTYPE

// '  >\t  test '

// '  \n' -> hardbreak

// ' >   test '

// ' >\t  test '

// ';' and '.', but doesn't check for ','.

// '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'

// '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the

// '^/{4,}$',

// 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +

// 'function',

// 'self'

// 'strings'

// '{}$%@~+=:' reserved for extentions

// 'ī': '\u0131\u0304', // enable when we add Extended Latin

// (!) Some patterns skipped, to avoid collisions

// () => {} is more typical in TypeScript

// (?!_) cause 1.5x slowdown

// (LaTeX creates a new group for every $...$, $$...$$, \[...\].)

// (Strictly speaking, some of the followings are only allowed inside triple quoted interpolated strings...)

// (To see the difference, compare

// (by rendering separately and with {}s before and after, and measuring

// (c) (C) → ©

// (collapsed reference link and shortcut reference link respectively)

// (due to parsing ambiguity with list)

// (in text mode), and it's unlikely we'd see any of the math commands

// (list item is empty, list terminates before "foo"):

// (or null/undefined, meaning no further processing).

// (p) (P) -> §

// (prevents integer overflow in browsers)

// (r) (R) → ®

// (remove this when node v10 is no longer supported).

// (see The TeXBook, p. 43)

// (the height of the enclosing htmlNode) for proper vertical alignment.

// (the rest is just indented code block)

// (this avoid a conflict with Object.prototype members,

// (tm) (TM) → ™

// (until we support \ifmmode ... \else ... \fi).

// (we’ll still often loose to the css-parser unless there's '//' comment,

// (which will then blow up when regex's `illegal` sees the newline)

// **INTERNAL** Not intended for outside usage

// *.example.com

// *assuming* a font size of ptPerEm (normal size, normal style).

// *text* font, e.g. cmr10. KaTeX instead uses values from the

// +- → ±

// - The argument is a bare symbol node.

// - The argument is wrapped in {} or [], in which case Parser's

// - [...] elements, where the meaning of parentheses and escapes change

// - abstract member definitions in classes: abstract Property : int * string

// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾

// - http://en.wikipedia.org/wiki/List_of_emoticons#Western

// - http://factoryjoe.com/projects/emoticons/

// - https://github.com/wooorm/emoticon/blob/master/Support.md

// - miltiplication 2 x 4 -> 2 × 4

// - non-matching or lookahead parentheses, which do not capture. These

// - other escape sequences, so we do not misparse escape sequences as

// - record fields definitions: { A : int \n B : string }

// - return true

// - return type annotations: let f f' = f' () : returnTypeAnnotation

// - update `state.line`

// - update `state.pos`

// - update `state.tokens`

// -- comment

// -- → &ndash;, --- → &mdash;

// ---

// ------

// -:

// ... → … (also ?.... → ?.., !.... → !..)

// ....booger....

// ...because it's far more likely this is a statement terminator in

// .keyword()

// .toLowerCase().toUpperCase() should get rid of all differences

// // parameter types

// 0'a etc.

// 0-9 bold

// 0-9 bold sans

// 0-9 bold sans-serif

// 0-9 double-struck. No KaTeX font.

// 0-9 monospace

// 0-9 sans serif

// 0-9 sans-serif

// 0-prefixed implicit octal integer, optionally rational and/or imaginary

// 0.005em above the lower end of the top element.

// 0.111 em = 2 mu

// 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;

// 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398

// 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398

// 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;

// 0b...

// 0x..., decimal, float

// 0xD835 is the high surrogate for all letters in the range we support.

// 0xDC00 is the low surrogate for bold A.

// 1. Match "booger" first, ignore. Also proves that [string] does non match.

// 1. No leading slash in paths,

// 1. anything

// 1. foo " bar " baz - not replaced

// 1. gets numbers that are by themselves

// 1000 unit normal glyph height.

// 110xxxxx 10xxxxxx

// 1110xxxx 10xxxxxx 10xxxxxx

// 111110xx 10xxxxxx 10xxxxxx 10xxxxxx

// 2. Backslashes are not replaced with slashes,

// 2. Resume matching for [number]

// 2. checking this line

// 2. foo-"-bar-"-baz - replaced

// 2. numbers that are separated by _

// 2.3. Identifiers and keywords

// 26..35 map to ASCII 0..9

// 3. Match at index + 1 for [string, "booger", number]

// 3. Trailing colon is treated like a part of the path,

// 3. foo"bar"baz     - not replaced

// 3. numbers that are separted by .

// 4. If #2 and #3 result in matches, which came first?

// 4. Nothing is URL-encoded in the resulting object,

// 445-446, rules 18(a-f).

// 5. `url.parse()` does not have `parseQueryString` argument

// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,

// 65536 per pt, or 655360 per em. So, the division here truncates in

// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are

// 7.4.1 Declaration Modifiers

// : or ::

// ::

// ::=

// :=

// :\ and :-\ not used because of conflict with markdown escaping

// < and > turn into \langle and \rangle in delimiters

// <<labeles>>

// <assignment> -> <non-macro assignment>|<macro assignment>

// <def> -> \def|\gdef|\edef|\xdef

// <definition text> -> <parameter text><left brace><balanced text><right brace>

// <definition> -> <def><control sequence><definition text>

// <equals> -> <optional spaces>|<optional spaces>=

// <https://www.php.net/manual/en/book.spl.php>

// <https://www.php.net/manual/en/language.constants.predefined.php>

// <https://www.php.net/manual/en/language.types.type-juggling.php>

// <https://www.php.net/manual/en/reserved.classes.php>

// <https://www.php.net/manual/en/reserved.interfaces.php>

// <https://www.php.net/manual/en/reserved.php>

// <let assignment> -> \futurelet<control sequence><token><token>

// <macro assignment> -> <definition>|<prefix><macro assignment>

// <menclose> doesn't have a good notation option. So use <mpadded>

// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>

// <prefix> -> \global|\long|\outer

// <simple assignment> -> <let assignment>

// <tag ...

// <tag/>

// <tag>

// =:

// === expanded

// > is to avoid matches with => in other grammars

// >>

// ?>

// ???????? → ???, !!!!! → !!!, `,,` → `,`

// @ keywords

// @font-face

// @ident@ or $ident$ that might indicate this is not ruby at all

// @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):

// @ts-ignore

// A Cyrillic subset used to be supported as explicitly defined

// A Firefox \middle will strech a character vertically only if it

// A cases environment (in amsmath.sty) is almost equivalent to

// A change may cause this function to be called re-entrantly. Keep track of

// A font family applies to a group of fonts (i.e. SansSerif), while a font

// A function \module_function_name:signature or \__module_function_name:signature,

// A gathered environment is like an array environment with one centered

// A group formed by \begingroup...\endgroup is a semi-simple group

// A lookup table to determine whether a spacing function/symbol should be

// A map of CSS-based spacing functions to their CSS class.

// A negative indentation means that this is a paragraph continuation

// A position of the token this delimiter corresponds to.

// A quark \q_the_name or \q__the_name or

// A single $ can be used as an operator

// A small array. Wrap in scriptstyle so row gap is not too large.

// A variable \scope_module_and_name_type or \scope__module_ane_name_type,

// A-Z Fraktur

// A-Z a-z Fractur

// A-Z a-z bold

// A-Z a-z bold italic

// A-Z a-z italic

// A-Z a-z monospace

// A-Z a-z sans bold

// A-Z a-z sans italic

// A-Z a-z sans-serif

// A-Z bold Fraktur No font metrics

// A-Z bold italic

// A-Z bold italic sans. No font

// A-Z bold sans-serif

// A-Z bold script. No font

// A-Z bold upright

// A-Z double struck

// A-Z double-struck

// A-Z italic

// A-Z italic sans-serif

// A-Z monospace

// A-Z sans-serif

// A-Z script

// AMS Arrows

// AMS Binary Operators

// AMS Binary Relations

// AMS Delimiters

// AMS Greek

// AMS Hebrew

// AMS Misc

// AMS Negated Arrows

// AMS Negated Binary Relations

// AMSMath's automatic \dots, based on \mdots@@ macro.

// ARM syntax

// Absolute units

// Accents

// Accents are handled in the TeXbook pg. 443, rule 12.

// Accents should always be ords, even when their innards are not.

// Account for that by shifting the subscript back the appropriate

// Actually pragma

// Add \hline(s), if any.

// Add a slash for self-closing tags, e.g. `<img src="foo" /`

// Add horizontal padding

// Add it to the beginning of the expression

// Add it to the end of the expression.

// Add new tokens to pending list

// Add size-resetting classes to the inner list and set maxFontSize

// Add strut, which ensures that the top of the HTML element falls at

// Add supported submodes to string interpolation.

// Add that many symbols

// Add the attributes

// Add the bottom symbol

// Add the class

// Add the markup of the children, also as markup

// Add the styles, after hyphenation

// Add the top symbol

// Add token name, e.g. `<img`

// Add vertical padding

// Adding the second element, need to change to array.

// Additional macros, implemented by analogy with mathtools definitions:

// Address \hline and \hdashline

// Adjust the backreference.

// Adjust the clearance based on the delimiter size

// Adjust the strut of the tag to be the maximum height of all children

// Adjusting alignment.

// All environment definitions should be imported below

// All non-basic code points < n have been handled already. Find the next

// All nonmathematical Unicode characters are rendered as if they

// All of these are textords in math mode

// All of these are textords in text mode

// All of these are textords in text mode, and mathords in math mode

// All possible word characters (everything without punctuation, spaces & controls)

// Allow anything in markdown spec, forbid quote (") at the first position

// Allow letters & digits (http://test1)

// Allow return value of strict function to be boolean or string

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Also consume leading spaces in math mode, as parseSymbol

// Also keep track of what font the delimiters are in

// Alternate names for mathtools's macros:

// Alternative implementation, for memory.

// An aligned environment is like the align* environment

// An amount of virtual spaces (tabs expanded) between beginning

// Any adjustments relative to the baseline must be done in buildHTML.

// Anything after `j` was either moved up already or static.

// Append an <mo>&ApplyFunction;</mo>.

// Append the children, also as HTML nodes

// Apply attributes

// Apply inline styles

// Apply the class

// Apply the correct CSS class to choose the right font.

// Apply the options that were active when \middle was called

// Applying first lower then upper case normalizes any character:

// Arrays are part of LaTeX, defined in lttab.dtx so its documentation

// Arrays terminate newlines with `\crcr` which consumes a `\cr` if

// Arrow Symbols

// Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX

// AspectJ Constructs

// Assumes that there is a "$" at state.src[pos]

// At least give some kind of context to the user

// At this point, we should have a symbol, possibly with accents.

// At this point, we've reset the TeX-like height and depth values.

// Attribute

// Attributes

// Avoid `split(regex)` for IE8 compatibility. See #17.

// BACKREF_RE matches an open parenthesis or backreference. To avoid

// BLAH = ...;

// BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.

// BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f

// Backquoted string

// Backwards-compat with node 0.10.x

// Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;

// Base must be set if superscript or subscript are set per logic above,

// Basic support for macro definitions: \def, \gdef, \edef, \xdef

// Because we've tested for what is !optional, this block won't

// Before version 0.9, \vec used the combining font glyph U+20D7.

// Bengali (0980–09FF)

// Binary Operators

// Binary notation, e.g., %1010.

// Binary w/ underscore support

// BinaryIntegerLiteral

// Blackboard bold and script letters in Unicode range

// Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

// Block ends with either:

// Block quotes

// Block-level tag containing an inline tag.

// Blocks start with a | or > followed by a newline

// Boolean flags that determine if this delimiter could open or close

// Box manipulation

// Build a TeX annotation of the source

// Build a relation or stacked op by placing one symbol on top of another

// Build rules lookup cache

// Build schema condition

// Build the accent

// Build the argument groups in the appropriate style.

// Build the base group

// Build the environment object. Arguments and other information will

// Build the expression contained in the tree

// Build the final group as a vlist of the possible subscript, base,

// Build the inner expression

// Build the inner group in the cramped style.

// Build the inner group.

// Build the lower group

// Built-in macro variables

// Builtin constants

// But .toLowerCase() doesn't change ϑ (it's already lowercase),

// But browsers, especially Safari, are not consistent in how they

// But catch any exceptions thrown by function, treating them

// But since we support them in text mode, we need to return

// But the span still has an HTML line height.

// By default EventEmitters will print a warning if more than 10 listeners are

// CJK ideograms

// CJK symbols and punctuation, Hiragana, Katakana

// CLONE

// COMMENTS | PB IDE color: #00AAAA (Persian Green)

// CONCATENATED MODULE: ./src/MacroExpander.js

// CONCATENATED MODULE: ./src/SourceLocation.js

// CONCATENATED MODULE: ./src/buildHTML.js

// CONCATENATED MODULE: ./src/buildTree.js

// CONCATENATED MODULE: ./src/defineEnvironment.js

// CONCATENATED MODULE: ./src/delimiter.js

// CONCATENATED MODULE: ./src/environments.js

// CONCATENATED MODULE: ./src/environments/array.js

// CONCATENATED MODULE: ./src/fontMetrics.js

// CONCATENATED MODULE: ./src/functions.js

// CONCATENATED MODULE: ./src/functions/accent.js

// CONCATENATED MODULE: ./src/functions/accentunder.js

// CONCATENATED MODULE: ./src/functions/arrow.js

// CONCATENATED MODULE: ./src/functions/char.js

// CONCATENATED MODULE: ./src/functions/color.js

// CONCATENATED MODULE: ./src/functions/cr.js

// CONCATENATED MODULE: ./src/functions/def.js

// CONCATENATED MODULE: ./src/functions/enclose.js

// CONCATENATED MODULE: ./src/functions/environment.js

// CONCATENATED MODULE: ./src/functions/font.js

// CONCATENATED MODULE: ./src/functions/genfrac.js

// CONCATENATED MODULE: ./src/functions/horizBrace.js

// CONCATENATED MODULE: ./src/functions/href.js

// CONCATENATED MODULE: ./src/functions/html.js

// CONCATENATED MODULE: ./src/functions/htmlmathml.js

// CONCATENATED MODULE: ./src/functions/includegraphics.js

// CONCATENATED MODULE: ./src/functions/kern.js

// CONCATENATED MODULE: ./src/functions/lap.js

// CONCATENATED MODULE: ./src/functions/math.js

// CONCATENATED MODULE: ./src/functions/mathchoice.js

// CONCATENATED MODULE: ./src/functions/mclass.js

// CONCATENATED MODULE: ./src/functions/op.js

// CONCATENATED MODULE: ./src/functions/operatorname.js

// CONCATENATED MODULE: ./src/functions/ordgroup.js

// CONCATENATED MODULE: ./src/functions/overline.js

// CONCATENATED MODULE: ./src/functions/phantom.js

// CONCATENATED MODULE: ./src/functions/raisebox.js

// CONCATENATED MODULE: ./src/functions/rule.js

// CONCATENATED MODULE: ./src/functions/sizing.js

// CONCATENATED MODULE: ./src/functions/smash.js

// CONCATENATED MODULE: ./src/functions/sqrt.js

// CONCATENATED MODULE: ./src/functions/styling.js

// CONCATENATED MODULE: ./src/functions/symbolsOp.js

// CONCATENATED MODULE: ./src/functions/symbolsOrd.js

// CONCATENATED MODULE: ./src/functions/symbolsSpacing.js

// CONCATENATED MODULE: ./src/functions/tag.js

// CONCATENATED MODULE: ./src/functions/text.js

// CONCATENATED MODULE: ./src/functions/underline.js

// CONCATENATED MODULE: ./src/functions/utils/assembleSupSub.js

// CONCATENATED MODULE: ./src/functions/verb.js

// CONCATENATED MODULE: ./src/mathMLTree.js

// CONCATENATED MODULE: ./src/parseNode.js

// CONCATENATED MODULE: ./src/parseTree.js

// CONCATENATED MODULE: ./src/svgGeometry.js

// CONCATENATED MODULE: ./src/symbols.js

// CONCATENATED MODULE: ./src/units.js

// CONCATENATED MODULE: ./src/utils.js

// CONCATENATED MODULE: ./src/wide-character.js

// CONCATENATED MODULE: ./submodules/katex-fonts/fontMetricsData.js

// CSS classes are set accordingly

// CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`

// CSS language prefix for fenced blocks

// CSS-based MathML spaces (\nobreak, \allowbreak) are ignored

// CSSFactory, CSSFactoryT

// Cache last tested result. Used to skip repeating steps on next `match` call.

// Cache the length.

// Cached rule chains.

// Calcuate the minimal height that the delimiter can have.

// Calculate its height and depth

// Calculate the actual line width.

// Calculate the clearance between the body and line

// Calculate the depth

// Calculate the minimum size for the \surd delimiter

// Calculate the shift, width, and height of the rule, and account for units

// Call the groupBuilders function

// Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54

// Can't use built-in modes easily, as we want to use STRING in the meta

// Case 1

// Case 2

// Case 2: line is not inside the blockquote, and the last line was empty.

// Case 3: another tag found.

// Case-insensitive comparison should treat all of them as equivalent.

// Catch \hline outside array environment

// Chain can be empty, if rules disabled. But we still have to return Array.

// Changes from joyent/node:

// Char code of the starting marker (number).

// Characters omitted from Unicode range 1D400–1D7FF

// Characters that are never ever allowed in a hostname.

// Check bullet

// Check for extra closing math delimiters

// Check for listener leak

// Check for underline in setext header

// Check hr marker

// Check if module is in cache

// Check if the delimiter at this size works for the given height.

// Check if we have empty content, ie: $$.  Do not parse.

// Check if we need to add a newline after this tag

// Check non-whitespace conditions for opening and closing, and

// Check start

// Check that we got a matching closing brace

// Check the next token

// Checks if the argument is a font family or a font style.

// Chinese and Japanese.

// Choose a taller image when there are more characters.

// Clean up tokens after emphasis and strikethrough postprocessing:

// Cleanup

// Clojure keywords

// Code block (4 spaces padded)

// Colors from RouterOS terminal:

// Comes from @RunDevelopment accessed 11/29/2021 at

// Comments

// Common

// Common Apple frameworks, for relevance boost

// Common regexps

// Commonmark default options

// Compile each schema

// Compile postponed aliases

// Component sections

// Compute height and depth of this chunk.

// Compute the number of copies of the repeat symbol we will need

// Concatenate <mn>...</mn> followed by <mi>.</mi>

// Concatenate adjacent <mn>s

// Concatenate adjacent <mtext>s

// Concatenate expansion onto top of stack.

// Consolidate function names into symbol characters.

// Constants

// Consume .built_in to prevent highlighting properties and methods.

// Consume .keyword to prevent highlighting properties and methods as keywords.

// Consume spaces if requested, crucially *after* we switch modes,

// Continue while either there are more columns or more column

// Control abstraction objects

// Convert '\n' in paragraphs into <br>

// Convert from document ems to viewBox.

// Convert input options to more useable format

// Convert straight quotation marks to typographic ones

// Convert the input in UCS-2 to an array of Unicode code points.

// Copyright (C) and registered (R) symbols. Use raw symbol in MathML.

// Copyright Joyent, Inc. and other Node contributors.

// Core state object

// Count argument specifiers, and check they are in the order #1 #2 ...

// Count leftright depth (for \middle errors)

// Count matching parentheses.

// Counting embedded language score towards the host language may be disabled

// Create a group namespace for the math expression.

// Create a lookup array where anything but characters in `chars` string

// Create a new list of actual children at the correct offsets

// Create a new macro expander (gullet) and (indirectly via that) also a

// Create a new module (and put it into the cache)

// Create a span with inline SVG for the element.

// Create a strut that is taller than any list item. The strut is added to

// Create caches

// Create the line above the body

// Create the line to go below the body

// Create the stretchy element

// Currently restricted by `md.validateLink()` to http/https/ftp

// Currently without astral characters support.

// Currently, the group and options passed here do not contain

// Custom Khan Academy colors, should be moved to an optional package

// Cut head if cache was used

// Cyrillic

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// Data step and PROC SQL statements

// Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types

// Dates

// Decide what font to render the symbol in by its entry in the symbols

// Decide what sequence to use

// Decides on a style for cells in an array according to whether the given

// Decimal literal:

// Decimal numbers

// DecimalBigIntegerLiteral

// DecimalFloatingPointLiteral

// DecimalIntegerLiteral

// DecimalLiteral

// Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.

// Declarations

// Decode a generalized variable-length integer into `delta`,

// Decode percent-encoded string.

// Deconstruct ligatures in monospace fonts (\texttt, \tt).

// Default \arraystretch from lttab.dtx

// Default \jot from ltmath.dtx

// Default options

// Define \Bbbk with a macro that works in both HTML and MathML.

// Define a newOptions that removes the effect of size changes such as \Huge.

// Define dynamic patterns

// Defined via punctuation & spaces to save space

// Delimiter functions

// Delims built here should not stretch vertically.

// Depending on the sequence element we decided on, call the

// Detect list type and position after marker

// Devanagari (0900–097F)

// Direct use of these functions is discouraged and may break someday.

// Distinct highlight for proc <proc>, data, run, quit

// Do minimal possible changes by default. Need to collect feedback prior

// Do not format unclassified values. Needed to exclude highlighting of values as built_in.

// Do nothing yet.

// Does the accent need to shift for the skew of a character?

// Doesn't matter what this is.

// Doesn't seem to recognize floats which start with '.'

// Doesn't seem to recognize integers which end with '.'

// Don't allow break if \nobreak among the post-operator glue.

// Don't allow letters after any shortcut

// Don't allow letters before any shortcut (as in no ":/" in http://)

// Don't allow single-level domains, because of false positives like '//test'

// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.

// Don't use UCS-2.

// Double + single quotes replacement pairs, when typographer enabled,

// Double quote string

// Double-quoted string

// Dummy spans for determining spacings between surrounding atoms.

// E4X / JSX

// EOF

// EOF, ^, _, {, }, etc.

// EOL -> fail

// EXPAND

// EXTERNAL MODULE: ./src/katex.less

// Each element contains [textsize, scriptsize, scriptscriptsize].

// Each element in the array tells if the line is dashed.

// Each type in the `if` statement corresponds to one of the ParseNode

// Element names can contain letters, digits, hyphens, underscores, and periods

// Emits a 'removeListener' event if and only if the listener was removed.

// Emojies & shortcuts replacement logic.

// Emoticons -> Emoji mapping.

// Empty delimiters in \left and \right make null delimiter spaces.

// Enable HTML tags in source

// Enable \above{}

// Enable some language-neutral replacements + quotes beautification

// Encode attributes, e.g. `<img src="foo"`

// Encode unsafe characters with percent-encoding, skipping already

// End array group defining \\

// End cell group

// End group namespace

// End offset, zero-based exclusive.

// End the group namespace for the expression

// Environment delimiters. HTML/MathML rendering is defined in the corresponding

// Error position based on passed-in Token or ParseNode.

// Escaped identifier

// Even number of escapes, potential closing delimiter found

// EventEmitters, we do not listen for `error` events here.

// EventTarget does not have `error` event semantics like Node

// Examples where \n is required at the end:

// Exceptions for hyphenated keywords

// Exclude params in functions without params

// Execute the module function

// Explicitly disable fencing if it's not a fence, to override the

// Expose utils & helpers for easy acces from plugins

// Expression keywords prevent 'keyword Name(...)' from being

// Extract some context from the input and add it to the error

// F# allows a lot of things inside string placeholders.

// FIXME these comments should be allowed to span indented lines

// FIXME: Support Unicode identifiers.

// FPs, FPsT

// Facet sections

// Fake record for guessed links

// Fake token just to render attributes

// Figure out what size to use based on the list of functions above

// Figure out what style this fraction should be in based on the

// Figure out what style to use by pulling out the style from

// Figure out what style we're changing to.

// Filter disabled & fake schemas

// Filter emojies by whitelist, if needed

// Final arg is the expansion of the macro

// Final result should be uppercased, because it's later stored in an object

// Finalize list

// Finally, build the vlist

// Finally, we defer to `makeCustomSizedDelim` with our calculated total

// Finally, we pull the skew off of the symbol.

// Find column alignment, column spacing, and  vertical lines.

// Find next character,

// Find out if we want displaystyle, textstyle, etc.

// Find previous character,

// Find rule index by name

// Find the shift needed to align the upper end of the extra element at a point

// Find whitespaces tail of pending chars.

// Finish the basic string with a delimiter unless it's empty.

// First 2 params - rule name & source. Secondary array - list of rules,

// First check for and bypass all properly escaped delimieters

// First expand any accented base symbol according to unicodeSymbols.

// First level - chain name, '' for default.

// First, we do the same steps as in overline to build the inner group

// Flag the module as loaded

// Flatten shortcuts to simple object: { alias: emoji_name }

// Float

// Float number and x87 BCD

// Float32Array, OutT

// Flow is unable to correctly infer the type of `group`, even though it's

// Flow unable to figure out that this pathway is impossible.

// Flush pending text

// Font Shapes

// Font families

// Font size is the number large enough that the browser will

// Font weights

// For MathML purposes, use the Unicode code point.

// For MathML we write U+0338 here. buildMathML.js will then do the overlay.

// For an operator with limits, assemble the base, sup, and sub into a span.

// For any attrs that are dynamic, move them up to the right place.

// For any attrs that are static and have the same value, make sure we do

// For each one, add another prime to the list

// For each opening emphasis-like marker find a matching closing one

// For error reporting.

// For example, here we should insert a newline before blockquote:

// For example, you can use '«»„“' for Russian, '„“‚‘' for German,

// For instance, in the following example, it would match "echo /path/to/home >" as a prompt:

// For now we use the metrics for TEXT style which is what we were

// For spacing, TeX treats \hphantom as a math group (same spacing as ord).

// For spacing, TeX treats \smash as a math group (same spacing as ord).

// For validation mode we can terminate immediately

// For visual consistency, highlight type brackets as operators.

// Forbid some cunstructs from other languages to improve autodetect. In fact

// Found matching closer length.

// Found potential $, look for escapes, pos will point to

// Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).

// Fraktur

// Freeze prop if it is an object

// Freeze self

// From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.

// Function definitions

// Function that look like language construct or language construct that look like function:

// Function title

// Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)

// Fundamental objects

// Fuzzy link can't be prepended with .:/\- and non punctuation.

// GFM table, https://github.github.com/gfm/#tables-extension-

// GNU ARM syntax

// GNU MIPS syntax

// GNU preprocs

// Generate markers.

// Generate tokens for input range

// Get \strut dimensions from TeXbook page 353.

// Get an SVG that is derived from glyph U+221A in font KaTeX-Main.

// Get current arraystretch if it's not set by the environment

// Get display style as a default.

// Get first token

// Get the delimiter from font glyphs.

// Get the input

// Get the metrics of the four sections

// Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.

// Global internal variables used within the highlight.js library.

// Global label and local label

// Global options used when within external APIs. This is modified when

// Global set is equivalent to setting in all groups.  Simulate this

// Global variable: set ^globalName = 12 write ^globalName

// Grammar extensions / plugins

// Grammar extensions allow "syntactic sugar" to be added to the grammar modes

// Greek letters. Not supported, yet.

// Grouping

// Guaranteed in math mode, so eat any spaces first.

// Gujarati (0A80–0AFF)

// Gurmukhi (0A00–0A7F)

// HEX values

// HTML block

// HTML should not include another raw `<` inside a tag

// HTML tags

// HTML5 entities map: { name -> utf16string }

// Handle \text... font specifiers as best we can.

// Handle `@examples` separately to cause all subsequent code

// Handle `@param` to highlight the parameter name following

// Handle middle delimiters

// Handle sizing operators like \Huge. Real TeX doesn't actually allow

// Handle the basic code points.

// Handle the optional root index

// Hard coded exceptions

// Harpoons are from glyph U+21BD in font KaTeX Main

// Have a special case for when the value = \ because the \ is used as a

// Helper function

// Helper methods, should not be used directly

// Helpers

// Hepler to unify [reference labels].

// Here is where we defer to the inner group if it should handle

// Here's an example showing how it happens. Lets take greek letter omega:

// Here, we choose the index we should start at in the sequences. In smaller

// Here, we replace the "base" child of the supsub with our newly

// Hex number in $

// Hex w/ underscore support

// HexIntegerLiteral

// Hexadecimal notation, e.g., $7F.

// Hexadecimal numbers without fraction and optional binary power

// HexadecimalFloatingPointLiteral

// Highlighter function. Should return escaped HTML,

// Horizontal overlap functions

// Horizontal rule

// Horizontal spacing commands

// Horizontal stretchy braces

// However, in KaTeX, \textellipsis and \ldots behave the same

// However, most prefer all uppercase and uppercase is customary.

// HtmlDomNode

// I tried to stay relevant by adding only the most idiomatic

// IE does not have builtin `{ once: true }` support so we

// IE doesn't support codePointAt(). So work with the surrogate pair.

// INCLUDE ( ... ) in index_parameters in CREATE TABLE

// INTERVAL optional fields

// IP

// IPv4

// IPv6

// Ideally we could tag statics and varArgs as an array where every odd

// Identifiers in R cannot start with `_`, but they can start with `.` if it

// If Safari reforms, we should consider reverting to the glyph.

// If `expression` has no atoms on the left or right, class "leftmost"

// If `expression` is a partial group, let the parent handle spacings

// If a fence has heading spaces, they should be removed from its inner block

// If a marker sequence has an odd number of characters, it's splitted

// If any of list item is tight, mark list as tight

// If content of op is a single symbol, shift it vertically.

// If incoming style is sub/sup, use style.text() to get correct size.

// If it is `*`, then it consumes the symbol, and the macro expands to #1;

// If it wasn't ^, _, or ', stop parsing super/subscripts

// If language exists, inject class gently, without modifying original token.

// If match for this delimiter run failed, we want to set lower bound for

// If nesting level exceeded - skip tail to the end. That's not ordinary

// If no definitions are given, return empty regex to avoid replacements with 'undefined'.

// If not supported schema check requested - terminate

// If one of the delimiters can both open and close emphasis, then the

// If our base is a character box, and we have superscripts and

// If pending text exists - flush it as text token

// If previous delimiter cannot be an opener, we can safely skip

// If result starts with <pre... internal wrapper is skipped.

// If the base is a character box, then we want the skew of the

// If the input used \tag, it will set the \df@tag macro to the tag.

// If the previous delimiter has the same marker and is adjacent to this one,

// If the size changed between the parent and the current group, account

// If there exists a function with this name, parse the function.

// If there is an @ in the hostname, then non-host chars *are* allowed

// If there is more than one separator in a row, add a space

// If there is no 'error' event listener then throw.

// If there's a superscript following the primes, combine that

// If this delimiter is matched as a valid opener, `end` will be

// If this is a list, compose that list.

// If this is a symbol, create the symbol.

// If we are at the matching node, then we are done.

// If we are here - we detected HTML block.

// If we end up here, it's because of a failure to match the two delimiters

// If we get a brace, parse an expression

// If we have limits, supsub will pass us its group to handle. Pull

// If we have more than 4 spaces, the indent is 1

// If we have the input and a position, make the error a bit fancier

// If we reached the end of the sequence, return the last sequence element.

// If we succeeded, make sure there's an EOF at the end

// If we're starting a new ordered list right after

// If we're starting a new unordered list right after

// Ignore explicit spaces (e.g., \;, \,) when determining what implicit

// Ignore spaces in math mode

// In AMS multiline environments such as aligned and gathered, rows

// In KaTeX, for now, both spaces will get consumed.

// In LaTeX, the \foo's get treated as (blank) arguments.

// In SQF, a function should fit myTag_fnc_myFunction pattern

// In SQF, a variable start with _

// In TeX, there are actually three sets of dimensions, one for each of

// In aligned mode, we add one \qquad between columns;

// In all paths below, the viewBox-to-em scale is 1000:1.

// In email addresses, only the domain name should be punycoded. Leave

// In mhchem.sty, min-length is 2.0em. But these arrows might appear in the

// In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug

// In real TeX, calculations are done using integral values which are

// In text mode, we don't have superscripts or subscripts

// In this case, we separately parse the tag and wrap the tree.

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// Increment state.level and decrement it later to limit recursion.

// Indentation of subsequent lines must be the same to

// Indexed collections

// Infix generalized fractions -- these are not rendered directly, but replaced

// Initialize the state.

// Inline link

// Inline parser state

// Insert `n` at position `i` of the output.

// Insert a newline between hidden paragraph and subsequent opening

// Insert each marker as a separate text token, and add it to delimiter list

// Insert glue (spacing) after the `prev`.

// Insert one extra repeat element.

// Instance sections

// Instruction pointer

// Integer (base 10)

// Integer (base 16)

// Integer (base 2)

// Integer (base 8)

// Internal state vartiables

// Internationalization

// Is expression a string or has it something like a fraction?

// Is first token on the line

// Is the inner group a relevant horizonal brace?

// It costs 10% of performance, but allows extend terminators list, if place it

// It exists only as a hack because blockquotes override bMarks

// It is at least the size of the top, bottom, and optional middle combined.

// It should render with the height that we define. But Chrome, in

// It's a high surrogate, and there is a next character.

// It's an unmatched surrogate; only append this code unit, in case the

// It's harmless to do here, because no tokens are created. But ideally,

// It's possible to find something that LOOKS like the start of the

// It's thus treated like a \mathrel, but defined by a symbol that has zero

// It's used only when expanding tabs, you can think about it as

// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,

// Item become loose if finish with empty line,

// Items did not line up exactly as before, need to make sure old items are

// Iterate list items

// JS handles these with a special rule

// JS use strict rule purposely excludes `asm` which makes no sense

// JSX

// Just a shortcut for bulk export

// KaTeX doesn't have \par, so ignore \long

// KaTeX fonts have only capital letters for blackboard bold and script.

// KaTeX shows a kern of 1.171 * fontsize.

// KaTeX's styles don't work properly in quirks mode. Print out an error, and

// Kannada (0C80–0CFF)

// Keep adding atoms to the body until we can't parse any more atoms (either

// Keep lexing tokens until we get something that's not a prime

// Key check is done using double equals as we want to treat a null key the

// Keyed collections

// Keywords from all version of PureBASIC 5.00 upward ...

// Keywords that require a leading dot.

// Known functions - only when followed by '('

// Korean

// LIFO order

// LaTeX \arraystretch multiplies the row baseline-to-baseline distance.

// LaTeX applies \binrel spacing to \overset and \underset.

// LaTeX source2e

// LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2

// LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)

// LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.

// LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1

// LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

// LaTeX_2ε

// Languages causing problems for language detection:

// Lao (0E80–0EFF)

// Large Delimiters

// Latin Extended-A and Latin Extended-B

// Latin characters beyond the Latin-1 characters we have metrics for.

// Latin-1

// LegacyOctalIntegerLiteral (does not include underscore separators)

// Length is only used for emphasis-specific "rule of 3",

// Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)

// Let's cut tails like '    ###  ' from the end of string

// Let's roll down till block end.

// Lex the first token

// Lexer holding the input string.

// Lexer's tokenRegex is constructed to always have matching

// Limits, not symbols

// Limits, symbols

// Link reference

// Linkifier might send raw hostnames like "example.com", where url

// List marker should have at least 2 chars (digit + dot)

// List marker should have no more than 9 digits

// List of added rules. Each element is:

// List of commands that act like macros but aren't defined as a macro,

// List of emphasis-like delimiters for current tag

// List of keywords that may not require parenthesis

// List of valid html blocks names, accorting to commonmark spec

// List or symbolic operator characters from the FSharp Spec 4.1, minus the dot, and with `?` added, used for nullable operators.

// Lists

// Literals and names.

// Load & clone RE patterns.

// Load entry module and return exports

// Look through the sequence

// Lookup in pending chars is bad practice! Don't copy to other rules!

// Lookup table for parsing numbers in base 8 through 16

// Low surrogate.

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// Macro command: quit $$$OK

// Macro parameter

// Macro variables

// Macro-local label

// MacroExpander.js

// Magic constants:

// Main decoding loop: start just after the last delimiter if any basic code

// Main encoding loop:

// Main parser class

// Main rules

// Make an empty span for the rule

// Make an empty span for the space

// Make new global namespace

// Makes a symbol in the default font for mathords and textords.

// Malayalam (0D00–0D7F)

// Many primes can be grouped together, so we handle this here

// Map fancy A-Z letters to script, not calligraphic.

// Mark text from non-Latin scripts with specific classes so that we

// Markdown ASCII punctuation characters.

// Markdown-it plugin to render GitHub-style task lists; see

// Match hexadecimal numbers (&Hxxxx)

// Match line numbers

// Match octal numbers (&Oxxxxxx)

// Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)

// Matches at least 2 chars operators

// Matches tuples as well as the parameter list of a function type.

// Matching numbers immediately following punctuation and operators is

// Math and Text

// Math class commands except \mathop

// Math-BoldItalic and Main-Bold.  This is handled by a special case in

// MathML alternates for KaTeX glyphs in the Unicode private area

// MathML elements inherit from Element, which does not have style. We cannot

// MathML gives 5/18em spacing to each <mo> element.

// MathML has a limited list of allowable mathvariant specifiers; see

// MathML makes no distinction between script and caligrahpic

// MathML table lines go only between cells.

// MathML, but polyfills for subclassing is expensive per PR 1469.

// Mathematical Alphanumeric Symbols.

// May be, one day we will add .deepClone() for token and simplify this part, but

// Merge objects

// Metatags and globals:

// Misc Symbols

// Misc Unicode

// Modify ordgroup node within styling node

// Moonscript keywords

// More to read about domain names

// Most of them are declared in Microsoft.FSharp.Core

// Most operators have a large successor symbol, but these don't.

// Most symbol operators get larger in displaystyle (rule 13)

// Move everything else before the node.

// Myanmar (1000–109F)

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// NOTE: Currently, `cell` is the last item added into `row`.

// NOTE: The span class is not typed to have <math> nodes as children, and

// NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276

// NOTE: Unlike most `htmlBuilder`s, this one handles not only

// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but

// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but

// NOTE: this will cause links to behave incorrectly in the following case,

// Needed for Czech, Hungarian and Turkish text, for example.

// Negated symbols from base/fontmath.ltx:

// Never used; needed for satisfying interface.

// New KaTeX logo based on tweaking LaTeX logo

// Next scan position

// Next, prevent vertical misplacement when next to something tall.

// Next, some wide character numerals

// No alt given. Use the file name. Strip away the path.

// No closing delimter found.  Consume $ and continue.

// No error code for this since it is a Warning

// No font glyphs yet, so use a glyph w/o the oval.

// No limits, not symbols

// No limits, symbols

// No markup, just a relevance booster

// No markup, relevance booster

// No need for bounds check because we have fake entry on tail.

// Non-mathy text, possibly in a font

// NonDecimalIntegerLiteral

// Normalize input string

// Normalize newlines

// Not a perfect match.

// Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.

// Note that any invalid chars are also handled, but these

// Note that base may be empty (i.e. null) at this point.

// Note that we are returning span.depth = 0.

// Note that we assume \nomallineskiplimit to be zero,

// Note: 1000:1 ratio of viewBox to document em width.

// Note: In theory, it could be faster to parse :smile: in inline chain and

// Note: The comments on the `throw` lines are intentional, they show

// Note: calling defineFunction with a type that's already been defined only

// Note: no leading \b because floats can start with a decimal point

// Note: this is equivalent to unicode case folding; unicode normalization

// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.

// Nothing found in the cache, scan until the end of the line (or until marker is found)

// Now comes the symbol table

// Now insert the middle of the brace.

// Now split string to nodes

// Now we have a portion which is definitely the auth.

// Now, if there was a tag, build it too and append it as a final child.

// Number in H,D,T,Q,O,B,Y suffix

// Number in X,D,T,Q,O,B,Y prefix

// Numerals, ten per row.

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// Object.prototype.hasOwnProperty.call

// Obviously not all Emitters should be limited to 10. This function allows

// Octal notation, e.g., &42.

// OctalIntegerLiteral

// Octals w/ underscore support

// Old font changing functions

// On success, rule should:

// One for numbered and for unnumbered;

// One-line quoted comment string

// Only for relevance, not highlighting.

// Only some of the delimsizing functions act as fences, and they

// Opening `(` of a parameter or argument list

// Operator ParseNodes created in Parser.js from symbol Groups in src/symbols.js.

// Operators are handled in the TeXbook pg. 443-444, rule 13(a).

// Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators

// Operators/punctuation when they're not directly followed by numbers

// Optimize the case of one listener. Don't need the extra array object.

// Optional [tb] argument is engaged.

// Optional type

// Oriya (0B00–0B7F)

// Other LaTeX3 macro names that are not covered by the three rules above.

// Other keywords:

// Other numbers

// Other relative units always refer to the *textstyle* font

// Otherwise, just return a nucleus

// Otherwise, this is a text operator. Build the text from the

// Overlay the image and the argument.

// Overlay with combining character long solidus

// Overlines are handled in the TeXbook pg 443, Rule 9.

// Override CSS rule `.katex svg { width: 100% }`

// PB IDE color: #006666 (Blue Stone) + Bold

// PB IDE color: #0080FF (Azure Radiance)

// PB IDE color: #924B72 (Cannon Pink)

// PG_smth; HAS_some_PRIVILEGE

// PL/pgSQL staff

// PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold

// PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)

// PROCEDURES DEFINITIONS

// PS literals are pretty verbose so it's a good idea to accent them a bit.

// PS_NEW_OBJECT_TYPE,

// Pad the text with empty lines to ensure the line number mapping is correct

// Paragraph

// Parameter/set/variable description text

// Parentheses need a short repeat element in order to avoid an overrun.

// Parse a number in the given base, starting with first `token`.

// Parse backticks

// Parse body of array with \\ temporarily mapped to \cr

// Parse each cell in its own group (namespace)

// Parse expressions into `groups`.

// Parse inlines

// Parse link destination

// Parse link label

// Parse link title

// Parse out the implicit body

// Parse out the implicit body that should be colored.

// ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in

// Parser rules

// Parser state class

// Parser.js

// Parser.js does not parse key/value pairs. We get a string.

// Parser.js throws an error if there is no argument.

// Parsing of {subarray} is similar to {array}

// Pending string is stored in concat mode, indexed lookups will cause

// Per amsopn package,

// Perl at all like $ident$, @ident@, etc.

// Permission is hereby granted, free of charge, to any person obtaining a

// Pick the desired surd glyph from a sequence of surds.

// Places to look for more emoticons info:

// Predefined color names are all missed by this RegEx pattern.

// Prepend some information

// Present in newtxmath, pxfonts and txfonts

// Prevent -> from being highlighting as an operator.

// Prevents element names from being highlighted as keywords.

// Previously calculated lower bounds (previous fails)

// Proceess '\n'

// Process ![image](<src> "title")

// Process *this* and _that_

// Process [link](<to> "stuff")

// Process autolinks '<protocol:...>'

// Process escaped chars and hardbreaks

// Process html entity - &#123;, &#xAF;, &quot;, ...

// Process html tags

// Process only opening markers

// Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.

// Property `isMiddle` not defined on `span`. It is only used in

// Property `isMiddle` not defined on `span`. See comment in

// Protocol composition

// Pseudo-types which allowed only as return type

// Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

// Pull that off.

// Punctuation

// Push fake entry to simplify cache bounds checks

// Push new token to "stream".

// Put any post-operator glue on same line as operator.

// Put everything into an ordgroup as the superscript

// Put the color background behind inner;

// Put the newline at the top level

// Quick fail on second char

// Quirk to enforce "hard termination mode" for paragraphs;

// Quite possibly a tag, lets look for a matching closing tag...

// R also supports quoted identifiers, which are near-arbitrary sequences

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)

// RFC 2396: characters not allowed for various reasons.

// Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.

// Re-assign `events` because a newListener handler could have caused the

// Re-export libraries commonly used in both markdown-it and its plugins,

// Re-order the node into the right position, preserving focus if either

// Record the height and width

// Recursive DFS

// Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em

// Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

// Ref: LaTeX source2e: }}}}\limits}

// Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%

// Ref: https://github.com/highlightjs/highlight.js/issues/2140

// Reference can not terminate anything. This check is for safety only.

// Reference cell assignment

// Reference: RFC 3986, RFC 1808, RFC 2396

// Reflection

// Regexps to match html elements

// Regular expression for Ada numeric literals.

// Relation Symbols

// Relevance boost for the most common assignment form.

// Remove element from array and put another array at those position.

// Remove the italic correction of the accent, because it only serves to

// Render a small surd.

// Replace NULL characters

// Replace content with actual value

// Replace link-like texts with link nodes.

// Replace quotes in the middle of punctuation sequence, but not

// Replace the value with its replaced value from symbol.js

// Represent delta as a generalized variable-length integer.

// Requests

// Rerender the supsub group with its new base, and store that

// Reserved classes:

// Reserved interfaces:

// Reset compiled data

// Reset scan cache

// Restore original tShift; this might not be necessary since the parser

// Return an array. The array length = number of hlines.

// Return an image span for \cancel, \bcancel, \xcancel, or \fbox

// Return nothing for an optional group

// Return the exports of the module

// Return the translated string or fallback to English if the translation is not available

// Review our test case against browsers more comprehensively.

// Row breaks within tabular environments, and line breaks at top level

// Roxygen comments

// Ruby i18n

// Ruby/Rails erb

// Rude test fuzzy links by host, for quick deny

// Rule 15c

// Rule 15d

// Rule 18b

// Rule 18c

// Rule 18c, d

// Rule 18e

// Rule definition

// Rule name

// Rule to skip pure text

// Run subparser & write tokens

// SAME position for only: [string, number] but ignoring "booger" (if it

// STATIC_MEMBER,

// STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.

// Safari wants the first row to have inline content; otherwise it

// Same for the right delimiter, but using color specified by \color

// Scan a sequence of emphasis-like markers, and determine whether

// Scan string until end reached

// Scanned through the end, didn't find anything

// Schemas compiler. Build regexps.

// Scilab has more than 2000 functions. Just list the most commons

// Search `[-+*][\n ]`, returns next pos after marker on success

// Search `\d+[.)][\n ]`, returns next pos after marker on success

// Search by name and disable

// Search by name and enable

// Search the end of the block

// Second level - diginal anchor for fast filtering by charcodes.

// See "color" for more details.

// See TeXbook p170.

// See delimsizing.js for stretchy delims.

// See details here:

// See exception for k below.

// See http://stackoverflow.com/a/8460753

// See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html

// See smash for comment re: use of makeVList

// See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to

// See the comment in the <style tag about the lookahead pattern

// See: https://github.com/highlightjs/highlight.js/issues/2833

// See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

// Separate accents from characters

// Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and

// Set a position for \hline(s) at the top of the array, if any.

// Set a position for \hline(s), if any.

// Set column alignment, row spacing, column spacing, and

// Set column spacing.

// Set default values of environments.

// Set default values of functions

// Set macro \current@color in current namespace to store the current

// Set spacing based on what is the most likely adjacent atom type.

// Set the language you want to use (you can use navigator.language to get the user's language)

// Set the row spacing. In MathML, we specify a gap distance.

// Setting node.data resets the cursor in IE/Edge.

// Shell modifiers

// Shift the accent over by the skew.

// Shift the limits by the slant of the symbol. Note

// Shift the sqrt image

// Should be something like \p{\L\N\S\M} (\w but without `_`)

// Should look like "\name" or "\begin{name}".

// Simple .toLowerCase() doesn't normalize 125 code points correctly,

// Simple check to quickly interrupt scan on [link](url) at the start of line.

// Simple typographic replacements

// Simply concatenate the markup for the children together.

// Since \cancel's SVG is inline and it omits the viewBox attribute,

// Since no types are specified above, the two possibilities are

// Since start is found, we can report success here in validation mode

// Since the corresponding buildHTML/buildMathML function expects a

// Since there are numerous special names in Julia, it is too much trouble

// Since this will be passed into `makeVList` in the end, wrap the element

// Since we don't rerun the height calculation after replacing the

// Since we manually change the style sometimes (with \dfrac or \tfrac),

// Since we use the same font at all sizes, this thickness doesn't scale.

// Single line expression

// Single-quoted string

// Sinhala (0D80–0DFF)

// Sized delimiters are never centered.

// Skip aliases for filtered emojies, to reduce regexp

// Skip char codes from given position

// Skip char codes reverse from given position - 1

// Skip content of html tag links

// Skip content of markdown links

// Skip single token by running all rules in validation mode;

// Skip spaces from given position in reverse.

// Skip spaces from given position.

// Skip text characters for text token, place those to pending buffer

// Small delimiters are scaled down versions of the same font, so we

// So if the character is in a script we support but we

// So now we use an SVG.

// So treat this one as a special case

// So we can calculate the relevant row. No traverse necessary.

// So we need to avoid U+2223 and use plain "|" instead.

// So we put another empty span inside the depth strut span.

// So what we do: We execute two matchers, one resuming at the same

// So, we have to move all those markers after subsequent s_close tags.

// Some Unicode characters are implemented with macros to mathtools functions.

// Some abbreviations for commonly used strings.

// Some control constructions: do ##class(Package.ClassName).Method(), ##super()

// Some different length found, put it in cache as upper limit of where closer can be found

// Some editors do not deal well with wide characters. So don't write the

// Some groups can return document fragments.  Handle those by wrapping

// Some hackery to make ParseError a prototype of Error

// Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.

// Some keywords more or less unique to I7, for relevance.

// Some of these have a "-token" suffix since these are also used as `ParseNode`

// Some tags can terminate paragraph without empty line.

// Somewhat arbitrary list of builtin functions and values.

// Source: https://www.freepascal.org/docs-html/ref/refse6.html

// Spaces are generated by adding an actual space. Each of these

// Spaces based on just a CSS class.

// Spacing, based on amsmath.sty's override of LaTeX defaults

// Special (global) variables: write %request.Content; Built-in classes: %Library.Integer

// Special case for a simple path URL

// Special case:

// Special case: only hexadecimal binary powers can contain fractions

// Special generic mutator that's called for any attribute that does not

// Specific

// Square roots are handled in the TeXbook pg. 443, Rule 11.

// Stack of delimiter lists for upper level tags

// Stan comment

// Standard PHP library:

// Start a new group namespace

// Start group for first cell

// Start in math mode

// Start list

// Start offset, zero-based inclusive.

// Start tokenizing from the actual content (trToken.map[0])

// Statements

// Stick the character box into the base of the supsub group

// Store the settings for use in parsing

// Stores { start: end } pairs. Useful for backtrack

// Stretchy arrows with an optional argument

// Strings

// Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS

// Strip off any combining characters

// Strip off outer tag wrapper for processing below.

// Structured data

// Style changes are handled in the TeXbook on pg. 442, Rule 3.

// Style the rule to the right size

// Subscripts shouldn't be shifted by the base's italic correction.

// Super scripts and subscripts, whose precise placement can depend on other

// Superscript and subscripts are handled in the TeXbook on page

// Support explicitly typed variables that end with $%! or #.

// Switch mode back

// Switch to specified mode

// Switching from text mode back to math mode

// Symbol names preceeded by "@" each have a corresponding macro.

// Symbols from latex.ltx:

// Symbols whose definition starts with \DOTSB:

// Symbols whose definition starts with \DOTSI:

// Symbols whose definition starts with \DOTSX:

// Symbols whose definition starts with \mathbin:

// Symbols whose definition starts with \mathrel:

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// TODO support filter tags like :javascript, support inline HTML

// TODO(#963): Use a union type for this.

// TODO(alpert): More duplication than I'd like from

// TODO(edemaine)

// TODO(edemaine): Fix this.

// TODO(edemaine): allow overriding \jot via \setlength (#687)

// TODO(emily): Add a space in the middle of some of these

// TODO(emily): Figure out a good way to only print this in development

// TODO(emily): This doesn't produce the correct size for nested size

// TODO(kevinb) get the current style.

// TODO(kevinb): don't prefix with 'm'

// TODO(kevinb): implement \\sl and \\sc

// TODO(tomnguyen): assert that this is not null

// TODO:

// TODO: Create variable sized versions of the last two items. I believe that

// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't

// TODO: Fix this violation of the `span` type and possibly rename

// TODO: If used in text mode, should expand to \textellipsis.

// TODO: In LaTeX, \pounds can generate a different character in text and math

// TODO: In TeX these units are relative to the quad of the current

// TODO: Interpolation can contain any expression, so there's room for improvement here.

// TODO: Left-aligned tags.

// TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

// TODO: Remove with v12 API

// TODO: Should properly expand arg, e.g., ignore {}s

// TODO: The value type of _environments should be a type union of all

// TODO: These spaces are not required by the Ada syntax

// TODO: Use multi-class for indentation once available

// TODO: Use multi-class for leading spaces

// TODO: We need negative look-behind support to do this properly

// TODO: When font glyphs are available, delete this code.

// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

// TODO: \hskip and \mskip should support plus and minus in lengths

// TODO: apply hinting work similar to what was done in cpp.js

// TODO: characters.

// TODO: could be title.class or title.function

// TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

// TODO: find a better solution?

// TODO: fix to allow these to work with sublanguage also

// TODO: how to include ", (, ) without breaking grammars that use these for

// TODO: math mode should use \medmuskip

// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

// TODO: math mode should use \thickmuskip

// TODO: math mode should use \thickmuskip = 5mu plus 5mu

// TODO: math mode should use \thinmuskip

// TODO: other constructors (build-in, infix).

// TODO: other constructors (built-in, infix).

// TODO: remove this workaround when CM standard will allow nested links

// TODO: remove v12, deprecated

// TODO: remove with v12

// TODO: remove with version 11.0

// TODO: remove |$ hack when we have proper look-ahead support

// TODO: replace with negative look-behind when available

// TODO: split into different categories of keywords

// TODO: this is most likely an incorrect classification

// TODO: title.function vs title.class

// TRULY found a comment - vs perhaps scanning with the wrong language.

// TS gets a simpler shebang rule than JS

// Taken from TeX source, tex.web, function make_left_right

// Tall sqrt. In TeX, this would be stacked using multiple glyphs.

// Tamil (0B80–0BFF)

// TeX \char makes a literal character (catcode 12) using the following forms:

// TeX \showlists shows a kern of 1.13889 * fontsize;

// TeX but doesn't here, producing different results. If we wanted to

// TeX first reads the token that comes immediately after \expandafter,

// TeX point

// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

// TeX source: \long\def\@firstoftwo#1#2{#1}

// TeX source: \long\def\@secondoftwo#1#2{#2}

// Telugu (0C00–0C7F)

// Test for \hline at the top of the array.

// Test if potential opening or closing delimieter

// Text-mode accents

// Thai (0E00–0E7F)

// The "k" in cjk is for Korean, but we've separated Korean out

// The + prefix indicates that these fields aren't writeable

// The 0.16 and 0.09 values are found emprically. They produce an array

// The 1.125 factor was empirically determined

// The Brahmic scripts of South and Southeast Asia

// The Cyrillic script used by Russian and related languages.

// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays

// The KaTeX fonts have corners at codepoints that don't match Unicode.

// The \sqrt rule width is taken from the height of the surd character.

// The above copyright notice and this permission notice shall be included

// The body of an atom is an implicit group, so that things like

// The cancel package documentation says that cancel lines add their height

// The character box is the base of the accent group

// The detour begins at the lower left of the area labeled extraViniculum below.

// The detour proceeds one extraViniculum distance up and slightly to the right,

// The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main

// The error message

// The expansion is the token itself; but that token is interpreted

// The following builders are called only at the top level,

// The following is because we have no easy way to say "resume scanning at the

// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.

// The greediness of a superscript or subscript

// The hex numbers in the next line are a surrogate pair.

// The index is always in scriptscript style

// The matrix environments of amsmath builds on the array environment

// The metrics themselves were retreived using the following commands:

// The module cache

// The next 3 functions are here to support the mhchem extension.

// The next loop loads wide (surrogate pair) characters.

// The next ten paths support reaction arrows from the mhchem package.

// The next three arrows are from the mhchem package.

// The output of each of these commands is quite lengthy.  The only part we

// The point we want on the math axis is at 0.5 * arrowBody.height.

// The real accent group is the base of the supsub group

// The require function

// The same as abothe but without [0-9]

// The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.

// The size mappings are taken from TeX with \normalsize=10pt.

// The size of delimiters is the same, regardless of what style we are

// The slant of the symbol is just its italic correction.

// The space between adjacent `|` columns in an array definition. From

// The steps taken here are similar to the html version.

// The stmaryrd and semantic packages render the next four items by calling a

// The stmaryrd function `\minuso` provides a "Plimsoll" symbol that

// The texvc package contains macros available in mediawiki pages.

// The version in ambsy.sty works by typesetting three copies of the argument

// The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.

// The vlist contents go in a table-cell with `vertical-align:bottom`.

// The width of separator lines in {array} environments. From

// The zero-width rule gets us an equivalent to the vertical 6pt kern.

// Then browser rounding error on the parent span height will not

// Then, at the last element-to element joint, we add one extra repeat

// Then, we render its group to get the symbol inside it

// There are 2 flags for operators; whether they produce limits in

// There are four SVG images available for each function.

// There are four parts, the top, an optional middle, a repeated part, and a

// There are lots of symbols which are the same, so we add them in afterwards.

// These SVGs come from fonts: KaTeX_Size1, _Size2, etc.

// These all refer to characters from the font, so we turn them into special

// These are all they types of groups which hold single characters

// These are not language construct (function) but operate on the currently-executing function and can access the current symbol table

// These font metrics are extracted from TeX by using tftopl on cmex10.tfm;

// These ligatures are detected and created in Parser.js's `formLigatures`.

// They can't all go in the same vlist, because the note might be

// Things that don't currently seem allowed by the compiler: types definition, attributes usage.

// Think of variable extraViniculum as two detours in the SVG path.

// This actually should depend on the chosen font -- e.g. \boldmath

// This aligns with unicode-math and math fonts (except Cambria Math).

// This behavior is not strict (XeTeX-compatible) in math mode.

// This case probably shouldn't occur (this would mean the

// This cell's bottom edge will determine the containing table's baseline

// This code aligns the top of the A with the T (from the perspective of TeX's

// This code resolves issue #1234

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.

// This follows the xcolor package's HTML color model.

// This function differs from the TeX procedure in one way.

// This function might one day accept an additional argument and do more things.

// This helps minify the code, and also spotting typos using jshint.

// This is a nested size change: e.g., inner[i] is the "b" in

// This is a symbol. Just add the symbol.

// This is a text operator. Add all of the characters from the

// This is an operator with children. Add them.

// This is currently used just to correctly color a \right

// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

// This is here for relevance.

// This is necessary because initially emphasis delimiter markers (*, _, ~)

// This is to support parse stuff like "  http://foo.com  \n"

// This line is inside the blockquote.

// This looks more complicated than needed to avoid combinatorial

// This loop will assume that the first leading backtick can not

// This mode covers expression context where we can't expect a function

// This should never happen.

// This table gives the number of TeX pts in one of each *absolute* TeX unit.

// This value determines how large a pt is, for metrics which are defined

// This value is also used in katex.less; if you change it make sure the

// This was determined by running the following script:

// Thus, multiplying a length by this number converts the length from units

// Tibetan (0F00–0FFF)

// Tight list paragraphs

// To accomplish this, we wrap the results in a fragment, so the inner

// To avoid recursion in the case that type === "newListener"! Before

// To avoid this, we would subclass documentFragment separately for

// To cover the gap create by the overlaps, insert one more repeat element,

// To place a line on an edge we'll use <menclose>, if necessary.

// To write the supsub, wrap the first vlist in another vlist:

// Token class

// Too much nesting, just skip until the end of the paragraph.

// Top-level constructions.

// Total length of these series of delimiters.

// Transform combining characters into accents

// Treat under accents much like underlines.

// Trim and collapse whitespace

// Trim any trailing whitespace from control word match

// Try all possible rules.

// Try fast path regexp

// Try to check if list is terminated or continued.

// Try to parse an open brace or \begingroup

// Try to parse the input

// Try to take previous element from cache, if .test() called before

// Two paths that cover gaps in built-up parentheses.

// Two values from LaTeX source2e:

// Type casting and conversion operators:

// Type identifier

// Types

// URLs are obnoxious.

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Underline token in question using combining underscores

// Underlines are handled in the TeXbook pg 443, Rule 10.

// Undo this set at end of this group (possibly to `undefined`),

// Unhandled 'error' event

// Unicode Hex 0000 - FFFF

// Unicode Octal 0 - 377

// Unicode accent mechanism, so they fall back to Times font and look ugly.

// Unicode entries:

// Unicode middle dot

// Unicode stacked relations

// Unscale to make absolute units

// Until differentiations are added between `c` and `cpp`, `c` will

// Use '/' to close single tags (<br />)

// Use a cached length. The attributes array is really a live NamedNodeMap,

// Use delimiter.sizedDelim to generate the delimiter.

// Use direct extract instead of `regenerate` to reduse browserified size

// Use large random number as id property of the checkbox.

// Use old \color behavior (same as LaTeX's \textcolor) if requested.

// Use reversed logic in links start/end match

// Use the last character's italic correction since we use

// Used to describe the mode in error messages.

// Useful for some operations with tokens

// User agent / relevance boost

// User-defined macro functions

// Utilities

// VHDL-2008 block commenting.

// Validate emoji name

// Value types

// Variadic parameter

// Vertical spacing

// WITH|WITHOUT TIME ZONE as part of datatype

// Walk through delimiter list and replace text tokens with tags

// Watch for \nobreak along the way, and stop at \newline.

// We add font name as a css class

// We add these Latin-1 letters as symbols for backwards-compatibility,

// We allow a 6-digit HTML color spec without a leading "#".

// We also omit texvc's \O, which conflicts with \text{\O}

// We always center \left/\right delimiters, so the axis is always shifted

// We always start at the bottom, so calculate the bottom by adding up

// We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.

// We compute the corresponding \raisebox when A is rendered in \normalsize

// We create viewBoxes with 80 units of "padding" above each surd.

// We do not use rowGap[] because MathML automatically increases

// We do this within the group for the math expression, so it doesn't

// We don't pick different a height surd for \Huge. For it, we scale up.

// We don't support any wide characters outside 1D400–1D7FF.

// We don't typically have font metrics for Asian scripts.

// We don't want the php closing tag ?> to close the PHP block when

// We found the end of the link, and know for a fact it's a valid link;

// We got a limit control

// We got a prime

// We got a subscript start

// We got a superscript start

// We highlight all appearances of types, keywords, literals (string, char, number, bool)

// We kept the amssymb atom type, which is rel.

// We manually have to handle the superscripts and subscripts. This,

// We need to shift the character by its width (effectively half

// We omit the functions deprecated at

// We scan from the end, to keep position when new tags added.

// We set the parts and font based on the symbol. Note that we use

// We shift each repeat element downwards by 0.005em, to prevent a gap

// We should terminate list on style change. Remember first one to compare.

// We simulate this by adding (arraystretch - 1)em to the gap. This

// We support some letters in the Unicode range U+1D400 to U+1D7FF,

// We suppress the shift of the base of \overset and \underset. Otherwise,

// We try to support full Ada2012

// We use CSS class names like cjk_fallback, hangul_fallback and

// We will define depth in an empty span with display: table-cell.

// We'll call \varvdots, which gets a glyph from symbols.js.

// We'll make a 0.3em tall element from a SVG.

// We'll map it to AMS function \dashrightarrow. It produces the same atom.

// We'll use a single SVG to accomplish the same thing.

// We're in \oiint or \oiiint. Overlay the oval.

// We're in a \tfrac but incoming style is displaystyle, so:

// WebAssembly

// When TeX writers want to suppress spacing on an operator,

// When there is a middle bit, we need the middle part and two repeated

// Which ever results in a match first is then used. So this 3-4 step

// Workaround for phantomjs - need regex without /g flag,

// Wrap the supsub vlist in a span.msupsub to reset text-align.

// Wrap up the expression in an mrow so it is presented in the semantics

// Write a single TextNode instead of multiple nested tags.

// Write the \cancel stroke on top of inner.

// Write the line except the newline

// YAML block

// YAML spec allows non-reserved URI characters in tags.

// You can't style <math> nodes, so we wrap the node in a span.

// Zs (unicode class) || [\t\f\v\r\n]

// [ ] because \s would be too broad (matching newlines)

// [Attributes("")]

// [label]:   destination   'title'

// [link](  <href>  "title"  )

// \@argarraycr

// \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.

// \@char is an internal function that takes a grouped decimal argument like

// \@yargarraycr

// \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}

// \DeclareRobustCommand

// \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}

// \DeclareRobustCommand{\LaTeX}{L\kern-.36em%

// \DeclareRobustCommand{\copyright}{%

// \DeclareRobustCommand{\tmspace}[3]{%

// \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}

// \DeclareTextCommandDefault{\textregistered}{\textcircled{%

// \\ defaults to \newline, but changes to \cr within array environment

// \\ is a macro mapping to either \cr or \newline.  Because they have the

// \above is an infix fraction that also defines a fraction bar size.

// \baselineskip via \openup.

// \bigcirc glyph

// \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.

// \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox

// \cancel, \bcancel, or \xcancel

// \cfrac inserts a \strut into the numerator.

// \char defined in macros.js.

// \colonapprox name is same in mathtools and colonequals.

// \colonsim name is same in mathtools and colonequals.

// \color isn't supposed to affect the type of the elements it contains.

// \def \AA {\r A}

// \def \aa {\r a}

// \def\>{\mskip\medmuskip}

// \def\@hspace#1{\hskip  #1\relax}

// \def\@hspacer#1{\vrule \@width\z@\nobreak

// \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}

// \def\arraystretch{1.2}%

// \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

// \def\enskip{\hskip.5em\relax}

// \def\enspace{\kern.5em }

// \def\iff{\DOTSB\;\Longleftrightarrow\;}

// \def\impliedby{\DOTSB\;\Longleftarrow\;}

// \def\implies{\DOTSB\;\Longrightarrow\;}

// \def\lq{`}

// \def\neq{\not=} \let\ne=\neq

// \def\qquad{\hskip2em\relax}

// \def\quad{\hskip1em\relax}

// \def\rq{'}

// \dotsc uses \extra@ but not \extrap@, instead specially checking for

// \extra@ also tests for the following:

// \extrap@ checks for the following:

// \f

// \genfrac acts differently than \above.

// \genfrac treats an empty size group as a signal to use a

// \hbox, which is like \text but switching to \textstyle size.

// \hskip -\arraycolsep in amsmath

// \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}

// \keybin@ checks for the following:

// \left case below triggers parsing of \right in

// \left(x\right)^2 work correctly.

// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.

// \let\DOTSB\relax

// \let\DOTSI\relax

// \let\DOTSX\relax

// \let\bgroup={ \let\egroup=}

// \let\medspace\:

// \let\negthinspace\!

// \let\thickspace\;

// \let\thinspace\,

// \llap and \rlap render their contents in text mode

// \middle should get delimiter spacing instead.

// \mkern, \mskip

// \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

// \n

// \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

// \newcommand{\macro}[args]{definition}

// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu

// \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}

// \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}

// \newcommand{\pod}[1]{\allowbreak

// \not is defined by base/fontmath.ltx via

// \operatorname

// \phantom isn't supposed to affect the elements it contains.

// \pmb    --   A simulation of bold.

// \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

// \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

// \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

// \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

// \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

// \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

// \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

// \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

// \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

// \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

// \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

// \p{\Z\Cc} (white spaces + control)

// \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)

// \r

// \relax stops the expansion, but shouldn't get returned (a

// \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}

// \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}

// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}

// \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}

// \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin

// \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript

// \renewcommand{\macro}[args]{definition}

// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}

// \rightdelim@ checks for the following:

// \scriptstyle, which has a scale factor of 0.7 (see Options.js).

// \t

// \tag@in@display form of \tag

// \textcircled uses the \bigcirc glyph, so it needs some

// \textdegree from inputenc package

// \u2061 is the same as &ApplyFunction;

// \v

// \vdots is a macro

// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@

// \verb and \verb* are dealt with directly in Parser.js.

// ^ listIndent position will be here

// _ implied for relevance only, do not highlight

// __beforeBegin is considered private API, internal use only

// __webpack_public_path__

// `<Array<Array<number>>`, etc.

// `<From extends string>`

// `<T, A extends keyof T, V>`

// `<blah />` (self-closing)

// `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`

// `<something>`

// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by

// `\Huge a \small b`. Override the old size (the `reset-` class)

// `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.

// `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.

// ```

// `basicLength` is the number of basic code points.

// `begin` when it runs.  Ie, no features have been added, but we've just made

// `class` as a keyword

// `compileMatch` being the perfect small example of now allowing a grammar

// `handledCPCount` is the number of code points that have been handled;

// `i` was supposed to wrap around from `out` to `0`,

// `index` is the index of the next character to be consumed.

// `mu` units scale with scriptstyle/scriptscriptstyle.

// `no-way`, etc.

// `overflow:hidden`, the strut's top edge will sit on the item's line box's

// `return some()`, `else if()`, `(x*sum(1, 2))`

// `test/markup/r/roxygen.txt` for an example.

// `};` combined is just to avoid tons of useless punctuation nodes

// a 0 width match but not a begin/end match so it's not caught by the

// a before plugin can usurp the result completely by providing it's own

// a group, we scale down the inner size based on the size.

// a number tries to eat the following slash to prevent treating it as a regexp

// a paragraph (validation mode only)

// a paragraph, first line should not be empty.

// a paragraph, it should start with 1.

// a prior rule that was ignored".

// a space separates the REPL prefix from the actual code

// a type annotation is a

// a whole lot of languages

// a word boundary is not sufficient, so instead we check for a word boundary

// a-z Fraktur

// a-z bold Fraktur.   No font.

// a-z bold italic

// a-z bold italic sans. No font

// a-z bold sans-serif

// a-z bold script. No font

// a-z bold upright

// a-z italic

// a-z italic sans-serif

// a-z sans-serif

// a-z script.  No font

// abstracts

// accent, we manually recalculate height.

// account for the possible size change here.

// account for the style change size.

// actions take two parameters: step (line number), prev_state and alphabet

// active character

// actually we want them all except SQL; listed are those with known implementations

// acute

// add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720

// add non-matched text to the current mode buffer

// add ī when we add Extended Latin

// added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does

// added to it. This is a useful default which helps finding memory leaks.

// adding it to the listeners, first emit "newListener".

// adds 1e5, 1e-10

// advance so we aren't stuck in an infinite loop

// affect \kern, \hspace, etc. It will capture the mandatory arguments

// affected by the height of the accent). We accomplish this by

// after which it resumes regular path geometry for the radical.

// after.

// aka. 0x7FFFFFFF or 2^31-1

// aliases

// aliases, except \bm defined below

// alignat environment is like an align environment, but one must explicitly

// all prior rules are also skipped which can result in matching the wrong

// all the sizes

// allow FORTRAN 77 style comments

// allow `C = value` for assignments so they aren't misdetected

// allow beforeMatch to act as a "qualifier" for the match

// allow common paired delmins

// allow empty columns before and after table, but not in between columns;

// allow escaped single quote followed by word char

// allow for multiple declarations, e.g.:

// allow matching common delimiters

// allow nesting

// allow null options

// allows XML everywhere and makes every XML snippet to have a much larger Markdown

// almost on the axis, so these numbers are very small. Note we

// alphabets are encoded by numbers in 16^N form, presenting its precedence

// also surrounded by parens.

// always allow unencoded alphanumeric characters

// always award the tie to the base language

// ambiguously named function calls get a relevance of 0

// amount. Note we only do this when the base is a single symbol.

// amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the

// amsmath doesn't actually define \dotsx, but \dots followed by a macro

// amsmath.sty

// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@

// an HTML injection attack - it's likely too late if this is already in

// an emphasis.

// an existential type.

// an expression such as:

// an incorrect parse, it additionally matches the following:

// an initial tab length, e.g. bsCount=21 applied to string `\t123`

// and .toUpperCase doesn't normalize 6 of them (list of exceptions:

// and .toUpperCase() doesn't change ϴ (already uppercase).

// and XML + JSON just in case

// and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).

// and adding an undo with the *new* value (in case it later gets

// and align row should be exactly the same (the rest of the rows can differ)

// and alphanumeric chars is percent-encoded.

// and compile search regexp

// and contents are set in \displaystyle.

// and for whether this closer can be an opener;

// and forces the added `\,`.

// and in PL/pgSQL RAISE ... USING

// and increment current pos

// and line

// and module_and_name may contain single underscores.

// and most used symbols that are not already declared as types.

// and no other characters are allowed but spaces;

// and possible superscript.

// and remove it afterwards.

// and smartquotes on. Could be either a String or an Array.

// and then paired delmis

// and titles (user defined function/procedure/package)

// and we don't want to mishandle e.g. `0..hex()`; this should be safe

// and we don't want to mishandle e.g. `fn(.5)`,

// annotation is also used in this language

// anonymous function

// anonymous function start

// another language than an actual comment

// another natural choice (the user requested math mode), but

// any character other than `)` as in `url()` will be the start

// appears that our fonts have the centers of the symbols already

// appropriate function.

// appropriately for use as the marginRight.

// are in text mode (wrapped in \text) because that's what it

// are multiples of 3.

// are the ones that are *expected* to be seen, so we fast-path

// are treated as their own separate text tokens. Then emphasis rule either

// argument list of parametric mixins

// argument's bin|rel|ord status

// array lines by setting attributes on the table element.

// array listing

// array ref

// as Fortran 77 style comments

// as defined in mathtools.sty.

// as defined in nccmath.sty.

// as if its meaning were ‘\relax’ if it is a control sequence that

// as relevant

// aside from the kern calculations, is copied from supsub.

// assume that it's an IPv6 address.

// async is optional

// at a position that juts 0.005 above the bottom of the top element.

// at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2

// at least one identifier

// at least the width of the accent, and overlap directly onto the

// at this point modeBuffer should just be the match

// at this point, either we have an explicit point where the

// atSign can be anywhere.

// atom type directly.

// attribute value mode

// attribute values

// attribute=value

// attributes

// auth portion cannot go past, or the last @ char is the decider.

// author to write `match` when they desire to match a single expression rather

// autoconvert URL-like texts to links

// avoid close detection with C# and JS

// avoid conflicts with other rules

// avoids the need to check length every time exec is called

// backreferences so they continue to match.

// backtick length => last seen position

// baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main

// bare number

// basic types

// basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

// be considered part of the block

// be made available to the begin and end methods using properties.

// be positioned precisely without worrying about font ascent and

// be the first character in state.src, which is known since

// because both MUST contain a decimal point and so cannot be confused with

// because emails enclosed in quotes are far more common

// because the namespace name can include `\` and we still want each

// because, if they are pointing at the same token, replaceAt

// begin...end is similar to left...right

// begin: '@',

// begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/

// beginScope just wraps the begin match itself in a scope

// beta configuration options, subject to change, welcome to discuss

// between letter variants.

// between them.

// big (PostScript) points

// bigfloat number

// bin

// binary-literal

// blackboard bold

// blackboard bold [

// blackboard bold ]

// blackboard bold {

// blackboard bold }

// block attributes

// block comment

// block parser variables

// block-level tag.

// boost for obvious PHP

// borrowed from Prism, TODO: split out into variants

// both use and namespace still use "old style" rules (vs multi-match)

// bottom.

// bounding ( ).  There could be any number of sub-expressions inside

// boxes, though visually the A appears to extend above slightly).

// brace width.

// brahmic_fallback. See ./unicodeScripts.js for the set of possible

// braket.sty

// break on Less variables @var: ...

// breve

// broken by replacing non-ASCII by nothing

// broken sequence

// buildSvgSpan_()

// built in func

// built-in types

// built-ins) are automatically generated from Julia 1.5.2 itself through

// built_in and that makes up a lot of AutoHotkey code meaning that it

// built_in may need more nuance

// built_in: 'EXTRACT',

// built_in: 'XMLELEMENT XMLPI',

// built_in: 'XMLPARSE XMLSERIALIZE',

// bundled size (e.g. a browser build).

// but I'll just leave this here.

// but can start with > (markdown blockquote)

// but guard against overflow.

// but if blockquote is terminated by another tag, they shouldn't

// but it could still be a valid reference if we roll back

// but need to check here for type check to pass.

// but not the new size.

// but only have a single open/close tag vs one per line

// but since we are centering the limits adding a full slant of

// but they are equivalent to \mathit{\Letter}.

// but they are not actually in the font, nor are they supported by the

// but we should filter last element, because it means list finish

// but, KaTeX doesn't supports math numbering yet,

// by applying a class name

// by destroying any undos currently scheduled for this name,

// calculate the amount of space between the body and the accent

// calling the `hljs.configure` function.

// calls to a function \@char dealt with in the Parser.

// can also be done as...

// can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'

// can be used for bold + and -

// can contain any constant value

// can specify which fonts to use.  This allows us to render these

// can’t be entered directly

// care about is the FONTDIMEN section. Each value is measured in EMs.

// caron

// case of a key-value pair

// case of an empty key

// catch ... so it won't trigger the property rule below

// catch middle element of the ternary operator

// category codes, only supports comment characters (14) for now

// cell height with the height/depth of the element content.

// centimeter

// change current state, then restore it after parser subcall

// change minus to hyphen and \ast to asterisk

// changes, because we don't keep state of what style we're currently

// character literal

// character literals always contain one char

// character without any vertical offset.

// characters ''

// characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more

// characters that may also include dots.

// characters with a serif font in situations where the browser would

// check for \hline(s) following the row separator

// check if it's outdented, i.e. it's inside list item and indented

// check that closing delimeter isn't followed by a number

// check that first two markers match and adjacent

// check that last two markers are adjacent (we can safely assume they match)

// check the block quote marker

// chop off from the tail first.

// cicero (12 didot)

// circumflex

// class Car

// class Car extends vehicle

// class declaration

// class name

// class tag

// className: "fn_ref",

// className: "fn_ref_params",

// className: 'built_in',

// classNames in built-in modes.

// classes

// classes and objects

// close raw block

// close tag

// closing block statement

// closing delimiters must not be a multiple of 3 unless both lengths

// closing tag

// cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.

// code snippets that should be verified when the documentation is built. They can be

// collapse all our objects back into the parent object

// collapse two adjacent text nodes

// collect unique names

// colonequals.sty

// color, mimicking the behavior of color.sty.

// column index for CSS class.

// column, but where rows are considered lines so get \jot line spacing

// comes *before* the @-sign.

// command parameters

// comment - but then if there is no readable text - good chance it is a

// comment blocks

// comment character

// comment delimiters?

// comment within a datatype comment includes no keywords

// comments

// common keywords with Java

// common variable name

// comparably-sized *Computer Modern symbol* font. At 10pt, these

// compilation

// compile lazily, because "host"-containing variables can change on tlds update.

// compiled once on the first module load.

// compiler annotation

// compiler conditionals

// compiler meta

// complexity.

// computation expressions:

// consecutive commas, not for highlighting but just for relevance

// considered for a potential match

// console.log("match", match[0], match.rule && match.rule.begin)

// console.log(_line, _state.toString(16), _type.toString(16))  // for test

// console.log(trToken.meta); // for test

// constructor

// consume command token

// consume one optional space

// consume optional equals

// containers: ie, `vector <int> rooms (9);`

// contenteditable mode only, treats that span as if it contains some

// context as 'meta-string' and there's no syntax to remove explicitly set

// contextual

// contractions - can't we'd they're let's, etc

// control codes

// control word

// convertion to flat mode.

// copy of this software and associated documentation files (the

// correct bounding ( ) before the =>.  There could be any number of

// correspond to lines that have additional \jot added to the

// could be a comma delimited list of params to a function call

// could be a comment in many languages so do not count

// could mess up indices when quote length != 1

// count heading level

// covers label === '' and label === undefined

// create a fake namespace object

// css classes applied to them - and one bad language won't break the

// css variables

// custom method guard

// cut lines range from source.

// dart:core

// dart:html

// date plus time

// dates must have a certain length, this prevents matching

// decent number of iterations yet our index (cursor position in our

// decimal

// decimal floating-point-literal (subsumes decimal-literal)

// decimal integer/float, optionally exponential or rational, optionally imaginary

// decinteger is optionally imaginary

// decinteger, bininteger, octinteger, hexinteger

// def method_name (end of line)

// def method_name(

// def method_name;

// default

// default to 1 relevance if not specified

// default to space if it's the beginning of the line

// default to space if it's the end of the line

// default unit is bp, per graphix package.

// default value, i.e. \arraycolsep in article.cls

// defaults.

// define __esModule on exports

// define getter function for harmony exports

// define getter functions for harmony exports

// define sub-mode in order to prevent highlighting of block-parameter named "as"

// define these here so at least they only have to be

// defineEnvironment definitions.

// defined later

// definition and shouldn't highlight anything that looks like one:

// delete node.children;

// delimited by backticks (`…`), which may contain escape sequences. These are

// descriptions, so trailing separators don't get lost.

// diaresis

// didot

// different parents without issue

// dimension

// dir()

// disable "rule of 3" length checks meant for emphasis

// disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE

// disable rendering.

// displacing the radiused corner between surd and viniculum. The radius is

// displaystyle, and whether they are symbols and should grow in

// displaystyle. These four groups cover the four possible choices.

// distinguish Unicode characters without metrics and those for

// distribute, sublicense, and/or sell copies of the Software, and to permit

// ditto tilde2, tilde3, & tilde4

// ditto widehat2, widehat3, & widehat4

// do `instanceof HTMLElement` / `instanceof SVGElement`, since el can belong

// do not highlight inbuilt strings as variable or xml element names

// do this early so compiler extensions generally don't have to worry about

// do this later so compiler extensions that come earlier have access to the

// doctags shouldn’t be treated as such. See

// document as \xrightarrow or \xrightleftharpoons. Those have

// document attributes

// does a reasonable job of adjusting arrays containing 1 em tall content.

// does not include {} or HTML tags `</`

// doesn't allow spaces in keywords anyways and we still check for the boundary

// doesn't look funny in math mode.

// doing before.  Before attempting to get the current style we

// don't actually apply this here, but instead it is used either in

// don't expand it later even if a macro with the same name is defined

// don't expand the token

// don't have a great class for this?

// don't have metrics for it, just use the metrics for

// dot above

// dot-operator: only operators that start with a dot are allowed to use dots as

// dotless i or j

// dots

// double acute

// double quote escape

// double quoted keys

// doublerightarrow is from glyph U+21D2 in font KaTeX Main

// drop first #

// due to browser floating point rounding error.

// e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]

// e.g. allow ` |---| `, disallow ` ---||--- `

// e.g., \let\foo=\frac \def\frac{\relax} \frac12

// each columns.

// each item, where it will determine the item's baseline. Since it has

// eat !important after mixin call or it will be colored as tag

// eat "if" prior to string so that it won't accidentally be

// eat recursive parens in sub expressions

// eat spaces (not newlines) so we can find

// eat to avoid empty params

// eat up @'s in emails to prevent them to be recognized as doctags

// eats variables

// echo /path/to/home > t.exe

// edge case for when illegal matches $ (end of line) which is technically

// either REPL-like or script-like, but are usually REPL-like and therefore we apply

// either a single non escaped char...

// either default to a sans serif or render a placeholder character.

// element is a string and every even element is any, but this is hard.

// element to be treated as its own *individual* title

// element to cover the gap created by the shifts.

// elements will be able to directly interact with their neighbors. For

// else: stay in AFTER_COMMENT_2 (`--->`)

// emit removeListener for all listeners on all events

// empty strings for alt or link text

// encode(string, keepEscaped)

// encoded sequences.

// encroach on the ink of the viniculum. But that padding is not

// end

// end if another doc comment

// end parens

// end the highlighting if we are on a new line and the line does not have at

// end: '$',

// end: /\(/,

// endsWithParent: true,

// enough info to set tag alignment. `leqno` is in Settings but it is

// ensure non-empty stack

// ensure the number is not part of an identifier, and we cannot use

// entire highlighter

// enums

// environment name starts with the letter 'd'.

// equal to its position, otherwise it's `-1`.

// escaped

// escaped constrained formatting marks (i.e., \* \_ or \`)

// escaped pipe, '\|'

// escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)

// eslint-disable-line no-constant-condition

// eslint-disable-line no-unreachable

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion

// eslint-disable-next-line no-console

// eslint-disable-next-line no-restricted-syntax

// eslint-disable-next-line no-undefined

// even if a single syntax or parse hits a fatal error

// even if on:end fires an `ignore` it's still possible

// ex:

// exactly match TeX's calculation, we could do

// example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

// example, admonition & sidebar blocks

// except it operates within math mode.

// excludes method names from keyword processing

// excluding ExponentPart

// existing position but also skip the current rule ONLY". What happens is

// expand only an expandable token

// expand only expandable tokens

// expandOnce returns Token if and only if it's fully expanded.

// explicit decimal/binary/octal/hexadecimal integer,

// explosion under V8. It effectively means `| var1 var2 ... |` with

// exponentfloat, pointfloat

// export an "instance" of the highlighter

// exports.replaceEntities     = replaceEntities;

// expose the module cache

// expose the modules object (__webpack_modules__)

// express version except: ! & * < = > !! # @ @@

// extern void f(int), g(char);

// extra complexity to deal with `enum class` and `enum struct`

// extract

// extracted by mini-css-extract-plugin

// fail if list has another type

// fail if terminating block found

// falls at the depth of the expression.

// false match and not a comment.

// false under headerless corner case

// families

// far looking only for "number", ignoring potential string matches (or

// fences (``` lang, ~~~ lang)

// figure out if it's got a host

// find regex

// find the first instance of any hostEndingChars

// first

// first character of the second line should be '|', '-', ':',

// first handler (when ignoreIllegals is true)

// first non escape when complete

// first nonspace character.  If that nonspace character matches #1, then

// first parse unambiguous selectors (i.e. those not starting with tag)

// first/last characters.

// fixed in v12 (couldn't find any details).

// fixme: it does not include dot for numbers like .5em :(

// fka "attribute-assignment", parameters of the form 'key=value'

// flexibility required.

// flexible type name

// float        // 0.42 4.2E-1M 42E1 42M

// float number w/ exponent

// float number w/out exponent

// followed by a single ':' in many languages

// following conditions:

// fontMetrics.js:getGlobalMetrics also uses size indexes, so if

// fonts added by plugins

// for a table of space-like characters.  We use Unicode

// for a very generally defined mode (starts with a word, ends with line-end

// for a visual example please see:

// for each marker, each delimiter length modulo 3,

// for example ev_ are types of events

// for exports

// for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(""))

// for languages with keywords that include non-word characters checking for

// for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)

// for that size difference.

// for the name also

// for visual continuity with `tag {}` and because we

// foreach(x -> println("\'", x, "\',"), res)

// forward slashes are not allowed

// found in other languages

// found valid marker

// found!

// fragment id &ref

// fragment reference *ref

// from acting on that line height. So we'll call makeVList now.

// from amsmath

// from keywords

// from spec:

// from the DOM.

// function (/*str, lang*/) { return ''; }

// function types

// function used

// function, or symbol.  Used in `isDefined`.

// function/procedure declaration/definition

// function: -> =>

// function_name may contain single underscores.

// functions

// functions named as keywords, followed by '('

// functions that precede them.

// future "booger" matches that might be valid.)

// future lookups. This is required to make sure algorithm has linear

// garbage at the end of the line after title,

// generate valid links in such cases; we interpret this as

// generated accent.

// generic Less highlighter (used almost everywhere except selectors):

// generic type name

// get raw string

// getDefaultExport function for compatibility with non-harmony modules

// give it a temporary name if it doesn't have one in the meta-data

// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

// got a fragment string.

// grabs complex numbers with i

// grabs scientific notation

// gradle

// grave

// groovy specific keywords

// guard: constrained formatting mark may not be preceded by ":", ";" or

// guess schemaless links

// hack to avoid the space from being included. the space is necessary to

// hack: eating everything after the first title

// hack: prevents detection of keywords after dots

// hack: prevents detection of keywords in some circumstances

// handled by simpleSelfClosing rule

// handled in a separate mode. See `test/markup/r/names.txt` for examples.

// handling.

// hard or soft error

// has already been here, but just to make sure we can do that.

// has an argument), replacing it by its expansion. Finally TeX puts

// has some effect

// has()

// have a specific mutator.

// have historically been settled, ie the language that comes first always

// have thicker rules.

// have to do it manually.

// have to look forward here to avoid polynomial backtracking

// hbox argument type wraps the argument in the equivalent of

// header row will define an amount of columns in the entire table,

// headerIdx is the first delimiter of the current (where closer is) delimiter run

// heading (#, ##, ...)

// headings

// height

// helpers

// heredocs

// hex

// hex colors

// hexadecimal                 // 0x2a

// hexadecimal floating-point-literal (subsumes hexadecimal-literal)

// high surrogate

// highlight labeled statements

// highlight map keys and named parameters as attrs

// highlighting. variable is comparably the most accurate that actually

// highlights distributions after ~

// highlights distributions that end with special endings

// highlights the 'T' in T[,] for only Stan language distributrions

// highlights user defined distributions after ~

// highlights user defined distributions with special endings

// hmm, I wonder if we ought to include other exponent markers?

// hook is from glyph U+21A9 in font KaTeX Main

// hopefully no one would use PATH type in XMLTABLE...

// host or host()

// host-context()

// how the browser resolves relative URLs.

// however, I have yet to see handwritten Ada code where

// http://a@b?@c => user:a host:c path:/?@c

// http://a@b@c/ => user:a@b host:c

// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

// http://jgm.github.io/CommonMark/spec.html#html-blocks

// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf

// http://serverfault.com/questions/638260/

// http://spec.commonmark.org/0.15/#ascii-punctuation-character

// https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function

// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

// https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods

// https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands

// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10

// https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals

// https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals

// https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals

// https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals

// https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552

// https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411

// https://en.wikibooks.org/wiki/LaTeX/Lengths and

// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax

// https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56

// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments

// https://github.com/blog/1825-task-lists-in-all-markdown-documents

// https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460

// https://github.com/commonmark/cmark/issues/178#issuecomment-270417442

// https://github.com/facebook/flow/issues/4808

// https://github.com/highlightjs/highlight.js/issues/1086

// https://github.com/highlightjs/highlight.js/issues/2521

// https://github.com/highlightjs/highlight.js/issues/2827

// https://github.com/highlightjs/highlight.js/issues/3149

// https://llvm.org/docs/LangRef.html#namedmetadatastructure

// https://spec.commonmark.org/0.29/#line-ending

// https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals

// https://tex.stackexchange.com/a/41371

// https://tex.stackexchange.com/a/8263

// https://tex.stackexchange.com/questions/1930/when-should-one-

// https://www.postgresql.org/docs/11/static/datatype.html

// https://www.postgresql.org/docs/11/static/functions-aggregate.html

// https://www.w3.org/TR/MathML3/appendixc.html.

// https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt

// https://yaml.org/spec/1.2/spec.html#id2784064

// hyperref package allows backslashes alone in href, but doesn't

// i.e. LaTeX treats the brace similar to an op and passes it

// i.e. latest empty line should not count

// id tag

// identifiers in quotes

// ie if C++ and Arduino are tied, it's more likely to be C++

// if "booger" is ignored then we'd really need a regex to scan from the

// if (!tableToken.meta.sep) { return false; } // always evaluated true

// if a highlight was requested before DOM was loaded, do now

// if first character is '-', then second character must not be a space

// if hostname begins with [ and ends with ]

// if indent wasn't changed

// if it's indented more than 3 spaces, it should be a code block

// if it's not a basic code point

// if it's not defined (in strikethrough or 3rd party plugins),

// if opening marker is "(", switch it to closing marker ")"

// if we are called too early in the loading process

// if we cannot find a matching closing tag, then we

// if we have dependencies on parents then we need a unique

// if we have variants then essentially "replace" the mode with the variants

// if we increase `i` as we go, then subtract off its starting

// if we still have not hit it, then the entire thing is a host.

// ignore spaces before each argument

// ignore spaces before sup/subscript argument

// illegal characters that might be inside urls that would tigger the

// illegal match, we do not continue processing

// illegal syntax

// images and links

// imagnumber (digitpart-based)

// immediately by one of the variants above.

// implementation from standard node.js 'util' module

// import REPL.REPLCompletions

// in 'avrasm' autodetection test...

// in MathML if browsers supported <mlabeledtr>. Since they don't, we

// in T1 fontenc

// in TeX and KaTeX)

// in XMLTABLE

// in all copies or substantial portions of the Software.

// in terms of pts.

// in the appropriate tag that VList uses.

// in the current size.

// in the following expressions, \B in the beginning suppresses recognition of ?-sequences

// in the middle of the words, i.e.:

// in the regex in Lexer.js.  LaTeX raises the following error when \verb is

// in the sequence. Thus, scriptscript starts at index 3-3=0, script starts

// in this table, then it should be a regular space character.  Furthermore,

// in which case we don't even need to call highlight

// in, so we can't reset the size to normal before changing it.  Now

// in. Thus, to correctly calculate the size of delimiter we need around

// inch

// included in the TeX-like `height` used for calculation of

// including ExponentPart

// increase level if we find text `[`, which is not a part of any token

// incrementing `n` each time, so we'll fix that now:

// indent of the current dd block (-1 if there isn't any)

// indent of the current list block (-1 if there isn't any)

// indented literal block

// indents for each line (tabs expanded)

// indicating whether we're in the \cr case, and newLine indicating whether

// infinite loops are BAD, this is a last ditch catch all. if we have a

// initializers

// inline code snippets (TODO should get same treatment as strong and emphasis)

// inline constrained emphasis (multi-line)

// inline constrained emphasis (single line)

// inline constrained emphasis using single quote (legacy)

// inline constrained strong (multi-line)

// inline constrained strong (single line)

// inline javascript (or whatever host language) *multiline* string

// inline smart quotes

// inline unconstrained emphasis

// inline unconstrained emphasis (multi-line)

// inline unconstrained emphasis (single line)

// inline unconstrained strong (multi-line)

// inline unconstrained strong (single line)

// innermost character. To do that, we find the innermost character:

// input can be a string of keywords, an array of keywords, or a object with

// insert at front

// inside a list, it would be positioned after list marker)

// inside any of the following blocks:

// instance of ourselves, so we can be reused with many

// instantiation

// instead. Set some attributes that come included with <menclose>.

// integer in base up to 36

// interface or namespace declaration

// interface or namespace name

// interpolate-able strings

// interpolation

// into appropriate outputs.

// into opening/closing tags

// into opening/closing tags (which messes up levels inside).

// into pts.  Dividing the result by ptPerEm gives the number of ems

// ipv6 address

// irb(main):001:0>

// is a different step that is not required here.

// is a tag and not a false positive

// is currently an exercise for the caller. :-)

// is in the fence part of the operator dictionary at:

// is not immediately followed by a digit.

// is part of the source2e.pdf file of LaTeX2e source documentation.

// is()

// isTight() means current style is script/scriptscript.

// it also places each individual regular expression into it's own

// it can start an emphasis sequence or end an emphasis sequence.

// it from ending too early by matching another }

// it optimizes skips in **<...>**a**<...>** pathological case

// it to add padding to the right of the span created from

// it will be the same actual JS object

// it's considered a lazy continuation regardless of what's there

// italic h, Planck constant

// its base.

// its stroke-width will not vary with span area.

// its width) to compensate.

// jinja templates Ansible

// jldoctest Markdown blocks are used in the Julia manual and package docs indicate

// join logically computes regexps.join(separator), but fixes the

// julia-repl highlighting to them. More information can be found in Documenter's

// jump line-by-line until empty one or EOF

// just be changing the object it was passed

// k double struck

// k double-struck

// keep continuations for sub-languages

// key: everything until whitespace or = or : (taking into account backslashes)

// keywords

// keywords aren’t needed for highlighting per se, they only boost relevance

// keywords that should have no default relevance value

// keywords with less than 3 letters are reduced in relevancy

// keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',

// kind:

// label

// label reference

// labeled as an f-string

// lang()

// language is case-insensitive

// language-* takes precedence over non-prefixed class names.

// languages illegal stack

// languages that have serious errors are replaced with essentially a

// larger one:

// last token of the range, inclusive

// lastChar defaults to 0x20

// leading whitespace in a list item is already trimmed off by markdown-it

// least six spaces in the beginning

// leave only shortcuts here. But, who care...

// leaves them as text (needed to merge with adjacent text) or turns them

// left for the future implementation.

// leftarrow is from glyph U+2190 in font KaTeX Main

// less than said list item:

// lheading (---, ===)

// like "error".

// like above, to fit in with stack order

// like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the

// limit conditions when list can interrupt

// line begin offsets for fast jumps

// line comment

// line end offsets for fast jumps

// line index in src

// line-height.

// lines count

// lines ending with ; or # aren't really comments, probably auto-detect fail

// link to parser instance

// list of common 1 and 2 letter words in English

// list of elements, we normalize for different kinds of arguments

// listing and literal blocks

// literal

// literals

// local labels: %?[FB]?[AT]?\d{1,2}\w+

// locally reset within this environment).

// look-ahead prevents us from gobbling up opcodes

// looking like plain text, more likely to be a comment

// looking up the `symbols` map.

// looks like #-comment

// loose/tight mode for lists

// losing information in the process.

// low relevance prevents us from claming XML/HTML where this rule would

// macro tools

// macron

// macros

// macros, e.g. \frac\foo\foo where \foo expands to a space symbol.

// mainly checking for undefined here

// make a shallow copy

// make sure tail has spaces only

// make sure we are in the browser environment

// make the latter via document.createTextNode.

// makeOrd which ends up calling boldsymbol.

// makeVList applies "display: table-cell", which prevents the browser

// manual scores always win over common keywords

// manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html

// manually. Handle nested size changes.

// margin will shift by 1/2 that.

// mark paragraphs tight if needed

// markdown

// markdown-it default options

// markers belong to same delimiter run if:

// markers can be mixed with spaces, but there should be at least 3 of them

// markup

// match at this very spot

// match cmex7, we'd use cmex7.tfm values for script and scriptscript

// match enum items (relevance)

// match group, keeping track of the sequencing of those match groups

// match groups that make up the multi-matcher)

// match here to prevent the plain text rule below from gobbling up doctags

// match keywords in type constraints. e.g.: when 'a : null

// match strings inside of XML tags

// match to avoid strange patterns inside that may break the parsing

// match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;

// matching these here allows us to treat them more like regular CSS

// mathllap, mathrlap, mathclap

// mathtools.sty

// may contain single underscores.

// maybe inside generic

// means first tab should be expanded to 4-21%4 === 3 spaces.

// medium space

// merge adjacent text nodes into one and re-calculate all token levels

// merge all the modes/regexes into our main object

// merge those into one strong delimiter.

// metadata

// methods

// middle of word

// might have found a valid shortcut link, disable reference parsing

// millimeter

// min-length = 1.75em, so we set min-length on these next three to match.

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// mode, but among our fonts, only Main-Regular defines this character "163".

// modes. For example, to parse bold/italic only.

// modes:

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119

// modifier (character varying)

// modifiers

// module

// mojolicious block

// mojolicious line

// monad builder keywords (matches before non-bang keywords)

// monkey

// more likely to be caught in development before making it to production

// most notably, `__proto__`)

// multi line string

// multi-line string

// must come before impl/for rule later

// must ignore until the next formatting marks

// must not follow a word character or be followed by a single quote or space

// must not precede or follow a word character

// name of the function/procedure

// named keys representing scopeName (which can then point to a string or array)

// named loops and declare blocks

// named tags

// nearest following numeric constant. Without with trick we find a lot of "keywords"

// necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */

// need to rewrite the way this function is called.

// needed because we do not have look-behind on the below rule

// needed to allow markdown as a sublanguage to work

// needed to highlight these as strings and to avoid issues with

// negative look-ahead tries to avoid matching patterns that are not

// negative look-behind assertions. So instead we explicitly handle all

// negative-look forward attemps to prevent false matches like:

// negative-look forward attempts to prevent false matches like:

// nested type?

// never used

// new cicero (12 new didot)

// new didot

// new lexer (mouth) for this parser (stomach, in the language of TeX)

// new type declarations

// next code unit is the high surrogate of a surrogate pair.

// next token on stack

// nextChar defaults to 0x20

// no closing '>'

// no module.id needed

// no module.loaded needed

// no more regexes to potentially match here, so we move the cursor forward one

// no need to move the cursor, we still have additional regexes to try and

// no special dependency issues, just return ourselves

// no symbol for e.g. ^

// no trailing \b for pointfloat because it can end with a decimal point

// node or currentNode are focused by making sure that they are not detached

// node.text = node.children.join("");

// normally if you call `tokenize(state, startLine, nextLine)`,

// normalsize in scriptscriptstyle

// normalsize in scriptstyle

// normalsize in textstyle or displaystyle

// not a C keyword but is, for all intents and purposes, treated exactly like one.

// not a string technically but makes sense to be highlighted in the same style

// not be auto-detected to avoid auto-detect conflicts between C and C++

// not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)

// not implemented in the language

// not include such support nor can we be sure all the grammars depending

// not its width.

// not listening for removeListener, no need to emit

// not part of an identifier, or start of document

// not passed to Options. On the HTML side, leqno is

// not positive, but these are not literals

// not set them again.

// not within tabular/array environments.

// not()

// note: this is not an exhaustive list of contractions, just popular ones

// now we prefer to keep things local.

// nth-child()

// nth-col()

// nth-last-child()

// nth-last-col()

// null return value couldn't get implemented as a function).

// number literals

// number local label reference (backwards, forwards)

// numbered local labels

// numbers

// numbers and dates

// numbers are any valid C-style number that

// numeric literal

// object attr container

// object handles

// obtain arguments, either single token or balanced {…} group

// obviously a single digit can also be used in this fashion

// octal                       // 052

// octal-literal

// of LaTeX, which is discussed above.

// of a string, which ends with `)` (from the parent mode)

// of each line (bMarks) and real beginning of that line.

// of rendering problems that makeVList encounters in Safari.

// of span are expected to have more fields in `buildHtml` contexts.

// offsets of the first non-space characters (tabs not expanded)

// old API

// old school shim for old browsers

// on it would desire this behavior

// one comment word, then possibly more

// only regexes not matched previously will now be

// open block statement

// open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"

// open tag

// opening tag

// operator

// operator's name.

// operators, like \limsup

// optimization of pairs parse (emphasis, strikes).

// optional space

// optionally "long" in Python 2

// optionally imaginary

// optionally rational and/or imaginary

// or "rightmost", respectively, is used to indicate it.

// or '' if the source string is not changed and should be escaped externaly.

// or -1 on fail.

// or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]

// or a line with no comment

// or root check will fail every second time

// or whitespace - this does no harm in any case since our keyword engine

// other important FSharp types

// other native types or lowercase aliases

// other symbolic keywords:

// otherwise it’s identified as tag

// otherwise say they are equal, which has the effect of sorting on

// otherwise we add nothing.

// otherwise, the macro expands to #2 (without consuming the symbol).

// our matcher is [string, "booger", number]

// out the superscript and subscript and set the group to the op in

// output from inside match groups

// oval to overlay the integrand

// overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular

// overgroup is from the MnSymbol package (public domain)

// overlap

// package definition, maybe inside generic

// padding above a sqrt viniculum. Prevents image cropping.

// paragraph might "eat" one newline after it in nested lists

// paragraphs will look below nextLine for paragraph continuation,

// parameters of the form '{{#with x as | y |}}...{{/with}}'

// parens type expression

// parse out the implicit body

// parseExpression stops before '\\right'

// parser failed to find ']', so it's not a valid link

// parsing a valid shortcut link failed, fallback to reference

// parsing) still 3x behind our index then something is very wrong

// partially expanding tabs in code blocks, e.g '\t\tfoobar'

// pass

// passthrough blocks

// paste arguments in place of the placeholders

// patched tShift masked characters to look like spaces (blockquotes, list markers)

// perhaps to prevent attributes from flagging as keywords?

// persons to whom the Software is furnished to do so, subject to the

// pica

// pipe separating cells, '|'

// plaintext is always an option

// plug::ins

// points were copied; start at the beginning otherwise.

// pollute settings.macros.

// popular internet URLs

// position, but the second full matcher starting at the position after:

// positive (auto-detect, etc.)

// possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is

// possible combinations of (operator|punctuation), number.

// pragma

// pre-processor

// prefix is optional with /regex/

// preprocessor directives and fsi commands:

// prevent keywords from coloring `type`

// prevent this from getting swallowed up by function

// preventing highlighting. This code is example R code, so nested

// prevents double relevance, the keywords themselves provide

// prevents expressions like `@class` from incorrect flagging

// prevents matching the following: `match s.stype with`

// prevents these from being highlighted `title`

// previously assigned at case 0x00110

// primary tags

// process essentially allows us to say "match at this position, excluding

// production (the code has likely already done its damage by the time

// properly highlight all modifiers

// protocols that always contain a // bit.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// provided in the the arrays below, in that order.

// pseudo-selector params

// psuedo selectors

// pull out port.

// puts the bottom of the *second* row on the baseline.

// quirk for blockquotes, this line should already be checked by that rule

// quoteblocks

// quoted type name

// ratio                       // 1/2

// raw array if they wanted to perhaps manipulate it, etc.

// re-calculate levels after emphasis/strikethrough turns some text nodes

// re-export Token class to use in block rules

// re-export Token class to use in core rules

// recognized as a function definition

// ref: amsmath: \renewcommand{\smash}[1][tb]{%

// ref: cancel package: \advance\totalheight2\p@ % "+2"

// ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names

// ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/

// ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

// ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

// ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

// regex can't start with *, and it supports an "illegal" in the main mode

// regex can't start with space to parse x / 2 / 3 as two divisions

// regexp container

// regexp locations (~, ~*)

// registered function - no need in them due to all functions are highlighted,

// regular keywords

// relative or absolute path

// relative urls

// relevance 0 because this is acting as a beginKeywords really

// relevance boost

// relevance booster

// relevance booster for inheritance

// relevance comes from kewords

// relevance while preserving the original ordering - which is how ties

// relevance, the mode doesn't need to double it

// relevance: 1

// relevance: 5

// remove 'trait' when removed from KEYWORDS

// remove first and last char

// remove last }

// removed. This should be a rare case.

// render combining characters when not preceded by a character.

// renderer

// rendering that, while keeping track of where the accent is.

// repeats of the arrows

// replace backslashes with forward slashes.

// replace current node

// replace shortcut with full name

// replace the placeholder with the indicated argument

// replace token.content *before* tokens[item.token].content,

// representations instead of &LongNames; as it's not clear how to

// represents a specific font (i.e. SansSerif Bold).

// reproduce the same behavior in expansion

// request

// required block content indent (for example, if we are

// res = String["in", "isa", "where"]

// reserve at least `absHeight` space above the baseline.

// reset original base

// resolution will treat //foo/bar as host=foo,path=bar because that's

// response

// restore old state

// result.

// return "mopen" or "mclose" mclass.

// return TokenTree._walk(builder, this.rootNode);

// return type

// returnBegin: true,

// returns `true` if any rule reported success

// returns the end of the label

// rightarrowabovebar is mostly from glyph U+2192, KaTeX Main

// ring above

// rule is not matched multiple times

// rules so everything between the {} gets regular rule highlighting,

// safe/production mode - swallows more errors, tries to keep running

// same as undefined. This should be okay as the only values allowed are

// same signature, we implement them as one megafunction, with newRow

// save cursor state, we could require to rollback later

// scaled point (TeX's internal smallest unit)

// scan mark \s_the_name or \s__vthe_name,

// scan marker length

// scope: "meta",

// score.

// script

// script names

// scripting commands

// scriptspace is a font-size-independent size, so scale it

// se we still get relevance credit for JS library classes

// search end of block

// secondary tags

// sections

// see comment above the definition

// see size10.clo

// seems to be a guard against [ident]' or [ident].

// self is not valid at the top-level

// set by a CSS class applied in buildTree.js. That would have worked

// set offset past spaces and ">"

// set state.tight if we had an empty line before current tag

// setters

// severity_level

// shift the accent over to a place we don't want.

// shift the symbol so its center lies on the axis (rule 13). It

// should be a colon or the 'of' keyword

// should be placed on proper position for tests.

// should have at least two lines

// should look at TeX's behavior especially for \over and matrices.

// should not be `://` & `///`, that protects from errors in protocol name

// should skip all tokens except 'text', 'html_inline' or 'code_inline'

// should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and

// sigma1

// sigma10

// sigma11

// sigma12

// sigma13

// sigma14

// sigma15

// sigma16

// sigma17

// sigma18

// sigma19

// sigma2

// sigma20

// sigma21

// sigma22

// sigma3

// sigma4

// sigma5

// sigma6

// sigma7

// sigma8

// sigma9

// sign + magnitude, cast to number

// similar to LaTeX and in which content does not interfere with \hines.

// simple array accesses a[123] and [] and other common patterns

// simply because 1 variable just can't beat 99 properties :)

// since they appear "function like"

// single quoted keys

// single-line comments

// sit isolated from other words

// situation and we should not care about content.

// size1 is from glyph U221A in the font KaTeX_Size1-Regular

// size10: [20.74, 14.4, 12]     \huge

// size1: [5, 5, 5]              \tiny

// size2 is from glyph U221A in the font KaTeX_Size2-Regular

// size2: [6, 5, 5]

// size3 is from glyph U221A in the font KaTeX_Size3-Regular

// size3: [7, 5, 5]              \scriptsize

// size4 is from glyph U221A in the font KaTeX_Size4-Regular

// size4: [8, 6, 5]              \footnotesize

// size5: [9, 6, 5]              \small

// size6: [10, 7, 5]             \normalsize

// size7: [12, 8, 6]             \large

// size8: [14.4, 10, 7]          \Large

// size9: [17.28, 12, 10]        \LARGE

// sizes (which correspond to larger numbers in style.size) we start earlier

// skip DELIM

// skip disabled methods

// skip heading spaces for next line

// skip leading whitespaces from next line

// skip one optional space after '>'

// skip trailing spaces until the rest of the line

// smash, with optional [tb], as in AMS

// so all that's left to do is to call tokenizer.

// so even if it's empty, it has to be present.

// so no point trying to find the end of it in silent mode

// so plugins won't have to depend on them explicitly, which reduces their

// so that \strut@ is the same as \strut.

// so that the accent doesn't contribute to the bounding box.

// so that the next non-space token is parsed in the correct mode.

// so we bail

// so we can't go deleting $pattern from the original on the first

// so we need to re-calculate all offsets to appear as

// so you can force a score of 1 if you really insist

// some sort of metrics.

// someone does not put spaces around :

// sometimes they can end up matching nothing at all

// sort base on relevance

// sort!(unique!(res))

// space

// spacing should go between atoms of different classes

// span.prototype.toMarkup and symbolNode.prototype.toNode...

// special case: 1"" - count first quote as an inch

// special characters

// special handling of some words, which are reserved only in some contexts

// specify maximum number of columns in each row, and can adjust spacing between

// spit the "skipped" character that our regex choked on back into the output sequence

// sql (ada default.txt has a lot of sql keywords)

// sqrtMain path geometry is from glyph U221A in the font KaTeX Main

// src/symbols.js.

// standard bar size. \above would see size = 0 and omit the bar.

// start of big noncapture group which

// start of the sequence.

// starting with \DOTSX implies \dotso, and then \extra@ detects this case

// starts conflicts with endsParent which we need to make sure the child

// starts with domain name. So we prepend http:// in those cases,

// state.blkIndent was non-zero, we now set it to zero,

// states are union (bitwise OR) of its accepted alphabets

// statmath.sty

// sticking the base of the accent into the base of the supsub, and

// stmaryrd and semantic

// stolen form the VHDL highlighter

// str is a number with no unit specified.

// string into this file. Instead, create the string from the surrogate pair.

// string literal or template

// strings

// strings "foobar"

// strings below will be fed into the regular `keywords` engine while regex

// strings, null and undefined so the == semantics are not too weird.

// strip [ and ] from the hostname

// styles

// styles, except \boldsymbol defined below

// sub-expressions inside also surrounded by parens.

// sub-languages: are not fully supported by hljs by 11/15/2015

// sub.example.*

// subscript) but be safe.

// subscripts, the supsub will defer to us. In particular, we want

// subst would be the most accurate however fails the point of

// substitution within a macro

// sum of the lengths of the delimiter runs containing the opening and

// superimposes the characters \circ and \mathminus. Used in chemistry.

// superscript in with the primes.

// superscripts and subscripts itself.

// support \@ yet, so that's omitted, and we add \text so that the result

// supported numeric literals:

// supsub was sending us a group with no superscript or

// sure algorithm has linear complexity (see *_*_*_*_*_... case).

// surrogate pairs get special treatment

// swallow composed identifiers to avoid parsing them as keywords

// swallow namespace qualifiers before symbols

// symbol that isn't a space, consuming any spaces but not consuming the

// symbol would be most accurate however is highlighted just like

// symbol, if, else

// symbolic operators:

// symbols in symbols.js

// t back in front of that expansion.

// table

// table environment

// table for text, as well as a special case for boldsymbol because it

// table header row

// table.

// tag correctly, unless it's a single <mrow> or <mtable>.

// tags

// take no arguments so can be called without ()

// takes to render them in LaTeX.  Setting `mode: this.mode` is

// technically this could be HTML, but it smells like a type

// template string

// template variable or helper-call that is NOT html-escaped

// template variable or helper-call that is html-escaped

// temporarily append the right node, if exists

// terminal (console) tools

// terminals

// terminated by end of line (or file).

// testcase number

// testcase status and description

// text

// text content. And that min-height over-rides our desired height.

// text ordinal and is therefore not present as a symbol in the symbols

// textio

// textord in unsupported command errors but cannot be parsed as a regular

// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:

// texvc.sty

// than being forced to use `begin`.  The extension then just moves `match` into

// that affect the behavior of \dots when in text mode.  So fine for now

// that follows a \color command.

// that has to be followed by

// that the next call knows where to start from.

// that the position of the superscripts and subscripts won't be

// that to be increased. Set to zero for unlimited.

// that we are supposed to shift the limits by 1/2 of the slant,

// that we might trigger the end node because of a parent mode

// that we're passing an options parameter we should be able to fix

// the , gives away that this is not HTML

// the Latin capital letter M. This is close enough because

// the associated value may have a `className` specifying an extra CSS class

// the change in spacing).  We'll do roughly the same by detecting the

// the combined characters.

// the distinction between match/begin

// the dot at U+22C5 and gives it punct spacing.

// the entire sequence in future checks. This is required to make

// the expansion of \noexpand is the token itself

// the experience of writing (and reading grammars) a little bit nicer.

// the first instance of /, ?, ;, or # ends the host.

// the following scripts for each.

// the full match begin must be [beforeMatch][begin]

// the function class is a bit different for AspectJ compared to the Java language

// the function name

// the height of the expression, and the bottom of the HTML element

// the host field still retains them, though

// the host is the remaining to the left of the first non-host char

// the interior part of an identifier

// the last line is empty.

// the local part (i.e. everything up to `@`) intact.

// the macro expands to #2; otherwise, it expands to #3.

// the mode is ended by the title

// the most similar to tables

// the plugin can change anything in result to suite it

// the plugin can change the desired language or the code to be highlighted

// the portion of the buffer we are consuming. Updates the start pointer so

// the text of this token

// the title mode below matches only exactly once

// the token after \noexpand is interpreted as if its meaning

// the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):

// the type name is a quoted identifier:

// the very long viniculumn, then down one extraViniculum distance,

// the vlist creation or separately when there are no limits.

// them in a span.

// them.

// then either of:

// then fall into the scary lookahead-discriminator variant.

// there's a hostname.

// these are explicitly named internal function calls

// these functions inside of math expressions, so we do some special

// these next two functions are kind of hacky; probably should really be a

// they correspond to the font parameters of the extension fonts (family 3).

// they make no difference for now.

// they often put the operator by itself inside braces.

// thing. Example of matching "booger":

// things has an entry in the symbols table, so these will be turned

// things since `isMiddle` sounds like a boolean, but is a struct.

// this brakes first and last tag, but this is the only way to embed a valid html

// this could be a closing quote, rewind the stack to get a match

// this could be a lot of things (in other languages) other than params

// this does not

// this file above.

// this function assumes that first character ("[") already matches;

// this guard makes sure that we have an entire heredoc and not a false

// this happens in compileMode, where this function is called from

// this happens when we have badly behaved rules that have optional matchers to the degree that

// this is *the only* Less specific statement used in most of the sources, so...

// this is purely for cleaner HTML output

// this makes it more difficult for getCharacterMetrics() to

// this matches "empty comments"...

// this mode also handles mixin definitions and calls

// this mode works as the only relevance counter

// this outer rule makes sure we actually have a WHOLE regex and not simply

// this prevents 'new Name(...), or throw ...' from being recognized as a function definition

// this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...

// this should be ... } else { ... branch

// this should update anywhere keywords is used since

// this swallows entire URLs to avoid detecting numbers within

// this tries to find sequences of 3 english words in a row (without any

// this will be extended by TypeScript

// this works

// this would be a code block normally, but after paragraph

// this.

// this._events to be assigned to a new object

// tilde

// tilde1 is a modified version of a glyph from the MnSymbol package

// title

// to \genfrac and \above.

// to `ParcerInline` property. Probably, will switch to it sometime, such

// to a different document, so just check that it has a style.

// to add to the created `span`.

// to allow headers to work even without a preamble

// to attach the superscripts and subscripts to the inner body (so

// to avoid highlight it as a label, named parameter, or map key

// to avoid processing groups multiple times.

// to break the line in the \newline case.

// to catch known shells and boost relevancy

// to catch unknown shells but still highlight the shebang

// to each tow (via the template)

// to have any real relevance

// to lower case

// to maintain them by hand. Hence these names (i.e. keywords, literals and

// to move forward https://github.com/markdown-it/linkify-it/issues/1

// to prevent built ins from being confused as the class constructor call

// to prevent it from being confused as the function title

// to prevent it from grabbing the final : in a :: pair

// to prevent keywords from being confused as the function title

// to recognize keyframe 40% etc which are outside the scope of our

// to the expression, but tests show that isn't how it actually works.

// to the left of the last @ sign, unless some host-ending character

// tofrom is from glyph U+21C4 in font KaTeX AMS Regular

// token that comes after t (and possibly more tokens, if that token

// too much like nested array access in so many languages

// top edge and the strut's bottom edge will sit on the item's baseline,

// traits

// transitions are in the form: {prev_state: {alphabet: next_state}}

// traversed as usual, then the detour resumes. It goes right, to the end of

// treat beginning of the line as a whitespace

// treat end of the line as a whitespace

// treat next token as start of run,

// treated like a regular space character.  If a symbol or command is a key

// tricky since we need to look at the character ahead of a number to

// trim before proceeding.

// trim off any earlier non-relevant match groups (ie, the other regex

// trimming space in "-    \n  3" case, indent is 1 here

// true block-level token with .tag=='label'

// true if this sequence can be a terminator, false otherwise

// try to scan for link with schema - that's the most simple rule

// twemoji shows question

// twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular

// types

// types below. This narrowing is required to access `grp.base`.

// types for raw text tokens, and we want to avoid conflicts with higher-level

// types or variables

// unamibiguously determined from the passed-in `type` above.

// unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

// unicode-math maps U+F0 to \matheth. We map to AMS function \eth

// unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

// unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

// unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

// unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

// unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

// unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

// unicode-math says that \because is a mathord atom.

// unicode-math says that \therefore is a mathord atom.

// units

// unless an undo is already in place, in which case that older

// until the next `@`-tag on its own line to be kept as-is,

// up in Node's output if this results in an unhandled exception.

// uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)

// uppercased versions).

// url should be normalized at this point, and existing entities are decoded

// use 'blockquote' lists for termination because it's

// use contains to gobble up multiple lines to allow the block to be whatever size

// use fonts added by a plugin

// use paragraph to match terminatorRules

// use the second matcher result

// use-begingroup-instead-of-bgroup

// used in \noexpand

// used in lists to determine if they interrupt a paragraph

// used only to properly balance nested parens inside mixin call, def. arg list

// user@server is *always* interpreted as a hostname, and url

// uses this return value.

// using more strict pattern for higher relevance to increase chances of Less detection.

// usual constant length iteration very difficult to optimize in JITs.

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword

// valid but infrequent and weird

// validate a little.

// value at the end to obtain `delta`.

// value container

// value is the correct one.

// value: everything until end of line (again, taking into account backslashes)

// values from the font glyph

// values match.

// values.

// var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

// variable names cannot conflict with block identifiers

// variable radix from 2 to 36 // 2r101010, 8r52, 36r16

// variables

// vbscript

// vec is from glyph U+20D7 in font KaTeX Main

// verbatim string

// verbatim tags

// version of format and total amount of testcases

// vertical adjustment to match LaTeX.

// vertical alignment. So texHeight = span.height < span.style.height.

// very common convention

// was the first match), a simple resume would scan ahead who knows how

// was there, before, but why?

// we (currently) only care about the height of the glpyh

// we already get points for <, we don't need poitns

// we are done with functions

// we can default it to 0 to disable those checks.

// we can only have a single title

// we carefully check the opening tag to see if it truly

// we don't want to make the children type more generic since the children

// we have found an opening delimieter already.

// we have to count the parens to make sure we actually have the

// we have to count the parens to make sure we actually have the correct

// we know that it's going to be a valid blockquote,

// we may actually need this (12/2020)

// we need a copy because keywords might be compiled multiple times

// we need a null object, which inherit will guarantee

// we need our own copy of contains

// we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null

// we need this for now for jSX

// we need this to make sure size of hostname is not

// we need to pair up {} inside our subst to prevent

// we need to re-match the 'function' keyword, so that

// we reached the end, a }, or a \right)

// we replace non-ASCII char with a temporary placeholder

// we should be all text, no child nodes (unescaped HTML) - this is possibly

// we test again with ASCII char only

// we use _emit to keep track of which match groups are "top-level" to avoid double

// we'd need a separate private state variable for this purpose.

// we're seeing it)... but we yell loudly about this so that hopefully it's

// we've found a 0 width match and we're stuck, so we need to advance

// we've indicated that there is a hostname,

// webpackBootstrap

// were ‘\relax’

// whatever else, lower relevance (might not be a link at all)

// where ? is the last character of a preceding identifier, as in: `func?4`

// where both module and function_name need at least two characters and

// where scope is one of l, g or c, type needs at least two characters

// where variable_name needs at least two characters and

// which can be terminated by this one.

// which doesn't affect spacing in math mode, i.e., is transparent.

// which exists as a DOM "Host Object" (probably as C++ code). This makes the

// which gets added to `i`. The overflow checking is easier

// which is what we want for page and font-face

// which we want to simulate the letter M.

// whitespace adjacent to `|` being optional.

// whitespaces: space, tab, formfeed

// wideLatinLetterData contains exactly 26 chars on each row.

// widecheck paths are all inverted versions of widehat

// widehat1 is a modified version of a glyph from the MnSymbol package

// wider than the equation. We want the equation to control the

// width but extends to the right.  We use \rlap to get that spacing.

// will ignore it

// will require new font glyphs.

// will result in additional modes being created to scan for those keywords to

// wins in the case of a tie

// winutils

// with \limits, so we need to assign supsub style.

// with code comments

// with indent=2 becomes '  \tfoobar'

// with no additional line-height spacing. This allows the item baseline to

// with small offsets. We use two copies. We omit the vertical offset because

// with zeroing the containing mode relevance. Use case in point is Markdown that

// without EXPANSION

// without expanding it; let’s call this token t. Then TeX reads the

// without increase matcher complicity. Than can change in future.

// without limitation the rights to use, copy, modify, merge, publish,

// without overly expanding the containing line-box.

// without requiring any underlying changes to the compiler internals.

// won't happen in type-safe code

// won't know what to do with them.  This can only happen with

// word

// workaround for this case

// workaround to avoid highlighting

// works because the same htmlBuilder and mathmlBuilder are being used.

// would fail to highlight anything

// would ordinarily be expanded by TeX’s expansion rules.

// wrap, since CSS will center a .clap > .inner > span

// wrap-around to considering all matches again

// xi10

// xi11

// xi12; cmex7: 0.611

// xi13; cmex7: 0.143

// xi8; cmex7: 0.049

// xi9

// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)

// xmlelement, xmlpi - special NAME

// xmlparse, xmlserialize

// you change size indexes, change that function.

// zero relevance as it catches a lot of things

// {

// { // pseudo-selector params

// { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }

// { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },

// { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },

// {123} and converts into symbol with code 123.  It is used by the *macro*

// {darray} is an {array} environment where cells are set in \displaystyle,

// {dcases} is a {cases} environment where cells are set in \displaystyle,

// {rcases} is another mathtools environment. It's brace is on the right side.

// {subarray} only recognizes "l" & "c"

// }

// },

// ~~strike through~~

// ~~~~~~~~

// İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently

// Определение идентификаторов

// Определение имен функций

// общий паттерн для определения идентификаторов

// ≔

// ≕

//(cheaper check than in onclosetag)

//////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

//Parses a complete HTML document and pushes it to the handler

//Resets the parser to a blank state, ready to parse a new HTML document

//TODO add a way to remove current tag

//TODO make events conditional

//TODO(edemaine): Not yet centered. Fix via \raisebox or #726

//Tokenizer event handlers

//\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}

//\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

//\providecommand\ordinarycolon{:}

//alias for backwards compat

//chars removed from _buffer

//else, ignore remaining data

//else: stay in AFTER_CDATA_2 (`]]]>`)

//for entities terminated with a semicolon

//if there is remaining data, emit it in a reasonable way

//nth-last-of-type()

//nth-of-type()

//offset = 1

//parse entity

//parses legacy entities (without trailing semicolon)

//remove 2 trailing chars

//remove everything unnecessary

//self-closing tags will be on the top of the stack

//skip everything until ">"

//the max length of legacy entities is 6

//the min length of legacy entities is 2

//the section just started
