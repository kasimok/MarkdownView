/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
      *	attributes
      */

/*
      *	cdata
      */

/*
      *	comments
      */

/*
      *	declarations
      */

/*
      *	processing instructions
      */

/*
      * entities
      */

/*
      * script
      */

/*
      * special tags
      */

/*
      * style
      */

/*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
};*/

/* ! */

/* " */

/* # */

/* $ */

/* % */

/* & */

/* ' */

/* ( */

/* ) */

/* * */

/* + */

/* , */

/* - */

/* . */

/* / */

/* 0 */

/* 9 */

/* : */

/* ; */

/* < */

/* = */

/* > */

/* ? */

/* @ */

/* Don't mix up DFA `_state` and markdown-it `state` */

/* End line of multiline row. merge forward until the marked trToken */

/* Last data row cannot be detected. not stored to trToken outside? */

/* Line with N bounds has cells indexed from 0 to N-2 */

/* Multiline. Join the text and feed into markdown-it blockParser. */

/* Multiline. Merge trTokens as an entire multiline trToken */

/* Multiline. Scan boundaries again since it's very complicated */

/* Null is possible when disabled the option autolabel */

/* Only separator needs to check indents */

/* Pad in newline characters on last and this line */

/* Push in th/td tokens */

/* Push in thead/tbody and tr open tokens */

/* Push in tr and thead/tbody closed tokens */

/* Scan for valid pipe character position */

/* Start line of multiline row. mark this trToken */

/* [ */

/* \ */

/* \n */

/* ] */

/* ^ */

/* _ */

/* ` */

/* a */

/* binding */

/* eslint-disable no-bitwise */

/* eslint-disable no-script-url */

/* eslint-disable-next-line brace-style */

/* eslint-enable no-script-url */

/* harmony export */

/* make \` closes the code sequence, but not open it;
             the reason is that `\` is correct code block */

/* space */

/* tab */

/* vim: set ts=2 sw=2 et: */

/* webpack/runtime/define property getters */

/* where backslash should be */

/* z */

/* { */

/* | */

/* } */

/* ~ */

/* ’ */

/* “”‘’ */

/**
     * An array of attribute name/value pairs, used for quickly diffing the
     * incomming attributes to see if the DOM node's attributes need to be
     * updated.
     */

/**
     * First pass: validate and collect info into table token. IR is stored in
     * markdown-it `token.meta` to be pushed later. table/tr open tokens are
     * generated here.
     */

/**
     * Naming convention of positional variables
     * - list-item
     * ·········longtext······\n
     *   ^head  ^start  ^end  ^max
     */

/**
     * Regex pseudo code for table:
     *     caption? header+ separator (data+ empty)* data+ caption?
     *
     * We use DFA to emulate this plugin. Types with lower precedence are
     * set-minus from all the formers.  Noted that separator should have higher
     * precedence than header or data.
     *   |  state  | caption separator header data empty | --> lower precedence
     *   | 0x10100 |    1        0       1     0     0   |
     */

/**
     * Second pass: actually push the tokens into `state.tokens`.
     * thead/tbody/th/td open tokens and all closed tokens are generated here;
     * thead/tbody are generally called tgroup; td/th are generally called tcol.
     */

/**
     * Whether or not the statics have been applied for the node yet.
     */

/**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */

/**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */

/**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/

/**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/

/**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/

/**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/

/**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/

/**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/

/**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/

/**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
   **/

/**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/

/**
   * Match#index -> Number
   *
   * First position of matched string.
   **/

/**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/

/**
   * Match#raw -> String
   *
   * Matched string.
   **/

/**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/

/**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/

/**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/

/**
   * Notifies about nodes that were created during the patch operation.
   */

/**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/

/**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/

/**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/

/**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/

/**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/

/**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/

/**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/

/**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/

/**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/

/**
   * Token#info -> String
   *
   * Additional information:
   *
   * - Info string for "fence" tokens
   * - The value "auto" for autolink "link_open" and "link_close" tokens
   * - The string value of the item marker for ordered-list "list_item_open" tokens
   **/

/**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/

/**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/

/**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/

/**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/

/**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/

/**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/

/**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/

/**
 * @param  nameOrCtor The Element's tag or constructor.
 * @param  key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 * @param varArgs, Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return The corresponding Element.
 */

/**
 * @param  node The node to start at, inclusive.
 * @param  root The root ancestor to get until, exclusive.
 * @return The ancestry of DOM nodes.
 */

/**
 * @param element The Element to diff the attrs for.
 * @param data The NodeData associated with the Element.
 */

/**
 * @param name The name of the attribute. For example "tabindex" or
 *    "xlink:href".
 * @returns The namespace to use for the attribute, or null if there is
 * no namespace.
 */

/**
 * @param newContext The current patch context.
 */

/**
 * @param node The node to check.
 * @returns True if the NodeData already exists, false otherwise.
 */

/**
 * @param node The node to get the activeElement for.
 * @returns The activeElement in the Document or ShadowRoot
 *     corresponding to node, if present.
 */

/**
 * @param this
 * @returns The root node of the DOM tree that contains this node.
 */

/**
 * @preserve
 * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0.
 */

/**
 * @return The Node that will be evaluated for the next instruction.
 */

/**
 * @return The next Node to be patched.
 */

/**
 * @returns The current Element being patched.
 */

/**
 * A cached reference to the hasOwnProperty function.
 */

/**
 * A constructor function that will create blank objects.
 */

/**
 * A context object keeps track of the state of a patch.
 */

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */

/**
 * A publicly mutable object to provide custom mutators for attributes.
 * NB: The result of createMap() has to be recast since closure compiler
 * will just assume attributes is "any" otherwise and throws away
 * the type annotation set by tsickle.
 */

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */

/**
 * Aligns the virtual Node definition with the actual DOM, moving the
 * corresponding DOM node to the correct location or creating it if necessary.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 */

/**
 * Allows you to define a key after an elementOpenStart. This is useful in
 * templates that define key after an element has been opened ie
 * `<div key('foo')></div>`.
 * @param key The key to use for the next call.
 */

/**
 * Applies a property to a given Element.
 * @param el The element to apply the property to.
 * @param name The property's name.
 * @param value The property's value.
 */

/**
 * Applies a style to an Element. No vendor prefix expansion is done for
 * property names/values.
 * @param el The Element to apply the style for.
 * @param name The attribute's name.
 * @param  style The style to set. Either a string of css or an object
 *     containing property-value pairs.
 */

/**
 * Applies a value to a style declaration. Supports CSS custom properties by
 * setting properties containing a dash using CSSStyleDeclaration.setProperty.
 * @param style A style declaration.
 * @param prop The property to apply. This can be either camelcase or dash
 *    separated. For example: "backgroundColor" and "background-color" are both
 *    supported.
 * @param value The value of the property.
 */

/**
 * Applies an attribute or property to a given Element. If the value is null
 * or undefined, it is removed from the Element. Otherwise, the value is set
 * as an attribute.
 * @param el The element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value.
 */

/**
 * Applies the current static attributes to the currently open element. Note:
 * statics should be applied before calling `applyAtrs`.
 * @param statics The statics to apply to the current element.
 */

/**
 * Applies the currently buffered attrs to the currently open element. This
 * clears the buffered attributes.
 */

/**
 * Applies the statics. When importing an Element, any existing attributes that
 * match a static are converted into a static attribute.
 * @param node The Element to apply statics for.
 * @param data The NodeData associated with the Element.
 * @param statics The statics array.
 */

/**
 * Asserts that a value exists and is not null or undefined. goog.asserts
 * is not used in order to avoid dependencies on external code.
 * @param val The value to assert is truthy.
 * @returns The value.
 */

/**
 * Buffers an attribute, which will get applied during the next call to
 * `elementOpen`, `elementOpenEnd` or `applyAttrs`.
 * @param name The of the attribute to buffer.
 * @param value The value of the attribute to buffer.
 */

/**
 * Calculates the diff between previous and next values, calling the update
 * function when an item has changed value. If an item from the previous values
 * is not present in the the next values, the update function is called with a
 * value of `undefined`.
 * @param prev The previous values, alternating name, value pairs.
 * @param next The next values, alternating name, value pairs.
 * @param updateCtx The context for the updateFn.
 * @param updateFn A function to call when a value has changed.
 */

/**
 * Calls the appropriate attribute mutator for this attribute.
 * @param el The Element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value. If the value is an object or
 *     function it is set on the Element, otherwise, it is set as an HTML
 *     attribute.
 */

/**
 * Changes to the first child of the current node.
 */

/**
 * Changes to the next sibling of the current node.
 */

/**
 * Changes to the parent of the current node, removing any unvisited children.
 */

/**
 * Checks if the node is an Element. This is faster than an instanceof check.
 * @param node The node to check.
 * @return Whether or not the node is an Element.
 */

/**
 * Checks if the node is the root of a document. This is either a Document
 * or ShadowRoot. DocumentFragments are included for simplicity of the
 * implementation, though we only want to consider Documents or ShadowRoots.
 * @param node The node to check.
 * @return True if the node the root of a document, false otherwise.
 */

/**
 * Checks that a call to patchOuter actually patched the element.
 * @param maybeStartNode The value for the currentNode when the patch
 *     started.
 * @param maybeCurrentNode The currentNode when the patch finished.
 * @param expectedNextNode The Node that is expected to follow the
 *    currentNode after the patch;
 * @param expectedPrevNode The Node that is expected to preceed the
 *    currentNode after the patch.
 */

/**
 * Checks whether or not the current node matches the specified nameOrCtor and
 * key. This uses the specified match function when creating the patcher.
 * @param matchNode A node to match the data to.
 * @param nameOrCtor The name or constructor to check for.
 * @param key The key used to identify the Node.
 * @return True if the node matches, false otherwise.
 */

/**
 * Clears all caches from a node and all of its children.
 * @param node The Node to clear the cache for.
 */

/**
 * Clears out any unvisited Nodes in a given range.
 * @param maybeParentNode
 * @param startNode The node to start clearing from, inclusive.
 * @param endNode The node to clear until, exclusive.
 */

/**
 * Closes an open tag started with elementOpenStart.
 * @return The corresponding Element.
 */

/**
 * Closes an open virtual Element.
 *
 * @param nameOrCtor The Element's tag or constructor.
 * @return The corresponding Element.
 */

/**
 * Closes the currently open Element, removing any unvisited children if
 * necessary.
 * @returns The Element that was just closed.
 */

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */

/**
 * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/

/**
 * Creates a Node and marking it as created.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 * @return The newly created node.
 */

/**
 * Creates a Text Node.
 * @param doc The document with which to create the Element.
 * @returns The newly created Text.
 */

/**
 * Creates a patcher that patches an Element with the the provided function.
 * Exactly one top level element call should be made corresponding to `node`.
 * @param patchConfig The config to use for the patch.
 * @returns The created function for patching an Element.
 */

/**
 * Creates a patcher that patches the document starting at node with a
 * provided function. This function may be called during an existing patch operation.
 * @param patchConfig The config to use for the patch.
 * @returns The created function for patching an Element's children.
 */

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */

/**
 * Creates an Element and initializes the NodeData.
 * @param doc The document with which to create the Element.
 * @param parent The parent of new Element.
 * @param nameOrCtor The tag or constructor for the Element.
 * @param key A key to identify the Element.
 * @returns The newly created Element.
 */

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */

/**
 * Creates an array for a desired initial size. Note that the array will still
 * be empty.
 * @param initialAllocationSize The initial size to allocate.
 * @returns An empty array, with an initial allocation for the desired size.
 */

/**
 * Creates an map object without a prototype.
 * @returns An Object that can be used as a map.
 */

/**
 * Declares a virtual Element at the current location in the document that has
 * no children.
 * @param nameOrCtor The Element's tag or constructor.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 * @param varArgs Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return The corresponding Element.
 */

/**
 * Declares a virtual Element at the current location in the document. This
 * corresponds to an opening tag and a elementClose tag is required. This is
 * like elementOpen, but the attributes are defined using the attr function
 * rather than being passed as arguments. Must be folllowed by 0 or more calls
 * to attr, then a call to elementOpenEnd.
 * @param nameOrCtor The Element's tag or constructor.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param statics An array of attribute name/value pairs of the static
 *     attributes for the Element. Attributes will only be set once when the
 *     Element is created.
 */

/**
 * Declares a virtual Text at this point in the document.
 *
 * @param value The value of the Text.
 * @param varArgs
 *     Functions to format the value which are called only when the value has
 *     changed.
 * @return The corresponding text node.
 */

/**
 * Finds the matching node, starting at `node` and looking at the subsequent
 * siblings if a key is used.
 * @param matchNode The node to start looking at.
 * @param nameOrCtor The name or constructor for the Node.
 * @param key The key used to identify the Node.
 * @returns The matching Node, if any exists.
 */

/**
 * Flushes the changes buffer, calling the functions for each change.
 */

/**
 * Gets the key for a Node. note that the Node should have been imported
 * by now.
 * @param node The node to check.
 * @returns The key used to create the node.
 */

/**
 * Gets the namespace to create an element (of a given tag) in.
 * @param tag The tag to get the namespace for.
 * @param parent The current parent Node, if any.
 * @returns The namespace to use,
 */

/**
 * Gets the path of nodes that contain the focused node in the same document as
 * a reference node, up until the root.
 * @param node The reference node to get the activeElement for.
 * @param root The root to get the focused path until.
 * @returns The path of focused parents, if any exist.
 */

/**
 * Imports node and its subtree, initializing caches.
 * @param node The Node to import.
 */

/**
 * Imports single node and its subtree, initializing caches, if it has not
 * already been imported.
 * @param node The node to import.
 * @param fallbackKey A key to use if importing and no key was specified.
 *    Useful when not transmitting keys from serverside render and doing an
 *    immediate no-op diff.
 * @returns The NodeData for the node.
 */

/**
 * Initializes a NodeData object for a Node.
 * @param node The Node to initialized data for.
 * @param nameOrCtor The NameOrCtorDef to use when diffing.
 * @param key The Key for the Node.
 * @param text The data of a Text node, if importing a Text node.
 * @returns A NodeData object with the existing attributes initialized.
 */

/**
 * Keeps track of information needed to perform diffs for a given DOM node.
 */

/**
 * Keeps track whether or not we are in an attributes declaration (after
 * elementOpenStart, but before elementOpenEnd).
 */

/**
 * Keeps track whether or not we are in an element that should not have its
 * children cleared.
 */

/**
 * Like insertBefore, but instead instead of moving the desired node, instead
 * moves all the other nodes after.
 * @param parentNode
 * @param node
 * @param referenceNode
 */

/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/

/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/

/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/

/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/

/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/

/**
 * Makes sure that a patch closes every node that it opened.
 * @param openElement
 * @param root
 */

/**
 * Makes sure that no children elements have been declared yet in the current
 * element.
 * @param functionName The name of the caller, for the error message.
 * @param previousNode
 */

/**
 * Makes sure that node being outer patched has a parent node.
 * @param parent
 */

/**
 * Makes sure that tags are correctly nested.
 * @param currentNameOrCtor
 * @param nameOrCtor
 */

/**
 * Makes sure that the caller is not inside an element that has declared skip.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the caller is not where attributes are expected.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the caller is where attributes are expected.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure that the current node is an Element with a matching nameOrCtor and
 * key.
 *
 * @param nameOrCtor The tag or constructor for the Element.
 * @param key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @return The corresponding Element.
 */

/**
 * Makes sure that there is a current patch context.
 * @param functionName The name of the caller, for the error message.
 */

/**
 * Makes sure the current node is a Text node and creates a Text node if it is
 * not.
 * @returns The Text node that was aligned or created.
 */

/**
 * Makes sure the patch closes virtual attributes call
 */

/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/

/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/

/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/

/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/

/**
 * Records the element's attributes.
 * @param node The Element that may have attributes
 * @param data The Element's data
 */

/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/

/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/

/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/

/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/

/**
 * Retrieves the NodeData object for a Node, creating it if necessary.
 * @param node The node to get data for.
 * @param fallbackKey A key to use if importing and no key was specified.
 *    Useful when not transmitting keys from serverside render and doing an
 *    immediate no-op diff.
 * @returns The NodeData for the node.
 */

/**
 * Returns a patcher function that sets up and restores a patch context,
 * running the run function with the provided data.
 * @param run The function that will run the patch.
 * @param patchConfig The configuration to use for the patch.
 * @returns The created patch function.
 */

/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/

/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/

/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/

/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/

/**
 * Skips the children in a subtree, allowing an Element to be closed without
 * clearing out the children.
 */

/**
 * TODO(sparhami) We should just export argsBuilder directly when Closure
 * Compiler supports ES6 directly.
 * @returns The Array used for building arguments.
 */

/**
 * TODO(sparhami) We should just export attrsBuilder directly when Closure
 * Compiler supports ES6 directly.
 * @returns The Array used for building arguments.
 */

/**
 * TODO(tomnguyen): This is a bit silly and really needs to be better typed.
 * @param fn A function to call.
 * @param a The first argument to the function.
 * @param b The second argument to the function.
 * @param c The third argument to the function.
 */

/**
 * The default match function to use, if one was not specified when creating
 * the patcher.
 * @param matchNode The node to match against, unused.
 * @param nameOrCtor The name or constructor as declared.
 * @param expectedNameOrCtor The name or constructor of the existing node.
 * @param key The key as declared.
 * @param expectedKey The key of the existing node.
 * @returns True if the node matches, false otherwise.
 */

/**
 * The name of the HTML attribute that holds the element key
 * (e.g. `<div key="foo">`). The attribute value, if it exists, is then used
 * as the default key when importing an element.
 * If null, no attribute value is used as the default key.
 */

/**
 * The offset in the virtual element declaration where the attributes are
 * specified.
 */

/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/

/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/

/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/

/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/

/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/

/**
 * Truncates an array, removing items up until length.
 * @param arr The array to truncate.
 * @param length The new length of the array.
 */

/**
 * Updates a single attribute on an Element.
 * @param el The Element to apply the attribute to.
 * @param name The attribute's name.
 * @param value The attribute's value. If the value is an object or
 *     function it is set on the Element, otherwise, it is set as an HTML
 *     attribute.
 */

/**
 * Updates the state of being in a skip element.
 * @param value Whether or not the patch is skipping the children of a
 *    parent node.
 * @return the previous value.
 */

/**
 * Updates the state of being in an attribute declaration.
 * @param value Whether or not the patch is in an attribute declaration.
 * @return the previous value.
 */

/**
 * Used to keep track of the previous values when a 2-way diff is necessary.
 * This object is cleared out and reused.
 */

/**
 * Used to keep track of the previous values when a 2-way diff is necessary.
 * This object is reused.
 * TODO(sparhamI) Scope this to a patch so you can call patch from an attribute
 * update.
 */

/**
 * Used to prevent property collisions between our "map" and its prototype.
 * @param map The map to check.
 * @param property The property to check.
 * @return Whether map has property.
 */

/**
 * class LinkifyIt
 **/

/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/

/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/

/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * class Token
 **/

/**
 * new Core()
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre class="hljs"><code>' +
 *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/

/**
 * new ParserBlock()
 **/

/**
 * new ParserInline()
 **/

/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/

/**
 * new Ruler()
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/

/** Bootstring parameters */

/** Highest positive signed 32-bit float value */

/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/

/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/

/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/

/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/

/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/

/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/

/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/

/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you will - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/

/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and return list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/

/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/

/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/

/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/

/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/

/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/

/************************************************************************/

/******/

/***/

/**/

/*, endLine*/

/*, env */

/*, options, env */

/*, params, ... */

/*, silent*/

/*--------------------------------------------------------------------------*/

/*_root*/

/*eslint max-depth:0*/

/*eslint max-len:0*/

/*eslint no-bitwise:0*/

/*eslint no-labels:0,block-scoped-var:0*/

/*eslint quotes:0*/

/*eslint-disable max-len*/

/*eslint-enable max-len*/

/*from1, from2, from3, ...*/

/*function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
}*/

/*istanbul ignore if*/

//

//                          ^^^^^^^ parse this

//                         ^^ skipping these spaces

//                       ^^^ skipping those spaces

//                  ^^^^^^^ parsing link title

//                ^^ skipping these spaces

//            ^^^^^^^^^^^ parse this

//          ^^^^^^ parsing link destination

//         ^^^ skip optional whitespace here

//         to make extra space appear

//        ^^ skipping these spaces

//       (we can replace it by preventing links from being parsed in

//       [[[[[[[[[[[[[[[[[[[[[foo]()

//       ^ -- position start of line here (tab has width===1)

//       validation mode)

//       when an amount of `[` is exactly equal to `maxNesting + 1`:

//      - - -

//      - this one is a paragraph continuation

//     - item 4

//     >

//     > test

//     ^ -- position start of line here:

//     ```

//     foo

//     test

//    (in joyent/node some chars in auth and paths are encoded)

//    - item 3

//    >

//    > current blockquote

//    ^ -- position start of line here + shift bsCount slightly

//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`

//    i.e. in `http://example.org:foo` pathname is `:foo`

//    so `http:\\example.org\` is treated like a relative path

//    which can be constructed using other parts of the url.

//   -

//   - item 2

//   ^ blkIndent position will be here

//   alt: [ name2, name3 ]

//   enabled: Boolean,

//   fn: Function(),

//   name: XXX,

//  - AND markers are the same

//  - a

//  - canSplitWord - determine if these markers can be found inside a word

//  - example list

//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)

//  - item 1

//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)

//  - start - position to scan from (it should point at a valid marker);

//  - string       - string to encode

//  - they have adjacent tokens

//  0..25 map to ASCII a..z or A..Z

//  1. an empty line outside:

//  2. an empty line inside:

//  3. another tag:

//  ^^^^^ - calculating total length of this thing

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// "  -  test"

// "Software"), to deal in the Software without restriction, including

// "Zero" preset, with nothing enabled. Useful for manual configuring of simple

// "alt" attr MUST be set, even if empty. Because it's mandatory and

// #

// '  >\t  test '

// '  \n' -> hardbreak

// ' >   test '

// ' >\t  test '

// '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'

// '{}$%@~+=:' reserved for extentions

// (?!_) cause 1.5x slowdown

// (c) (C) → ©

// (collapsed reference link and shortcut reference link respectively)

// (due to parsing ambiguity with list)

// (list item is empty, list terminates before "foo"):

// (p) (P) -> §

// (prevents integer overflow in browsers)

// (r) (R) → ®

// (remove this when node v10 is no longer supported).

// (the rest is just indented code block)

// (this avoid a conflict with Object.prototype members,

// (tm) (TM) → ™

// +- → ±

// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾

// - miltiplication 2 x 4 -> 2 × 4

// - return true

// - update `state.line`

// - update `state.pos`

// - update `state.tokens`

// -- → &ndash;, --- → &mdash;

// ... → … (also ?.... → ?.., !.... → !..)

// .toLowerCase().toUpperCase() should get rid of all differences

// 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;

// 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398

// 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398

// 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;

// 1. No leading slash in paths,

// 1. anything

// 1. foo " bar " baz - not replaced

// 110xxxxx 10xxxxxx

// 1110xxxx 10xxxxxx 10xxxxxx

// 111110xx 10xxxxxx 10xxxxxx 10xxxxxx

// 2. Backslashes are not replaced with slashes,

// 2. checking this line

// 2. foo-"-bar-"-baz - replaced

// 26..35 map to ASCII 0..9

// 3. Trailing colon is treated like a part of the path,

// 3. foo"bar"baz     - not replaced

// 4. Nothing is URL-encoded in the resulting object,

// 5. `url.parse()` does not have `parseQueryString` argument

// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,

// ???????? → ???, !!!!! → !!!, `,,` → `,`

// A change may cause this function to be called re-entrantly. Keep track of

// A negative indentation means that this is a paragraph continuation

// A position of the token this delimiter corresponds to.

// Add a slash for self-closing tags, e.g. `<img src="foo" /`

// Add token name, e.g. `<img`

// Adding the second element, need to change to array.

// All non-basic code points < n have been handled already. Find the next

// All possible word characters (everything without punctuation, spaces & controls)

// Allow anything in markdown spec, forbid quote (") at the first position

// Allow letters & digits (http://test1)

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Alternative implementation, for memory.

// An amount of virtual spaces (tabs expanded) between beginning

// Anything after `j` was either moved up already or static.

// Applying first lower then upper case normalizes any character:

// At least give some kind of context to the user

// Avoid `split(regex)` for IE8 compatibility. See #17.

// Backwards-compat with node 0.10.x

// Block ends with either:

// Block quotes

// Block-level tag containing an inline tag.

// Boolean flags that determine if this delimiter could open or close

// Build rules lookup cache

// Build schema condition

// But .toLowerCase() doesn't change ϑ (it's already lowercase),

// By default EventEmitters will print a warning if more than 10 listeners are

// CSS language prefix for fenced blocks

// Cache last tested result. Used to skip repeating steps on next `match` call.

// Cache the length.

// Cached rule chains.

// Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54

// Case 2: line is not inside the blockquote, and the last line was empty.

// Case 3: another tag found.

// Case-insensitive comparison should treat all of them as equivalent.

// Chain can be empty, if rules disabled. But we still have to return Array.

// Changes from joyent/node:

// Char code of the starting marker (number).

// Characters that are never ever allowed in a hostname.

// Check bullet

// Check for listener leak

// Check for underline in setext header

// Check hr marker

// Check if module is in cache

// Check if we need to add a newline after this tag

// Check start

// Clean up tokens after emphasis and strikethrough postprocessing:

// Cleanup

// Code block (4 spaces padded)

// Commonmark default options

// Compile each schema

// Compile postponed aliases

// Convert '\n' in paragraphs into <br>

// Convert straight quotation marks to typographic ones

// Convert the input in UCS-2 to an array of Unicode code points.

// Copyright Joyent, Inc. and other Node contributors.

// Core state object

// Create a lookup array where anything but characters in `chars` string

// Create a new module (and put it into the cache)

// Create caches

// Currently restricted by `md.validateLink()` to http/https/ftp

// Currently without astral characters support.

// Cut head if cache was used

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// Decode a generalized variable-length integer into `delta`,

// Decode percent-encoded string.

// Define dynamic patterns

// Defined via punctuation & spaces to save space

// Detect list type and position after marker

// Do minimal possible changes by default. Need to collect feedback prior

// Don't allow single-level domains, because of false positives like '//test'

// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.

// Don't use UCS-2.

// Double + single quotes replacement pairs, when typographer enabled,

// EOL -> fail

// Emits a 'removeListener' event if and only if the listener was removed.

// Enable HTML tags in source

// Enable some language-neutral replacements + quotes beautification

// Encode attributes, e.g. `<img src="foo"`

// Encode unsafe characters with percent-encoding, skipping already

// EventEmitters, we do not listen for `error` events here.

// EventTarget does not have `error` event semantics like Node

// Execute the module function

// Expose utils & helpers for easy acces from plugins

// Fake record for guessed links

// Fake token just to render attributes

// Filter disabled & fake schemas

// Final result should be uppercased, because it's later stored in an object

// Finalize list

// Find next character,

// Find previous character,

// Find rule index by name

// Find whitespaces tail of pending chars.

// Finish the basic string with a delimiter unless it's empty.

// First 2 params - rule name & source. Secondary array - list of rules,

// First level - chain name, '' for default.

// Flush pending text

// For any attrs that are dynamic, move them up to the right place.

// For any attrs that are static and have the same value, make sure we do

// For each opening emphasis-like marker find a matching closing one

// For example, here we should insert a newline before blockquote:

// For example, you can use '«»„“' for Russian, '„“‚‘' for German,

// For validation mode we can terminate immediately

// Found matching closer length.

// Fuzzy link can't be prepended with .:/\- and non punctuation.

// GFM table, https://github.github.com/gfm/#tables-extension-

// Generate markers.

// Generate tokens for input range

// HTML block

// HTML5 entities map: { name -> utf16string }

// Handle the basic code points.

// Helper methods, should not be used directly

// Helpers

// Hepler to unify [reference labels].

// Here's an example showing how it happens. Lets take greek letter omega:

// Highlighter function. Should return escaped HTML,

// Horizontal rule

// IE does not have builtin `{ once: true }` support so we

// Ideally we could tag statics and varArgs as an array where every odd

// If a fence has heading spaces, they should be removed from its inner block

// If a marker sequence has an odd number of characters, it's splitted

// If any of list item is tight, mark list as tight

// If language exists, inject class gently, without modifying original token.

// If match for this delimiter run failed, we want to set lower bound for

// If nesting level exceeded - skip tail to the end. That's not ordinary

// If not supported schema check requested - terminate

// If one of the delimiters can both open and close emphasis, then the

// If pending text exists - flush it as text token

// If previous delimiter cannot be an opener, we can safely skip

// If result starts with <pre... internal wrapper is skipped.

// If the previous delimiter has the same marker and is adjacent to this one,

// If there is an @ in the hostname, then non-host chars *are* allowed

// If there is no 'error' event listener then throw.

// If this delimiter is matched as a valid opener, `end` will be

// If we are at the matching node, then we are done.

// If we are here - we detected HTML block.

// If we have more than 4 spaces, the indent is 1

// If we're starting a new ordered list right after

// If we're starting a new unordered list right after

// In email addresses, only the domain name should be punycoded. Leave

// In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// Increment state.level and decrement it later to limit recursion.

// Initialize the state.

// Inline link

// Inline parser state

// Insert `n` at position `i` of the output.

// Insert a newline between hidden paragraph and subsequent opening

// Insert each marker as a separate text token, and add it to delimiter list

// Internal state vartiables

// It costs 10% of performance, but allows extend terminators list, if place it

// It exists only as a hack because blockquotes override bMarks

// It's a high surrogate, and there is a next character.

// It's an unmatched surrogate; only append this code unit, in case the

// It's harmless to do here, because no tokens are created. But ideally,

// It's used only when expanding tabs, you can think about it as

// Item become loose if finish with empty line,

// Items did not line up exactly as before, need to make sure old items are

// Iterate list items

// Just a shortcut for bulk export

// Key check is done using double equals as we want to treat a null key the

// LIFO order

// Length is only used for emphasis-specific "rule of 3",

// Let's cut tails like '    ###  ' from the end of string

// Let's roll down till block end.

// Link reference

// Linkifier might send raw hostnames like "example.com", where url

// List marker should have at least 2 chars (digit + dot)

// List marker should have no more than 9 digits

// List of added rules. Each element is:

// List of emphasis-like delimiters for current tag

// List of valid html blocks names, accorting to commonmark spec

// Lists

// Load & clone RE patterns.

// Lookup in pending chars is bad practice! Don't copy to other rules!

// Low surrogate.

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// Main decoding loop: start just after the last delimiter if any basic code

// Main encoding loop:

// Main parser class

// Main rules

// Markdown ASCII punctuation characters.

// Markdown-it plugin to render GitHub-style task lists; see

// MathML elements inherit from Element, which does not have style. We cannot

// May be, one day we will add .deepClone() for token and simplify this part, but

// Merge objects

// More to read about domain names

// Move everything else before the node.

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// NOTE: this will cause links to behave incorrectly in the following case,

// Next scan position

// No error code for this since it is a Warning

// No need for bounds check because we have fake entry on tail.

// Normalize input string

// Normalize newlines

// Note that any invalid chars are also handled, but these

// Note: The comments on the `throw` lines are intentional, they show

// Note: this is equivalent to unicode case folding; unicode normalization

// Nothing found in the cache, scan until the end of the line (or until marker is found)

// Now split string to nodes

// Now we have a portion which is definitely the auth.

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// Obviously not all Emitters should be limited to 10. This function allows

// On success, rule should:

// Optimize the case of one listener. Don't need the extra array object.

// Pad the text with empty lines to ensure the line number mapping is correct

// Paragraph

// Parse backticks

// Parse inlines

// Parse link destination

// Parse link label

// Parse link title

// Parser rules

// Parser state class

// Pending string is stored in concat mode, indexed lookups will cause

// Permission is hereby granted, free of charge, to any person obtaining a

// Previously calculated lower bounds (previous fails)

// Proceess '\n'

// Process ![image](<src> "title")

// Process *this* and _that_

// Process [link](<to> "stuff")

// Process autolinks '<protocol:...>'

// Process escaped chars and hardbreaks

// Process html entity - &#123;, &#xAF;, &quot;, ...

// Process html tags

// Process only opening markers

// Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.

// Pull that off.

// Push fake entry to simplify cache bounds checks

// Push new token to "stream".

// Quick fail on second char

// Quirk to enforce "hard termination mode" for paragraphs;

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)

// RFC 2396: characters not allowed for various reasons.

// Re-assign `events` because a newListener handler could have caused the

// Re-export libraries commonly used in both markdown-it and its plugins,

// Re-order the node into the right position, preserving focus if either

// Reference can not terminate anything. This check is for safety only.

// Reference: RFC 3986, RFC 1808, RFC 2396

// Regexps to match html elements

// Remove element from array and put another array at those position.

// Replace NULL characters

// Replace content with actual value

// Replace link-like texts with link nodes.

// Replace quotes in the middle of punctuation sequence, but not

// Represent delta as a generalized variable-length integer.

// Reset compiled data

// Reset scan cache

// Restore original tShift; this might not be necessary since the parser

// Return the exports of the module

// Return the translated string or fallback to English if the translation is not available

// Review our test case against browsers more comprehensively.

// Rude test fuzzy links by host, for quick deny

// Rule to skip pure text

// Run subparser & write tokens

// Scan a sequence of emphasis-like markers, and determine whether

// Scan string until end reached

// Scanned through the end, didn't find anything

// Schemas compiler. Build regexps.

// Search `[-+*][\n ]`, returns next pos after marker on success

// Search `\d+[.)][\n ]`, returns next pos after marker on success

// Search by name and disable

// Search by name and enable

// Search the end of the block

// Second level - diginal anchor for fast filtering by charcodes.

// See details here:

// Set the language you want to use (you can use navigator.language to get the user's language)

// Setting node.data resets the cursor in IE/Edge.

// Should be something like \p{\L\N\S\M} (\w but without `_`)

// Simple .toLowerCase() doesn't normalize 125 code points correctly,

// Simple check to quickly interrupt scan on [link](url) at the start of line.

// Simple typographic replacements

// Since start is found, we can report success here in validation mode

// Skip char codes from given position

// Skip char codes reverse from given position - 1

// Skip content of html tag links

// Skip content of markdown links

// Skip single token by running all rules in validation mode;

// Skip spaces from given position in reverse.

// Skip spaces from given position.

// Skip text characters for text token, place those to pending buffer

// So treat this one as a special case

// So, we have to move all those markers after subsequent s_close tags.

// Some different length found, put it in cache as upper limit of where closer can be found

// Some tags can terminate paragraph without empty line.

// Special case for a simple path URL

// Special case:

// Special generic mutator that's called for any attribute that does not

// Stack of delimiter lists for upper level tags

// Start list

// Start tokenizing from the actual content (trToken.map[0])

// Stores { start: end } pairs. Useful for backtrack

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// TODO(tomnguyen): assert that this is not null

// TODO:

// TODO: remove this workaround when CM standard will allow nested links

// The above copyright notice and this permission notice shall be included

// The module cache

// The require function

// The same as abothe but without [0-9]

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This is necessary because initially emphasis delimiter markers (*, _, ~)

// This is to support parse stuff like "  http://foo.com  \n"

// This line is inside the blockquote.

// Tight list paragraphs

// To avoid recursion in the case that type === "newListener"! Before

// Token class

// Too much nesting, just skip until the end of the paragraph.

// Total length of these series of delimiters.

// Trim and collapse whitespace

// Try all possible rules.

// Try fast path regexp

// Try to check if list is terminated or continued.

// Try to take previous element from cache, if .test() called before

// URLs are obnoxious.

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Unhandled 'error' event

// Unicode entries:

// Use '/' to close single tags (<br />)

// Use a cached length. The attributes array is really a live NamedNodeMap,

// Use direct extract instead of `regenerate` to reduse browserified size

// Use large random number as id property of the checkbox.

// Use reversed logic in links start/end match

// Useful for some operations with tokens

// Utilities

// Walk through delimiter list and replace text tokens with tags

// We found the end of the link, and know for a fact it's a valid link;

// We scan from the end, to keep position when new tags added.

// We should terminate list on style change. Remember first one to compare.

// Workaround for phantomjs - need regex without /g flag,

// Zs (unicode class) || [\t\f\v\r\n]

// [label]:   destination   'title'

// [link](  <href>  "title"  )

// \f

// \n

// \p{\Z\Cc} (white spaces + control)

// \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)

// \r

// \t

// \v

// ^ listIndent position will be here

// `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`

// ```

// `basicLength` is the number of basic code points.

// `handledCPCount` is the number of code points that have been handled;

// `i` was supposed to wrap around from `out` to `0`,

// `index` is the index of the next character to be consumed.

// a paragraph (validation mode only)

// a paragraph, first line should not be empty.

// a paragraph, it should start with 1.

// actions take two parameters: step (line number), prev_state and alphabet

// add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720

// added to it. This is a useful default which helps finding memory leaks.

// adding it to the listeners, first emit "newListener".

// aka. 0x7FFFFFFF or 2^31-1

// allow empty columns before and after table, but not in between columns;

// alphabets are encoded by numbers in 16^N form, presenting its precedence

// always allow unencoded alphanumeric characters

// an emphasis.

// an initial tab length, e.g. bsCount=21 applied to string `\t123`

// and .toUpperCase doesn't normalize 6 of them (list of exceptions:

// and .toUpperCase() doesn't change ϴ (already uppercase).

// and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).

// and align row should be exactly the same (the rest of the rows can differ)

// and alphanumeric chars is percent-encoded.

// and for whether this closer can be an opener;

// and increment current pos

// and no other characters are allowed but spaces;

// and remove it afterwards.

// and smartquotes on. Could be either a String or an Array.

// are multiples of 3.

// are the ones that are *expected* to be seen, so we fast-path

// are treated as their own separate text tokens. Then emphasis rule either

// array ref

// assume that it's an IPv6 address.

// at this point, either we have an explicit point where the

// atSign can be anywhere.

// auth portion cannot go past, or the last @ char is the decider.

// autoconvert URL-like texts to links

// backtick length => last seen position

// basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

// because emails enclosed in quotes are far more common

// because, if they are pointing at the same token, replaceAt

// between letter variants.

// block parser variables

// block-level tag.

// broken by replacing non-ASCII by nothing

// broken sequence

// bundled size (e.g. a browser build).

// but can start with > (markdown blockquote)

// but guard against overflow.

// but if blockquote is terminated by another tag, they shouldn't

// but it could still be a valid reference if we roll back

// but we should filter last element, because it means list finish

// can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'

// change current state, then restore it after parser subcall

// check if it's outdented, i.e. it's inside list item and indented

// check that first two markers match and adjacent

// check that last two markers are adjacent (we can safely assume they match)

// check the block quote marker

// chop off from the tail first.

// closing delimiters must not be a multiple of 3 unless both lengths

// closing tag

// collapse two adjacent text nodes

// collect unique names

// comes *before* the @-sign.

// compile lazily, because "host"-containing variables can change on tlds update.

// compiled once on the first module load.

// complexity.

// console.log(_line, _state.toString(16), _type.toString(16))  // for test

// console.log(trToken.meta); // for test

// constructor

// control codes

// convertion to flat mode.

// copy of this software and associated documentation files (the

// could mess up indices when quote length != 1

// count heading level

// covers label === '' and label === undefined

// cut lines range from source.

// default to space if it's the beginning of the line

// default to space if it's the end of the line

// define __esModule on exports

// define getter functions for harmony exports

// define these here so at least they only have to be

// disable "rule of 3" length checks meant for emphasis

// distribute, sublicense, and/or sell copies of the Software, and to permit

// do `instanceof HTMLElement` / `instanceof SVGElement`, since el can belong

// e.g. allow ` |---| `, disallow ` ---||--- `

// element is a string and every even element is any, but this is hard.

// else: stay in AFTER_COMMENT_2 (`--->`)

// emit removeListener for all listeners on all events

// encode(string, keepEscaped)

// encoded sequences.

// equal to its position, otherwise it's `-1`.

// escaped pipe, '\|'

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion

// eslint-disable-next-line no-restricted-syntax

// ex:

// exports.replaceEntities     = replaceEntities;

// extracted by mini-css-extract-plugin

// fail if list has another type

// fail if terminating block found

// false under headerless corner case

// fences (``` lang, ~~~ lang)

// figure out if it's got a host

// find the first instance of any hostEndingChars

// first character of the second line should be '|', '-', ':',

// fixed in v12 (couldn't find any details).

// flexibility required.

// following conditions:

// for each marker, each delimiter length modulo 3,

// found valid marker

// found!

// from spec:

// from the DOM.

// function (/*str, lang*/) { return ''; }

// future lookups. This is required to make sure algorithm has linear

// garbage at the end of the line after title,

// got a fragment string.

// guess schemaless links

// has already been here, but just to make sure we can do that.

// have a specific mutator.

// have to do it manually.

// header row will define an amount of columns in the entire table,

// headerIdx is the first delimiter of the current (where closer is) delimiter run

// heading (#, ##, ...)

// how the browser resolves relative URLs.

// http://a@b?@c => user:a host:c path:/?@c

// http://a@b@c/ => user:a@b host:c

// http://jgm.github.io/CommonMark/spec.html#html-blocks

// http://serverfault.com/questions/638260/

// http://spec.commonmark.org/0.15/#ascii-punctuation-character

// https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments

// https://github.com/blog/1825-task-lists-in-all-markdown-documents

// https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460

// https://github.com/commonmark/cmark/issues/178#issuecomment-270417442

// https://spec.commonmark.org/0.29/#line-ending

// i.e. latest empty line should not count

// if (!tableToken.meta.sep) { return false; } // always evaluated true

// if first character is '-', then second character must not be a space

// if hostname begins with [ and ends with ]

// if indent wasn't changed

// if it's indented more than 3 spaces, it should be a code block

// if it's not a basic code point

// if it's not defined (in strikethrough or 3rd party plugins),

// if opening marker is "(", switch it to closing marker ")"

// if we increase `i` as we go, then subtract off its starting

// if we still have not hit it, then the entire thing is a host.

// implementation from standard node.js 'util' module

// import hljs from "highlight.js";

// import katex from '@iktakahiro/markdown-it-katex';

// in all copies or substantial portions of the Software.

// in the middle of the words, i.e.:

// increase level if we find text `[`, which is not a part of any token

// incrementing `n` each time, so we'll fix that now:

// indent of the current dd block (-1 if there isn't any)

// indent of the current list block (-1 if there isn't any)

// indents for each line (tabs expanded)

// inside a list, it would be positioned after list marker)

// into opening/closing tags

// into opening/closing tags (which messes up levels inside).

// ipv6 address

// is a different step that is not required here.

// it can start an emphasis sequence or end an emphasis sequence.

// it optimizes skips in **<...>**a**<...>** pathological case

// it's considered a lazy continuation regardless of what's there

// jump line-by-line until empty one or EOF

// larger one:

// lastChar defaults to 0x20

// leading whitespace in a list item is already trimmed off by markdown-it

// leaves them as text (needed to merge with adjacent text) or turns them

// less than said list item:

// lheading (---, ===)

// like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the

// limit conditions when list can interrupt

// line begin offsets for fast jumps

// line end offsets for fast jumps

// line index in src

// lines count

// link to parser instance

// loose/tight mode for lists

// losing information in the process.

// make sure tail has spaces only

// mark paragraphs tight if needed

// markdown-it default options

// markers belong to same delimiter run if:

// markers can be mixed with spaces, but there should be at least 3 of them

// means first tab should be expanded to 4-21%4 === 3 spaces.

// merge adjacent text nodes into one and re-calculate all token levels

// merge those into one strong delimiter.

// methods

// middle of word

// might have found a valid shortcut link, disable reference parsing

// modes. For example, to parse bold/italic only.

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119

// most notably, `__proto__`)

// never used

// next code unit is the high surrogate of a surrogate pair.

// nextChar defaults to 0x20

// no closing '>'

// no module.id needed

// no module.loaded needed

// node or currentNode are focused by making sure that they are not detached

// normally if you call `tokenize(state, startLine, nextLine)`,

// not listening for removeListener, no need to emit

// not set them again.

// now we prefer to keep things local.

// of each line (bMarks) and real beginning of that line.

// offsets of the first non-space characters (tabs not expanded)

// old school shim for old browsers

// opening tag

// optimization of pairs parse (emphasis, strikes).

// or '' if the source string is not changed and should be escaped externaly.

// or -1 on fail.

// or root check will fail every second time

// paragraph might "eat" one newline after it in nested lists

// paragraphs will look below nextLine for paragraph continuation,

// parser failed to find ']', so it's not a valid link

// parsing a valid shortcut link failed, fallback to reference

// partially expanding tabs in code blocks, e.g '\t\tfoobar'

// patched tShift masked characters to look like spaces (blockquotes, list markers)

// persons to whom the Software is furnished to do so, subject to the

// pipe separating cells, '|'

// points were copied; start at the beginning otherwise.

// previously assigned at case 0x00110

// protocols that always contain a // bit.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// pull out port.

// quirk for blockquotes, this line should already be checked by that rule

// re-calculate levels after emphasis/strikethrough turns some text nodes

// re-export Token class to use in block rules

// re-export Token class to use in core rules

// removed. This should be a rare case.

// renderer

// replace current node

// replace token.content *before* tokens[item.token].content,

// required block content indent (for example, if we are

// resolution will treat //foo/bar as host=foo,path=bar because that's

// restore old state

// returns `true` if any rule reported success

// returns the end of the label

// same as undefined. This should be okay as the only values allowed are

// save cursor state, we could require to rollback later

// scan marker length

// search end of block

// set offset past spaces and ">"

// set state.tight if we had an empty line before current tag

// setters

// should be placed on proper position for tests.

// should have at least two lines

// should not be `://` & `///`, that protects from errors in protocol name

// should skip all tokens except 'text', 'html_inline' or 'code_inline'

// situation and we should not care about content.

// skip disabled methods

// skip heading spaces for next line

// skip leading whitespaces from next line

// skip one optional space after '>'

// skip trailing spaces until the rest of the line

// so all that's left to do is to call tokenizer.

// so even if it's empty, it has to be present.

// so no point trying to find the end of it in silent mode

// so plugins won't have to depend on them explicitly, which reduces their

// so we need to re-calculate all offsets to appear as

// special case: 1"" - count first quote as an inch

// start of the sequence.

// starts with domain name. So we prepend http:// in those cases,

// state.blkIndent was non-zero, we now set it to zero,

// states are union (bitwise OR) of its accepted alphabets

// strings, null and undefined so the == semantics are not too weird.

// strip [ and ] from the hostname

// sum of the lengths of the delimiter runs containing the opening and

// sure algorithm has linear complexity (see *_*_*_*_*_... case).

// that the next call knows where to start from.

// that to be increased. Set to zero for unlimited.

// the entire sequence in future checks. This is required to make

// the first instance of /, ?, ;, or # ends the host.

// the host field still retains them, though

// the host is the remaining to the left of the first non-host char

// the local part (i.e. everything up to `@`) intact.

// the most similar to tables

// the portion of the buffer we are consuming. Updates the start pointer so

// them.

// there's a hostname.

// these next two functions are kind of hacky; probably should really be a

// this could be a closing quote, rewind the stack to get a match

// this function assumes that first character ("[") already matches;

// this should be ... } else { ... branch

// this would be a code block normally, but after paragraph

// this._events to be assigned to a new object

// to `ParcerInline` property. Probably, will switch to it sometime, such

// to a different document, so just check that it has a style.

// to lower case

// to move forward https://github.com/markdown-it/linkify-it/issues/1

// to the left of the last @ sign, unless some host-ending character

// transitions are in the form: {prev_state: {alphabet: next_state}}

// treat beginning of the line as a whitespace

// treat end of the line as a whitespace

// treat next token as start of run,

// trim before proceeding.

// trimming space in "-    \n  3" case, indent is 1 here

// true block-level token with .tag=='label'

// true if this sequence can be a terminator, false otherwise

// try to scan for link with schema - that's the most simple rule

// up in Node's output if this results in an unhandled exception.

// uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)

// uppercased versions).

// url should be normalized at this point, and existing entities are decoded

// use 'blockquote' lists for termination because it's

// use paragraph to match terminatorRules

// used in lists to determine if they interrupt a paragraph

// user@server is *always* interpreted as a hostname, and url

// usual constant length iteration very difficult to optimize in JITs.

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// validate a little.

// value at the end to obtain `delta`.

// var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

// we can default it to 0 to disable those checks.

// we know that it's going to be a valid blockquote,

// we need this to make sure size of hostname is not

// we replace non-ASCII char with a temporary placeholder

// we test again with ASCII char only

// we'd need a separate private state variable for this purpose.

// we've indicated that there is a hostname,

// webpackBootstrap

// which can be terminated by this one.

// which exists as a DOM "Host Object" (probably as C++ code). This makes the

// which gets added to `i`. The overflow checking is easier

// with code comments

// with indent=2 becomes '  \tfoobar'

// without limitation the rights to use, copy, modify, merge, publish,

// workaround for this case

// {

// }

// ~~strike through~~

// ~~~~~~~~

// İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently

//(cheaper check than in onclosetag)

////////////////////////////////////////////////////////////////////////////////

//Parses a complete HTML document and pushes it to the handler

//Resets the parser to a blank state, ready to parse a new HTML document

//TODO add a way to remove current tag

//TODO make events conditional

//Tokenizer event handlers

//alias for backwards compat

//chars removed from _buffer

//else, ignore remaining data

//else: stay in AFTER_CDATA_2 (`]]]>`)

//for entities terminated with a semicolon

//if there is remaining data, emit it in a reasonable way

//offset = 1

//parse entity

//parses legacy entities (without trailing semicolon)

//remove 2 trailing chars

//remove everything unnecessary

//self-closing tags will be on the top of the stack

//skip everything until ">"

//the max length of legacy entities is 6

//the min length of legacy entities is 2

//the section just started
